[
  uuid(3050F1C5-98B5-11CF-BB82-00AA00BDCE0B), 
  version(4.0), 
  helpstring("Microsoft HTML Object Library"), 
  custom(DE77BA64-517C-11D1-A2DA-0000F8773CE9, 100663643), 
  custom(DE77BA63-517C-11D1-A2DA-0000F8773CE9, 1030589595), 
  custom(DE77BA65-517C-11D1-A2DA-0000F8773CE9, "Created by MIDL version 6.00.0347 at Wed Aug 28 19:53:05 2002\n")
    
]
library MSHTML
{

  importlib("stdole2.tlb");

  [
    uuid(3050F25E-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLStyle: IDispatch
  {
    [
    propput, 
    id(0x8001139A), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall fontFamily([in] BSTR p );
    [
    propget, 
    id(0x8001139A), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall fontFamily([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113A0), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall fontStyle([in] BSTR p );
    [
    propget, 
    id(0x800113A0), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall fontStyle([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113A1), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall fontVariant([in] BSTR p );
    [
    propget, 
    id(0x800113A1), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall fontVariant([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113A3), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall fontWeight([in] BSTR p );
    [
    propget, 
    id(0x800113A3), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall fontWeight([out, retval] BSTR * p );
    [
    propput, 
    id(0x8001139B), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall fontSize([in] VARIANT p );
    [
    propget, 
    id(0x8001139B), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall fontSize([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113B1), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    HRESULT _stdcall font([in] BSTR p );
    [
    propget, 
    id(0x800113B1), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    HRESULT _stdcall font([out, retval] BSTR * p );
    [
    propput, 
    id(0x8001138A), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall color([in] VARIANT p );
    [
    propget, 
    id(0x8001138A), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall color([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113A8), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    HRESULT _stdcall background([in] BSTR p );
    [
    propget, 
    id(0x800113A8), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    HRESULT _stdcall background([out, retval] BSTR * p );
    [
    propput, 
    id(0xFFFFFE0B), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall backgroundColor([in] VARIANT p );
    [
    propget, 
    id(0xFFFFFE0B), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall backgroundColor([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011389), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall backgroundImage([in] BSTR p );
    [
    propget, 
    id(0x80011389), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall backgroundImage([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113B4), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall backgroundRepeat([in] BSTR p );
    [
    propget, 
    id(0x800113B4), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall backgroundRepeat([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113B5), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall backgroundAttachment([in] BSTR p );
    [
    propget, 
    id(0x800113B5), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall backgroundAttachment([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113B6), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    HRESULT _stdcall backgroundPosition([in] BSTR p );
    [
    propget, 
    id(0x800113B6), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    HRESULT _stdcall backgroundPosition([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113A9), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall backgroundPositionX([in] VARIANT p );
    [
    propget, 
    id(0x800113A9), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall backgroundPositionX([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113AA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall backgroundPositionY([in] VARIANT p );
    [
    propget, 
    id(0x800113AA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall backgroundPositionY([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113B7), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall wordSpacing([in] VARIANT p );
    [
    propget, 
    id(0x800113B7), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall wordSpacing([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011390), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall letterSpacing([in] VARIANT p );
    [
    propget, 
    id(0x80011390), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall letterSpacing([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113AB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textDecoration([in] BSTR p );
    [
    propget, 
    id(0x800113AB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textDecoration([out, retval] BSTR * p );
    [
    propput, 
    id(0x8001139F), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textDecorationNone([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x8001139F), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textDecorationNone([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x8001139D), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textDecorationUnderline([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x8001139D), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textDecorationUnderline([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x800113CD), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textDecorationOverline([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x800113CD), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textDecorationOverline([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x8001139C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textDecorationLineThrough([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x8001139C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textDecorationLineThrough([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x8001139E), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textDecorationBlink([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x8001139E), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textDecorationBlink([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x800113B8), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall verticalAlign([in] VARIANT p );
    [
    propget, 
    id(0x800113B8), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall verticalAlign([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001138C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textTransform([in] BSTR p );
    [
    propget, 
    id(0x8001138C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textTransform([out, retval] BSTR * p );
    [
    propput, 
    id(0x80010048), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textAlign([in] BSTR p );
    [
    propget, 
    id(0x80010048), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textAlign([out, retval] BSTR * p );
    [
    propput, 
    id(0x8001138F), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textIndent([in] VARIANT p );
    [
    propget, 
    id(0x8001138F), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textIndent([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001138E), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall lineHeight([in] VARIANT p );
    [
    propget, 
    id(0x8001138E), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall lineHeight([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113AD), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall marginTop([in] VARIANT p );
    [
    propget, 
    id(0x800113AD), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall marginTop([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113AE), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall marginRight([in] VARIANT p );
    [
    propget, 
    id(0x800113AE), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall marginRight([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113AF), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall marginBottom([in] VARIANT p );
    [
    propget, 
    id(0x800113AF), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall marginBottom([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113B0), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall marginLeft([in] VARIANT p );
    [
    propget, 
    id(0x800113B0), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall marginLeft([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113AC), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    HRESULT _stdcall margin([in] BSTR p );
    [
    propget, 
    id(0x800113AC), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    HRESULT _stdcall margin([out, retval] BSTR * p );
    [
    propput, 
    id(0x80011394), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall paddingTop([in] VARIANT p );
    [
    propget, 
    id(0x80011394), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall paddingTop([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011395), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall paddingRight([in] VARIANT p );
    [
    propget, 
    id(0x80011395), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall paddingRight([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011396), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall paddingBottom([in] VARIANT p );
    [
    propget, 
    id(0x80011396), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall paddingBottom([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011397), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall paddingLeft([in] VARIANT p );
    [
    propget, 
    id(0x80011397), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall paddingLeft([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011393), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    HRESULT _stdcall padding([in] BSTR p );
    [
    propget, 
    id(0x80011393), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    HRESULT _stdcall padding([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113B9), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    HRESULT _stdcall border([in] BSTR p );
    [
    propget, 
    id(0x800113B9), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    HRESULT _stdcall border([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113BA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderTop([in] BSTR p );
    [
    propget, 
    id(0x800113BA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderTop([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113BB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderRight([in] BSTR p );
    [
    propget, 
    id(0x800113BB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderRight([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113BC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderBottom([in] BSTR p );
    [
    propget, 
    id(0x800113BC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderBottom([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113BD), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderLeft([in] BSTR p );
    [
    propget, 
    id(0x800113BD), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderLeft([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113BE), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderColor([in] BSTR p );
    [
    propget, 
    id(0x800113BE), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderColor([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113BF), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderTopColor([in] VARIANT p );
    [
    propget, 
    id(0x800113BF), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderTopColor([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113C0), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderRightColor([in] VARIANT p );
    [
    propget, 
    id(0x800113C0), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderRightColor([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113C1), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderBottomColor([in] VARIANT p );
    [
    propget, 
    id(0x800113C1), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderBottomColor([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113C2), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderLeftColor([in] VARIANT p );
    [
    propget, 
    id(0x800113C2), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderLeftColor([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113C3), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderWidth([in] BSTR p );
    [
    propget, 
    id(0x800113C3), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderWidth([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113C4), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderTopWidth([in] VARIANT p );
    [
    propget, 
    id(0x800113C4), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderTopWidth([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113C5), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderRightWidth([in] VARIANT p );
    [
    propget, 
    id(0x800113C5), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderRightWidth([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113C6), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderBottomWidth([in] VARIANT p );
    [
    propget, 
    id(0x800113C6), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderBottomWidth([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113C7), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderLeftWidth([in] VARIANT p );
    [
    propget, 
    id(0x800113C7), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderLeftWidth([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113C8), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderStyle([in] BSTR p );
    [
    propget, 
    id(0x800113C8), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderStyle([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113C9), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderTopStyle([in] BSTR p );
    [
    propget, 
    id(0x800113C9), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderTopStyle([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113CA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderRightStyle([in] BSTR p );
    [
    propget, 
    id(0x800113CA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderRightStyle([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113CB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderBottomStyle([in] BSTR p );
    [
    propget, 
    id(0x800113CB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderBottomStyle([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113CC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderLeftStyle([in] BSTR p );
    [
    propget, 
    id(0x800113CC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderLeftStyle([out, retval] BSTR * p );
    [
    propput, 
    id(0x80010005), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall width([in] VARIANT p );
    [
    propget, 
    id(0x80010005), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall width([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80010006), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall height([in] VARIANT p );
    [
    propget, 
    id(0x80010006), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall height([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113CE), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall styleFloat([in] BSTR p );
    [
    propget, 
    id(0x800113CE), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall styleFloat([out, retval] BSTR * p );
    [
    propput, 
    id(0x80011398), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall clear([in] BSTR p );
    [
    propget, 
    id(0x80011398), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall clear([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113CF), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall display([in] BSTR p );
    [
    propget, 
    id(0x800113CF), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall display([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113D8), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall visibility([in] BSTR p );
    [
    propget, 
    id(0x800113D8), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall visibility([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113D0), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall listStyleType([in] BSTR p );
    [
    propget, 
    id(0x800113D0), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall listStyleType([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113D1), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall listStylePosition([in] BSTR p );
    [
    propget, 
    id(0x800113D1), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall listStylePosition([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113D2), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall listStyleImage([in] BSTR p );
    [
    propget, 
    id(0x800113D2), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall listStyleImage([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113D3), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    HRESULT _stdcall listStyle([in] BSTR p );
    [
    propget, 
    id(0x800113D3), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    HRESULT _stdcall listStyle([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113D4), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall whiteSpace([in] BSTR p );
    [
    propget, 
    id(0x800113D4), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall whiteSpace([out, retval] BSTR * p );
    [
    propput, 
    id(0x80010004), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall top([in] VARIANT p );
    [
    propget, 
    id(0x80010004), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall top([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80010003), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall left([in] VARIANT p );
    [
    propget, 
    id(0x80010003), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall left([out, retval] VARIANT * p );
    [
    propget, 
    id(0x800113E2), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall position([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113E3), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall zIndex([in] VARIANT p );
    [
    propget, 
    id(0x800113E3), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall zIndex([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011392), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall overflow([in] BSTR p );
    [
    propget, 
    id(0x80011392), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall overflow([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113D5), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall pageBreakBefore([in] BSTR p );
    [
    propget, 
    id(0x800113D5), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall pageBreakBefore([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113D6), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall pageBreakAfter([in] BSTR p );
    [
    propget, 
    id(0x800113D6), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall pageBreakAfter([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113EB), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    HRESULT _stdcall cssText([in] BSTR p );
    [
    propget, 
    id(0x800113EB), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    HRESULT _stdcall cssText([out, retval] BSTR * p );
    [
    propput, 
    id(0x80010FA0), 
    bindable, 
    displaybind, 
    hidden
    ]
    HRESULT _stdcall pixelTop([in] long p );
    [
    propget, 
    id(0x80010FA0), 
    bindable, 
    displaybind, 
    hidden
    ]
    HRESULT _stdcall pixelTop([out, retval] long * p );
    [
    propput, 
    id(0x80010FA1), 
    bindable, 
    displaybind, 
    hidden
    ]
    HRESULT _stdcall pixelLeft([in] long p );
    [
    propget, 
    id(0x80010FA1), 
    bindable, 
    displaybind, 
    hidden
    ]
    HRESULT _stdcall pixelLeft([out, retval] long * p );
    [
    propput, 
    id(0x80010FA2), 
    bindable, 
    displaybind, 
    hidden
    ]
    HRESULT _stdcall pixelWidth([in] long p );
    [
    propget, 
    id(0x80010FA2), 
    bindable, 
    displaybind, 
    hidden
    ]
    HRESULT _stdcall pixelWidth([out, retval] long * p );
    [
    propput, 
    id(0x80010FA3), 
    bindable, 
    displaybind, 
    hidden
    ]
    HRESULT _stdcall pixelHeight([in] long p );
    [
    propget, 
    id(0x80010FA3), 
    bindable, 
    displaybind, 
    hidden
    ]
    HRESULT _stdcall pixelHeight([out, retval] long * p );
    [
    propput, 
    id(0x80010FA4), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall posTop([in] float p );
    [
    propget, 
    id(0x80010FA4), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall posTop([out, retval] float * p );
    [
    propput, 
    id(0x80010FA5), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall posLeft([in] float p );
    [
    propget, 
    id(0x80010FA5), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall posLeft([out, retval] float * p );
    [
    propput, 
    id(0x80010FA6), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall posWidth([in] float p );
    [
    propget, 
    id(0x80010FA6), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall posWidth([out, retval] float * p );
    [
    propput, 
    id(0x80010FA7), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall posHeight([in] float p );
    [
    propget, 
    id(0x80010FA7), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall posHeight([out, retval] float * p );
    [
    propput, 
    id(0x800113EE), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall cursor([in] BSTR p );
    [
    propget, 
    id(0x800113EE), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall cursor([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113E4), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall clip([in] BSTR p );
    [
    propget, 
    id(0x800113E4), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall clip([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113DA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall filter([in] BSTR p );
    [
    propget, 
    id(0x800113DA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall filter([out, retval] BSTR * p );
    [
    id(0x800101F5)
    ]
    HRESULT _stdcall setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    HRESULT _stdcall getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags, [out, retval] VARIANT * AttributeValue );
    [
    id(0x800101F7)
    ]
    HRESULT _stdcall removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags, [out, retval] VARIANT_BOOL * pfSuccess );
    [
    id(0x80010FA8)
    ]
    HRESULT _stdcall toString([out, retval] BSTR * String );
  };

  [
    public
  ]
  typedef  struct tag_RemotableHandle * wireHDC;

  
  typedef union tag__MIDL_IWinTypes_0009
  {
    long hInproc;
    long hRemote;
  } __MIDL_IWinTypes_0009;

  
  typedef struct tagtagRECT
  {
    long left;
    long top;
    long right;
    long bottom;
  } tagRECT;

  
  typedef struct tagtagPOINT
  {
    long x;
    long y;
  } tagPOINT;

  
  typedef enum tag_htmlDesignMode
  {
    htmlDesignModeInherit = 4294967294, 
    htmlDesignModeOn = 4294967295, 
    htmlDesignModeOff = 0, 
    htmlDesignMode_Max = 2147483647
  } _htmlDesignMode;

  
  typedef enum tag_htmlZOrder
  {
    htmlZOrderFront = 0, 
    htmlZOrderBack = 1, 
    htmlZOrder_Max = 2147483647
  } _htmlZOrder;

  
  typedef enum tag_htmlClear
  {
    htmlClearNotSet = 0, 
    htmlClearAll = 1, 
    htmlClearLeft = 2, 
    htmlClearRight = 3, 
    htmlClearBoth = 4, 
    htmlClearNone = 5, 
    htmlClear_Max = 2147483647
  } _htmlClear;

  
  typedef enum tag_htmlControlAlign
  {
    htmlControlAlignNotSet = 0, 
    htmlControlAlignLeft = 1, 
    htmlControlAlignCenter = 2, 
    htmlControlAlignRight = 3, 
    htmlControlAlignTextTop = 4, 
    htmlControlAlignAbsMiddle = 5, 
    htmlControlAlignBaseline = 6, 
    htmlControlAlignAbsBottom = 7, 
    htmlControlAlignBottom = 8, 
    htmlControlAlignMiddle = 9, 
    htmlControlAlignTop = 10, 
    htmlControlAlign_Max = 2147483647
  } _htmlControlAlign;

  
  typedef enum tag_htmlBlockAlign
  {
    htmlBlockAlignNotSet = 0, 
    htmlBlockAlignLeft = 1, 
    htmlBlockAlignCenter = 2, 
    htmlBlockAlignRight = 3, 
    htmlBlockAlignJustify = 4, 
    htmlBlockAlign_Max = 2147483647
  } _htmlBlockAlign;

  
  typedef enum tag_htmlReadyState
  {
    htmlReadyStateuninitialized = 0, 
    htmlReadyStateloading = 1, 
    htmlReadyStateloaded = 2, 
    htmlReadyStateinteractive = 3, 
    htmlReadyStatecomplete = 4, 
    htmlReadyState_Max = 2147483647
  } _htmlReadyState;

  
  typedef enum tag_htmlLoop
  {
    htmlLoopLoopInfinite = 4294967295, 
    htmlLoop_Max = 2147483647
  } _htmlLoop;

  
  typedef enum tag_mediaType
  {
    mediaTypeNotSet = 0, 
    mediaTypeAll = 511, 
    mediaTypeAural = 1, 
    mediaTypeBraille = 2, 
    mediaTypeEmbossed = 4, 
    mediaTypeHandheld = 8, 
    mediaTypePrint = 16, 
    mediaTypeProjection = 32, 
    mediaTypeScreen = 64, 
    mediaTypeTty = 128, 
    mediaTypeTv = 256, 
    mediaType_Max = 2147483647
  } _mediaType;

  
  typedef enum tag_styleTextTransform
  {
    styleTextTransformNotSet = 0, 
    styleTextTransformCapitalize = 1, 
    styleTextTransformLowercase = 2, 
    styleTextTransformUppercase = 3, 
    styleTextTransformNone = 4, 
    styleTextTransform_Max = 2147483647
  } _styleTextTransform;

  
  typedef enum tag_styleDataRepeat
  {
    styleDataRepeatNone = 0, 
    styleDataRepeatInner = 1, 
    styleDataRepeat_Max = 2147483647
  } _styleDataRepeat;

  
  typedef enum tag_styleOverflow
  {
    styleOverflowNotSet = 0, 
    styleOverflowAuto = 1, 
    styleOverflowHidden = 2, 
    styleOverflowVisible = 3, 
    styleOverflowScroll = 4, 
    styleOverflow_Max = 2147483647
  } _styleOverflow;

  
  typedef enum tag_styleTableLayout
  {
    styleTableLayoutNotSet = 0, 
    styleTableLayoutAuto = 1, 
    styleTableLayoutFixed = 2, 
    styleTableLayout_Max = 2147483647
  } _styleTableLayout;

  
  typedef enum tag_styleBorderCollapse
  {
    styleBorderCollapseNotSet = 0, 
    styleBorderCollapseSeparate = 1, 
    styleBorderCollapseCollapse = 2, 
    styleBorderCollapse_Max = 2147483647
  } _styleBorderCollapse;

  
  typedef enum tag_styleFontStyle
  {
    styleFontStyleNotSet = 0, 
    styleFontStyleItalic = 1, 
    styleFontStyleOblique = 2, 
    styleFontStyleNormal = 3, 
    styleFontStyle_Max = 2147483647
  } _styleFontStyle;

  
  typedef enum tag_styleFontVariant
  {
    styleFontVariantNotSet = 0, 
    styleFontVariantSmallCaps = 1, 
    styleFontVariantNormal = 2, 
    styleFontVariant_Max = 2147483647
  } _styleFontVariant;

  
  typedef enum tag_styleBackgroundRepeat
  {
    styleBackgroundRepeatRepeat = 0, 
    styleBackgroundRepeatRepeatX = 1, 
    styleBackgroundRepeatRepeatY = 2, 
    styleBackgroundRepeatNoRepeat = 3, 
    styleBackgroundRepeatNotSet = 4, 
    styleBackgroundRepeat_Max = 2147483647
  } _styleBackgroundRepeat;

  
  typedef enum tag_styleBackgroundAttachment
  {
    styleBackgroundAttachmentFixed = 0, 
    styleBackgroundAttachmentScroll = 1, 
    styleBackgroundAttachmentNotSet = 2, 
    styleBackgroundAttachment_Max = 2147483647
  } _styleBackgroundAttachment;

  
  typedef enum tag_styleVerticalAlign
  {
    styleVerticalAlignAuto = 0, 
    styleVerticalAlignBaseline = 1, 
    styleVerticalAlignSub = 2, 
    styleVerticalAlignSuper = 3, 
    styleVerticalAlignTop = 4, 
    styleVerticalAlignTextTop = 5, 
    styleVerticalAlignMiddle = 6, 
    styleVerticalAlignBottom = 7, 
    styleVerticalAlignTextBottom = 8, 
    styleVerticalAlignInherit = 9, 
    styleVerticalAlignNotSet = 10, 
    styleVerticalAlign_Max = 2147483647
  } _styleVerticalAlign;

  
  typedef enum tag_styleFontWeight
  {
    styleFontWeightNotSet = 0, 
    styleFontWeight100 = 1, 
    styleFontWeight200 = 2, 
    styleFontWeight300 = 3, 
    styleFontWeight400 = 4, 
    styleFontWeight500 = 5, 
    styleFontWeight600 = 6, 
    styleFontWeight700 = 7, 
    styleFontWeight800 = 8, 
    styleFontWeight900 = 9, 
    styleFontWeightNormal = 10, 
    styleFontWeightBold = 11, 
    styleFontWeightBolder = 12, 
    styleFontWeightLighter = 13, 
    styleFontWeight_Max = 2147483647
  } _styleFontWeight;

  
  typedef enum tag_styleBackgroundPositionX
  {
    styleBackgroundPositionXNotSet = 0, 
    styleBackgroundPositionXLeft = 1, 
    styleBackgroundPositionXCenter = 2, 
    styleBackgroundPositionXRight = 3, 
    styleBackgroundPositionX_Max = 2147483647
  } _styleBackgroundPositionX;

  
  typedef enum tag_styleBackgroundPositionY
  {
    styleBackgroundPositionYNotSet = 0, 
    styleBackgroundPositionYTop = 1, 
    styleBackgroundPositionYCenter = 2, 
    styleBackgroundPositionYBottom = 3, 
    styleBackgroundPositionY_Max = 2147483647
  } _styleBackgroundPositionY;

  
  typedef enum tag_styleFontSize
  {
    styleFontSizeXXSmall = 0, 
    styleFontSizeXSmall = 1, 
    styleFontSizeSmall = 2, 
    styleFontSizeMedium = 3, 
    styleFontSizeLarge = 4, 
    styleFontSizeXLarge = 5, 
    styleFontSizeXXLarge = 6, 
    styleFontSizeSmaller = 7, 
    styleFontSizeLarger = 8, 
    styleFontSize_Max = 2147483647
  } _styleFontSize;

  
  typedef enum tag_styleAuto
  {
    styleAutoAuto = 0, 
    styleAuto_Max = 2147483647
  } _styleAuto;

  
  typedef enum tag_styleNormal
  {
    styleNormalNormal = 0, 
    styleNormal_Max = 2147483647
  } _styleNormal;

  
  typedef enum tag_styleBorderWidth
  {
    styleBorderWidthThin = 0, 
    styleBorderWidthMedium = 1, 
    styleBorderWidthThick = 2, 
    styleBorderWidth_Max = 2147483647
  } _styleBorderWidth;

  
  typedef enum tag_stylePosition
  {
    stylePositionNotSet = 0, 
    stylePositionstatic = 1, 
    stylePositionrelative = 2, 
    stylePositionabsolute = 3, 
    stylePositionfixed = 4, 
    stylePosition_Max = 2147483647
  } _stylePosition;

  
  typedef enum tag_styleBorderStyle
  {
    styleBorderStyleNotSet = 0, 
    styleBorderStyleDotted = 1, 
    styleBorderStyleDashed = 2, 
    styleBorderStyleSolid = 3, 
    styleBorderStyleDouble = 4, 
    styleBorderStyleGroove = 5, 
    styleBorderStyleRidge = 6, 
    styleBorderStyleInset = 7, 
    styleBorderStyleOutset = 8, 
    styleBorderStyleWindowInset = 9, 
    styleBorderStyleNone = 10, 
    styleBorderStyle_Max = 2147483647
  } _styleBorderStyle;

  
  typedef enum tag_styleStyleFloat
  {
    styleStyleFloatNotSet = 0, 
    styleStyleFloatLeft = 1, 
    styleStyleFloatRight = 2, 
    styleStyleFloatNone = 3, 
    styleStyleFloat_Max = 2147483647
  } _styleStyleFloat;

  
  typedef enum tag_styleDisplay
  {
    styleDisplayNotSet = 0, 
    styleDisplayBlock = 1, 
    styleDisplayInline = 2, 
    styleDisplayListItem = 3, 
    styleDisplayNone = 4, 
    styleDisplayTableHeaderGroup = 5, 
    styleDisplayTableFooterGroup = 6, 
    styleDisplayInlineBlock = 7, 
    styleDisplay_Max = 2147483647
  } _styleDisplay;

  
  typedef enum tag_styleVisibility
  {
    styleVisibilityNotSet = 0, 
    styleVisibilityInherit = 1, 
    styleVisibilityVisible = 2, 
    styleVisibilityHidden = 3, 
    styleVisibility_Max = 2147483647
  } _styleVisibility;

  
  typedef enum tag_styleListStyleType
  {
    styleListStyleTypeNotSet = 0, 
    styleListStyleTypeDisc = 1, 
    styleListStyleTypeCircle = 2, 
    styleListStyleTypeSquare = 3, 
    styleListStyleTypeDecimal = 4, 
    styleListStyleTypeLowerRoman = 5, 
    styleListStyleTypeUpperRoman = 6, 
    styleListStyleTypeLowerAlpha = 7, 
    styleListStyleTypeUpperAlpha = 8, 
    styleListStyleTypeNone = 9, 
    styleListStyleType_Max = 2147483647
  } _styleListStyleType;

  
  typedef enum tag_styleListStylePosition
  {
    styleListStylePositionNotSet = 0, 
    styleListStylePositionInside = 1, 
    styleListStylePositionOutSide = 2, 
    styleListStylePosition_Max = 2147483647
  } _styleListStylePosition;

  
  typedef enum tag_styleWhiteSpace
  {
    styleWhiteSpaceNotSet = 0, 
    styleWhiteSpaceNormal = 1, 
    styleWhiteSpacePre = 2, 
    styleWhiteSpaceNowrap = 3, 
    styleWhiteSpace_Max = 2147483647
  } _styleWhiteSpace;

  
  typedef enum tag_stylePageBreak
  {
    stylePageBreakNotSet = 0, 
    stylePageBreakAuto = 1, 
    stylePageBreakAlways = 2, 
    stylePageBreakLeft = 3, 
    stylePageBreakRight = 4, 
    stylePageBreak_Max = 2147483647
  } _stylePageBreak;

  
  typedef enum tag_styleCursor
  {
    styleCursorAuto = 0, 
    styleCursorCrosshair = 1, 
    styleCursorDefault = 2, 
    styleCursorHand = 3, 
    styleCursorMove = 4, 
    styleCursorE_resize = 5, 
    styleCursorNe_resize = 6, 
    styleCursorNw_resize = 7, 
    styleCursorN_resize = 8, 
    styleCursorSe_resize = 9, 
    styleCursorSw_resize = 10, 
    styleCursorS_resize = 11, 
    styleCursorW_resize = 12, 
    styleCursorText = 13, 
    styleCursorWait = 14, 
    styleCursorHelp = 15, 
    styleCursorPointer = 16, 
    styleCursorProgress = 17, 
    styleCursorNot_allowed = 18, 
    styleCursorNo_drop = 19, 
    styleCursorVertical_text = 20, 
    styleCursorall_scroll = 21, 
    styleCursorcol_resize = 22, 
    styleCursorrow_resize = 23, 
    styleCursorcustom = 24, 
    styleCursorNotSet = 25, 
    styleCursor_Max = 2147483647
  } _styleCursor;

  
  typedef enum tag_styleDir
  {
    styleDirNotSet = 0, 
    styleDirLeftToRight = 1, 
    styleDirRightToLeft = 2, 
    styleDirInherit = 3, 
    styleDir_Max = 2147483647
  } _styleDir;

  
  typedef enum tag_styleBidi
  {
    styleBidiNotSet = 0, 
    styleBidiNormal = 1, 
    styleBidiEmbed = 2, 
    styleBidiOverride = 3, 
    styleBidiInherit = 4, 
    styleBidi_Max = 2147483647
  } _styleBidi;

  
  typedef enum tag_styleImeMode
  {
    styleImeModeAuto = 0, 
    styleImeModeActive = 1, 
    styleImeModeInactive = 2, 
    styleImeModeDisabled = 3, 
    styleImeModeNotSet = 4, 
    styleImeMode_Max = 2147483647
  } _styleImeMode;

  
  typedef enum tag_styleRubyAlign
  {
    styleRubyAlignNotSet = 0, 
    styleRubyAlignAuto = 1, 
    styleRubyAlignLeft = 2, 
    styleRubyAlignCenter = 3, 
    styleRubyAlignRight = 4, 
    styleRubyAlignDistributeLetter = 5, 
    styleRubyAlignDistributeSpace = 6, 
    styleRubyAlignLineEdge = 7, 
    styleRubyAlign_Max = 2147483647
  } _styleRubyAlign;

  
  typedef enum tag_styleRubyPosition
  {
    styleRubyPositionNotSet = 0, 
    styleRubyPositionAbove = 1, 
    styleRubyPositionInline = 2, 
    styleRubyPosition_Max = 2147483647
  } _styleRubyPosition;

  
  typedef enum tag_styleRubyOverhang
  {
    styleRubyOverhangNotSet = 0, 
    styleRubyOverhangAuto = 1, 
    styleRubyOverhangWhitespace = 2, 
    styleRubyOverhangNone = 3, 
    styleRubyOverhang_Max = 2147483647
  } _styleRubyOverhang;

  
  typedef enum tag_styleLayoutGridChar
  {
    styleLayoutGridCharNotSet = 0, 
    styleLayoutGridCharAuto = 1, 
    styleLayoutGridCharNone = 2, 
    styleLayoutGridChar_Max = 2147483647
  } _styleLayoutGridChar;

  
  typedef enum tag_styleLayoutGridLine
  {
    styleLayoutGridLineNotSet = 0, 
    styleLayoutGridLineAuto = 1, 
    styleLayoutGridLineNone = 2, 
    styleLayoutGridLine_Max = 2147483647
  } _styleLayoutGridLine;

  
  typedef enum tag_styleLayoutGridMode
  {
    styleLayoutGridModeNotSet = 0, 
    styleLayoutGridModeChar = 1, 
    styleLayoutGridModeLine = 2, 
    styleLayoutGridModeBoth = 3, 
    styleLayoutGridModeNone = 4, 
    styleLayoutGridMode_Max = 2147483647
  } _styleLayoutGridMode;

  
  typedef enum tag_styleLayoutGridType
  {
    styleLayoutGridTypeNotSet = 0, 
    styleLayoutGridTypeLoose = 1, 
    styleLayoutGridTypeStrict = 2, 
    styleLayoutGridTypeFixed = 3, 
    styleLayoutGridType_Max = 2147483647
  } _styleLayoutGridType;

  
  typedef enum tag_styleLineBreak
  {
    styleLineBreakNotSet = 0, 
    styleLineBreakNormal = 1, 
    styleLineBreakStrict = 2, 
    styleLineBreak_Max = 2147483647
  } _styleLineBreak;

  
  typedef enum tag_styleWordBreak
  {
    styleWordBreakNotSet = 0, 
    styleWordBreakNormal = 1, 
    styleWordBreakBreakAll = 2, 
    styleWordBreakKeepAll = 3, 
    styleWordBreak_Max = 2147483647
  } _styleWordBreak;

  
  typedef enum tag_styleWordWrap
  {
    styleWordWrapNotSet = 0, 
    styleWordWrapOff = 1, 
    styleWordWrapOn = 2, 
    styleWordWrap_Max = 2147483647
  } _styleWordWrap;

  
  typedef enum tag_styleTextJustify
  {
    styleTextJustifyNotSet = 0, 
    styleTextJustifyInterWord = 1, 
    styleTextJustifyNewspaper = 2, 
    styleTextJustifyDistribute = 3, 
    styleTextJustifyDistributeAllLines = 4, 
    styleTextJustifyInterIdeograph = 5, 
    styleTextJustifyInterCluster = 6, 
    styleTextJustifyKashida = 7, 
    styleTextJustifyAuto = 8, 
    styleTextJustify_Max = 2147483647
  } _styleTextJustify;

  
  typedef enum tag_styleTextAlignLast
  {
    styleTextAlignLastNotSet = 0, 
    styleTextAlignLastLeft = 1, 
    styleTextAlignLastCenter = 2, 
    styleTextAlignLastRight = 3, 
    styleTextAlignLastJustify = 4, 
    styleTextAlignLastAuto = 5, 
    styleTextAlignLast_Max = 2147483647
  } _styleTextAlignLast;

  
  typedef enum tag_styleTextJustifyTrim
  {
    styleTextJustifyTrimNotSet = 0, 
    styleTextJustifyTrimNone = 1, 
    styleTextJustifyTrimPunctuation = 2, 
    styleTextJustifyTrimPunctAndKana = 3, 
    styleTextJustifyTrim_Max = 2147483647
  } _styleTextJustifyTrim;

  
  typedef enum tag_styleAccelerator
  {
    styleAcceleratorFalse = 0, 
    styleAcceleratorTrue = 1, 
    styleAccelerator_Max = 2147483647
  } _styleAccelerator;

  
  typedef enum tag_styleLayoutFlow
  {
    styleLayoutFlowHorizontal = 0, 
    styleLayoutFlowVerticalIdeographic = 1, 
    styleLayoutFlowNotSet = 2, 
    styleLayoutFlow_Max = 2147483647
  } _styleLayoutFlow;

  
  typedef enum tag_styleWritingMode
  {
    styleWritingModeLrtb = 0, 
    styleWritingModeTbrl = 1, 
    styleWritingModeNotSet = 2, 
    styleWritingMode_Max = 2147483647
  } _styleWritingMode;

  
  typedef enum tag_styleBool
  {
    styleBoolFalse = 0, 
    styleBoolTrue = 1, 
    styleBool_Max = 2147483647
  } _styleBool;

  
  typedef enum tag_styleTextUnderlinePosition
  {
    styleTextUnderlinePositionBelow = 0, 
    styleTextUnderlinePositionAbove = 1, 
    styleTextUnderlinePositionAuto = 2, 
    styleTextUnderlinePositionNotSet = 3, 
    styleTextUnderlinePosition_Max = 2147483647
  } _styleTextUnderlinePosition;

  
  typedef enum tag_styleTextOverflow
  {
    styleTextOverflowClip = 0, 
    styleTextOverflowEllipsis = 1, 
    styleTextOverflowNotSet = 2, 
    styleTextOverflow_Max = 2147483647
  } _styleTextOverflow;

  [
    uuid(3050F4A2-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLStyle2: IDispatch
  {
    [
    propput, 
    id(0x800113EA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall tableLayout([in] BSTR p );
    [
    propget, 
    id(0x800113EA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall tableLayout([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113DC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderCollapse([in] BSTR p );
    [
    propget, 
    id(0x800113DC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderCollapse([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113FF), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall direction([in] BSTR p );
    [
    propget, 
    id(0x800113FF), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall direction([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113FB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall behavior([in] BSTR p );
    [
    propget, 
    id(0x800113FB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall behavior([out, retval] BSTR * p );
    [
    id(0x800101F8)
    ]
    HRESULT _stdcall setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    HRESULT _stdcall getExpression([in] BSTR propname, [out, retval] VARIANT * expression );
    [
    id(0x800101FA)
    ]
    HRESULT _stdcall removeExpression([in] BSTR propname, [out, retval] VARIANT_BOOL * pfSuccess );
    [
    propput, 
    id(0x800113E2), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall position([in] BSTR p );
    [
    propget, 
    id(0x800113E2), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall position([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113FE), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall unicodeBidi([in] BSTR p );
    [
    propget, 
    id(0x800113FE), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall unicodeBidi([out, retval] BSTR * p );
    [
    propput, 
    id(0x8001004E), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall bottom([in] VARIANT p );
    [
    propget, 
    id(0x8001004E), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall bottom([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001004D), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall right([in] VARIANT p );
    [
    propget, 
    id(0x8001004D), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall right([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80010FA9), 
    bindable, 
    displaybind, 
    hidden
    ]
    HRESULT _stdcall pixelBottom([in] long p );
    [
    propget, 
    id(0x80010FA9), 
    bindable, 
    displaybind, 
    hidden
    ]
    HRESULT _stdcall pixelBottom([out, retval] long * p );
    [
    propput, 
    id(0x80010FAA), 
    bindable, 
    displaybind, 
    hidden
    ]
    HRESULT _stdcall pixelRight([in] long p );
    [
    propget, 
    id(0x80010FAA), 
    bindable, 
    displaybind, 
    hidden
    ]
    HRESULT _stdcall pixelRight([out, retval] long * p );
    [
    propput, 
    id(0x80010FAB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall posBottom([in] float p );
    [
    propget, 
    id(0x80010FAB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall posBottom([out, retval] float * p );
    [
    propput, 
    id(0x80010FAC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall posRight([in] float p );
    [
    propget, 
    id(0x80010FAC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall posRight([out, retval] float * p );
    [
    propput, 
    id(0x80011400), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall imeMode([in] BSTR p );
    [
    propget, 
    id(0x80011400), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall imeMode([out, retval] BSTR * p );
    [
    propput, 
    id(0x80011401), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall rubyAlign([in] BSTR p );
    [
    propget, 
    id(0x80011401), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall rubyAlign([out, retval] BSTR * p );
    [
    propput, 
    id(0x80011402), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall rubyPosition([in] BSTR p );
    [
    propget, 
    id(0x80011402), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall rubyPosition([out, retval] BSTR * p );
    [
    propput, 
    id(0x80011403), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall rubyOverhang([in] BSTR p );
    [
    propget, 
    id(0x80011403), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall rubyOverhang([out, retval] BSTR * p );
    [
    propput, 
    id(0x80011407), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall layoutGridChar([in] VARIANT p );
    [
    propget, 
    id(0x80011407), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall layoutGridChar([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011408), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall layoutGridLine([in] VARIANT p );
    [
    propget, 
    id(0x80011408), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall layoutGridLine([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011409), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall layoutGridMode([in] BSTR p );
    [
    propget, 
    id(0x80011409), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall layoutGridMode([out, retval] BSTR * p );
    [
    propput, 
    id(0x8001140A), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall layoutGridType([in] BSTR p );
    [
    propget, 
    id(0x8001140A), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall layoutGridType([out, retval] BSTR * p );
    [
    propput, 
    id(0x8001140B), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    HRESULT _stdcall layoutGrid([in] BSTR p );
    [
    propget, 
    id(0x8001140B), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    HRESULT _stdcall layoutGrid([out, retval] BSTR * p );
    [
    propput, 
    id(0x8001140E), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall wordBreak([in] BSTR p );
    [
    propget, 
    id(0x8001140E), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall wordBreak([out, retval] BSTR * p );
    [
    propput, 
    id(0x8001140D), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall lineBreak([in] BSTR p );
    [
    propget, 
    id(0x8001140D), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall lineBreak([out, retval] BSTR * p );
    [
    propput, 
    id(0x8001140F), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textJustify([in] BSTR p );
    [
    propget, 
    id(0x8001140F), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textJustify([out, retval] BSTR * p );
    [
    propput, 
    id(0x80011410), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textJustifyTrim([in] BSTR p );
    [
    propget, 
    id(0x80011410), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textJustifyTrim([out, retval] BSTR * p );
    [
    propput, 
    id(0x80011411), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textKashida([in] VARIANT p );
    [
    propget, 
    id(0x80011411), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textKashida([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001140C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textAutospace([in] BSTR p );
    [
    propget, 
    id(0x8001140C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textAutospace([out, retval] BSTR * p );
    [
    propput, 
    id(0x80011413), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall overflowX([in] BSTR p );
    [
    propget, 
    id(0x80011413), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall overflowX([out, retval] BSTR * p );
    [
    propput, 
    id(0x80011414), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall overflowY([in] BSTR p );
    [
    propget, 
    id(0x80011414), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall overflowY([out, retval] BSTR * p );
    [
    propput, 
    id(0x8001141B), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall accelerator([in] BSTR p );
    [
    propget, 
    id(0x8001141B), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall accelerator([out, retval] BSTR * p );
  };

  [
    uuid(3050F656-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLStyle3: IDispatch
  {
    [
    propput, 
    id(0x80011423), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall layoutFlow([in] BSTR p );
    [
    propget, 
    id(0x80011423), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall layoutFlow([out, retval] BSTR * p );
    [
    propput, 
    id(0x80011421), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall zoom([in] VARIANT p );
    [
    propget, 
    id(0x80011421), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall zoom([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011426), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall wordWrap([in] BSTR p );
    [
    propget, 
    id(0x80011426), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall wordWrap([out, retval] BSTR * p );
    [
    propput, 
    id(0x80011427), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textUnderlinePosition([in] BSTR p );
    [
    propget, 
    id(0x80011427), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textUnderlinePosition([out, retval] BSTR * p );
    [
    propput, 
    id(0x8001143C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollbarBaseColor([in] VARIANT p );
    [
    propget, 
    id(0x8001143C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollbarBaseColor([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001143D), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollbarFaceColor([in] VARIANT p );
    [
    propget, 
    id(0x8001143D), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollbarFaceColor([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001143E), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollbar3dLightColor([in] VARIANT p );
    [
    propget, 
    id(0x8001143E), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollbar3dLightColor([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001143F), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollbarShadowColor([in] VARIANT p );
    [
    propget, 
    id(0x8001143F), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollbarShadowColor([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011440), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollbarHighlightColor([in] VARIANT p );
    [
    propget, 
    id(0x80011440), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollbarHighlightColor([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011441), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollbarDarkShadowColor([in] VARIANT p );
    [
    propget, 
    id(0x80011441), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollbarDarkShadowColor([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011442), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollbarArrowColor([in] VARIANT p );
    [
    propget, 
    id(0x80011442), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollbarArrowColor([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001144C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollbarTrackColor([in] VARIANT p );
    [
    propget, 
    id(0x8001144C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollbarTrackColor([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011448), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall writingMode([in] BSTR p );
    [
    propget, 
    id(0x80011448), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall writingMode([out, retval] BSTR * p );
    [
    propput, 
    id(0x80011453), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textAlignLast([in] BSTR p );
    [
    propget, 
    id(0x80011453), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textAlignLast([out, retval] BSTR * p );
    [
    propput, 
    id(0x80011454), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textKashidaSpace([in] VARIANT p );
    [
    propget, 
    id(0x80011454), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textKashidaSpace([out, retval] VARIANT * p );
  };

  [
    uuid(3050F816-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLStyle4: IDispatch
  {
    [
    propput, 
    id(0x80011459), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textOverflow([in] BSTR p );
    [
    propget, 
    id(0x80011459), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textOverflow([out, retval] BSTR * p );
    [
    propput, 
    id(0x8001145B), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall minHeight([in] VARIANT p );
    [
    propget, 
    id(0x8001145B), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall minHeight([out, retval] VARIANT * p );
  };

  [
    uuid(3050F3CF-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLRuleStyle: IDispatch
  {
    [
    propput, 
    id(0x8001139A), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall fontFamily([in] BSTR p );
    [
    propget, 
    id(0x8001139A), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall fontFamily([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113A0), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall fontStyle([in] BSTR p );
    [
    propget, 
    id(0x800113A0), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall fontStyle([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113A1), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall fontVariant([in] BSTR p );
    [
    propget, 
    id(0x800113A1), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall fontVariant([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113A3), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall fontWeight([in] BSTR p );
    [
    propget, 
    id(0x800113A3), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall fontWeight([out, retval] BSTR * p );
    [
    propput, 
    id(0x8001139B), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall fontSize([in] VARIANT p );
    [
    propget, 
    id(0x8001139B), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall fontSize([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113B1), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    HRESULT _stdcall font([in] BSTR p );
    [
    propget, 
    id(0x800113B1), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    HRESULT _stdcall font([out, retval] BSTR * p );
    [
    propput, 
    id(0x8001138A), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall color([in] VARIANT p );
    [
    propget, 
    id(0x8001138A), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall color([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113A8), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    HRESULT _stdcall background([in] BSTR p );
    [
    propget, 
    id(0x800113A8), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    HRESULT _stdcall background([out, retval] BSTR * p );
    [
    propput, 
    id(0xFFFFFE0B), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall backgroundColor([in] VARIANT p );
    [
    propget, 
    id(0xFFFFFE0B), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall backgroundColor([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011389), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall backgroundImage([in] BSTR p );
    [
    propget, 
    id(0x80011389), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall backgroundImage([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113B4), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall backgroundRepeat([in] BSTR p );
    [
    propget, 
    id(0x800113B4), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall backgroundRepeat([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113B5), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall backgroundAttachment([in] BSTR p );
    [
    propget, 
    id(0x800113B5), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall backgroundAttachment([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113B6), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    HRESULT _stdcall backgroundPosition([in] BSTR p );
    [
    propget, 
    id(0x800113B6), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    HRESULT _stdcall backgroundPosition([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113A9), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall backgroundPositionX([in] VARIANT p );
    [
    propget, 
    id(0x800113A9), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall backgroundPositionX([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113AA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall backgroundPositionY([in] VARIANT p );
    [
    propget, 
    id(0x800113AA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall backgroundPositionY([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113B7), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall wordSpacing([in] VARIANT p );
    [
    propget, 
    id(0x800113B7), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall wordSpacing([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011390), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall letterSpacing([in] VARIANT p );
    [
    propget, 
    id(0x80011390), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall letterSpacing([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113AB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textDecoration([in] BSTR p );
    [
    propget, 
    id(0x800113AB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textDecoration([out, retval] BSTR * p );
    [
    propput, 
    id(0x8001139F), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textDecorationNone([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x8001139F), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textDecorationNone([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x8001139D), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textDecorationUnderline([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x8001139D), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textDecorationUnderline([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x800113CD), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textDecorationOverline([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x800113CD), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textDecorationOverline([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x8001139C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textDecorationLineThrough([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x8001139C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textDecorationLineThrough([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x8001139E), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textDecorationBlink([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x8001139E), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textDecorationBlink([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x800113B8), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall verticalAlign([in] VARIANT p );
    [
    propget, 
    id(0x800113B8), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall verticalAlign([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001138C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textTransform([in] BSTR p );
    [
    propget, 
    id(0x8001138C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textTransform([out, retval] BSTR * p );
    [
    propput, 
    id(0x80010048), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textAlign([in] BSTR p );
    [
    propget, 
    id(0x80010048), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textAlign([out, retval] BSTR * p );
    [
    propput, 
    id(0x8001138F), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textIndent([in] VARIANT p );
    [
    propget, 
    id(0x8001138F), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textIndent([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001138E), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall lineHeight([in] VARIANT p );
    [
    propget, 
    id(0x8001138E), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall lineHeight([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113AD), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall marginTop([in] VARIANT p );
    [
    propget, 
    id(0x800113AD), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall marginTop([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113AE), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall marginRight([in] VARIANT p );
    [
    propget, 
    id(0x800113AE), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall marginRight([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113AF), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall marginBottom([in] VARIANT p );
    [
    propget, 
    id(0x800113AF), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall marginBottom([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113B0), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall marginLeft([in] VARIANT p );
    [
    propget, 
    id(0x800113B0), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall marginLeft([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113AC), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    HRESULT _stdcall margin([in] BSTR p );
    [
    propget, 
    id(0x800113AC), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    HRESULT _stdcall margin([out, retval] BSTR * p );
    [
    propput, 
    id(0x80011394), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall paddingTop([in] VARIANT p );
    [
    propget, 
    id(0x80011394), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall paddingTop([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011395), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall paddingRight([in] VARIANT p );
    [
    propget, 
    id(0x80011395), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall paddingRight([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011396), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall paddingBottom([in] VARIANT p );
    [
    propget, 
    id(0x80011396), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall paddingBottom([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011397), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall paddingLeft([in] VARIANT p );
    [
    propget, 
    id(0x80011397), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall paddingLeft([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011393), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    HRESULT _stdcall padding([in] BSTR p );
    [
    propget, 
    id(0x80011393), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    HRESULT _stdcall padding([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113B9), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    HRESULT _stdcall border([in] BSTR p );
    [
    propget, 
    id(0x800113B9), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    HRESULT _stdcall border([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113BA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderTop([in] BSTR p );
    [
    propget, 
    id(0x800113BA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderTop([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113BB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderRight([in] BSTR p );
    [
    propget, 
    id(0x800113BB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderRight([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113BC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderBottom([in] BSTR p );
    [
    propget, 
    id(0x800113BC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderBottom([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113BD), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderLeft([in] BSTR p );
    [
    propget, 
    id(0x800113BD), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderLeft([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113BE), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderColor([in] BSTR p );
    [
    propget, 
    id(0x800113BE), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderColor([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113BF), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderTopColor([in] VARIANT p );
    [
    propget, 
    id(0x800113BF), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderTopColor([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113C0), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderRightColor([in] VARIANT p );
    [
    propget, 
    id(0x800113C0), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderRightColor([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113C1), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderBottomColor([in] VARIANT p );
    [
    propget, 
    id(0x800113C1), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderBottomColor([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113C2), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderLeftColor([in] VARIANT p );
    [
    propget, 
    id(0x800113C2), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderLeftColor([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113C3), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderWidth([in] BSTR p );
    [
    propget, 
    id(0x800113C3), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderWidth([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113C4), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderTopWidth([in] VARIANT p );
    [
    propget, 
    id(0x800113C4), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderTopWidth([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113C5), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderRightWidth([in] VARIANT p );
    [
    propget, 
    id(0x800113C5), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderRightWidth([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113C6), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderBottomWidth([in] VARIANT p );
    [
    propget, 
    id(0x800113C6), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderBottomWidth([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113C7), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderLeftWidth([in] VARIANT p );
    [
    propget, 
    id(0x800113C7), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderLeftWidth([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113C8), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderStyle([in] BSTR p );
    [
    propget, 
    id(0x800113C8), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderStyle([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113C9), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderTopStyle([in] BSTR p );
    [
    propget, 
    id(0x800113C9), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderTopStyle([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113CA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderRightStyle([in] BSTR p );
    [
    propget, 
    id(0x800113CA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderRightStyle([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113CB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderBottomStyle([in] BSTR p );
    [
    propget, 
    id(0x800113CB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderBottomStyle([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113CC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderLeftStyle([in] BSTR p );
    [
    propget, 
    id(0x800113CC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderLeftStyle([out, retval] BSTR * p );
    [
    propput, 
    id(0x80010005), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall width([in] VARIANT p );
    [
    propget, 
    id(0x80010005), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall width([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80010006), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall height([in] VARIANT p );
    [
    propget, 
    id(0x80010006), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall height([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113CE), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall styleFloat([in] BSTR p );
    [
    propget, 
    id(0x800113CE), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall styleFloat([out, retval] BSTR * p );
    [
    propput, 
    id(0x80011398), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall clear([in] BSTR p );
    [
    propget, 
    id(0x80011398), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall clear([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113CF), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall display([in] BSTR p );
    [
    propget, 
    id(0x800113CF), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall display([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113D8), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall visibility([in] BSTR p );
    [
    propget, 
    id(0x800113D8), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall visibility([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113D0), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall listStyleType([in] BSTR p );
    [
    propget, 
    id(0x800113D0), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall listStyleType([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113D1), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall listStylePosition([in] BSTR p );
    [
    propget, 
    id(0x800113D1), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall listStylePosition([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113D2), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall listStyleImage([in] BSTR p );
    [
    propget, 
    id(0x800113D2), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall listStyleImage([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113D3), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    HRESULT _stdcall listStyle([in] BSTR p );
    [
    propget, 
    id(0x800113D3), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    HRESULT _stdcall listStyle([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113D4), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall whiteSpace([in] BSTR p );
    [
    propget, 
    id(0x800113D4), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall whiteSpace([out, retval] BSTR * p );
    [
    propput, 
    id(0x80010004), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall top([in] VARIANT p );
    [
    propget, 
    id(0x80010004), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall top([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80010003), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall left([in] VARIANT p );
    [
    propget, 
    id(0x80010003), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall left([out, retval] VARIANT * p );
    [
    propget, 
    id(0x800113E2), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall position([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113E3), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall zIndex([in] VARIANT p );
    [
    propget, 
    id(0x800113E3), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall zIndex([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011392), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall overflow([in] BSTR p );
    [
    propget, 
    id(0x80011392), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall overflow([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113D5), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall pageBreakBefore([in] BSTR p );
    [
    propget, 
    id(0x800113D5), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall pageBreakBefore([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113D6), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall pageBreakAfter([in] BSTR p );
    [
    propget, 
    id(0x800113D6), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall pageBreakAfter([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113EB), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    HRESULT _stdcall cssText([in] BSTR p );
    [
    propget, 
    id(0x800113EB), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    HRESULT _stdcall cssText([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113EE), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall cursor([in] BSTR p );
    [
    propget, 
    id(0x800113EE), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall cursor([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113E4), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall clip([in] BSTR p );
    [
    propget, 
    id(0x800113E4), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall clip([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113DA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall filter([in] BSTR p );
    [
    propget, 
    id(0x800113DA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall filter([out, retval] BSTR * p );
    [
    id(0x800101F5)
    ]
    HRESULT _stdcall setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    HRESULT _stdcall getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags, [out, retval] VARIANT * AttributeValue );
    [
    id(0x800101F7)
    ]
    HRESULT _stdcall removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags, [out, retval] VARIANT_BOOL * pfSuccess );
  };

  [
    uuid(3050F4AC-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLRuleStyle2: IDispatch
  {
    [
    propput, 
    id(0x800113EA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall tableLayout([in] BSTR p );
    [
    propget, 
    id(0x800113EA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall tableLayout([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113DC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderCollapse([in] BSTR p );
    [
    propget, 
    id(0x800113DC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderCollapse([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113FF), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall direction([in] BSTR p );
    [
    propget, 
    id(0x800113FF), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall direction([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113FB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall behavior([in] BSTR p );
    [
    propget, 
    id(0x800113FB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall behavior([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113E2), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall position([in] BSTR p );
    [
    propget, 
    id(0x800113E2), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall position([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113FE), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall unicodeBidi([in] BSTR p );
    [
    propget, 
    id(0x800113FE), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall unicodeBidi([out, retval] BSTR * p );
    [
    propput, 
    id(0x8001004E), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall bottom([in] VARIANT p );
    [
    propget, 
    id(0x8001004E), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall bottom([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001004D), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall right([in] VARIANT p );
    [
    propget, 
    id(0x8001004D), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall right([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80010FA9), 
    bindable, 
    displaybind, 
    hidden
    ]
    HRESULT _stdcall pixelBottom([in] long p );
    [
    propget, 
    id(0x80010FA9), 
    bindable, 
    displaybind, 
    hidden
    ]
    HRESULT _stdcall pixelBottom([out, retval] long * p );
    [
    propput, 
    id(0x80010FAA), 
    bindable, 
    displaybind, 
    hidden
    ]
    HRESULT _stdcall pixelRight([in] long p );
    [
    propget, 
    id(0x80010FAA), 
    bindable, 
    displaybind, 
    hidden
    ]
    HRESULT _stdcall pixelRight([out, retval] long * p );
    [
    propput, 
    id(0x80010FAB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall posBottom([in] float p );
    [
    propget, 
    id(0x80010FAB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall posBottom([out, retval] float * p );
    [
    propput, 
    id(0x80010FAC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall posRight([in] float p );
    [
    propget, 
    id(0x80010FAC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall posRight([out, retval] float * p );
    [
    propput, 
    id(0x80011400), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall imeMode([in] BSTR p );
    [
    propget, 
    id(0x80011400), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall imeMode([out, retval] BSTR * p );
    [
    propput, 
    id(0x80011401), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall rubyAlign([in] BSTR p );
    [
    propget, 
    id(0x80011401), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall rubyAlign([out, retval] BSTR * p );
    [
    propput, 
    id(0x80011402), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall rubyPosition([in] BSTR p );
    [
    propget, 
    id(0x80011402), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall rubyPosition([out, retval] BSTR * p );
    [
    propput, 
    id(0x80011403), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall rubyOverhang([in] BSTR p );
    [
    propget, 
    id(0x80011403), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall rubyOverhang([out, retval] BSTR * p );
    [
    propput, 
    id(0x80011407), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall layoutGridChar([in] VARIANT p );
    [
    propget, 
    id(0x80011407), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall layoutGridChar([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011408), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall layoutGridLine([in] VARIANT p );
    [
    propget, 
    id(0x80011408), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall layoutGridLine([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011409), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall layoutGridMode([in] BSTR p );
    [
    propget, 
    id(0x80011409), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall layoutGridMode([out, retval] BSTR * p );
    [
    propput, 
    id(0x8001140A), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall layoutGridType([in] BSTR p );
    [
    propget, 
    id(0x8001140A), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall layoutGridType([out, retval] BSTR * p );
    [
    propput, 
    id(0x8001140B), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    HRESULT _stdcall layoutGrid([in] BSTR p );
    [
    propget, 
    id(0x8001140B), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    HRESULT _stdcall layoutGrid([out, retval] BSTR * p );
    [
    propput, 
    id(0x8001140C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textAutospace([in] BSTR p );
    [
    propget, 
    id(0x8001140C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textAutospace([out, retval] BSTR * p );
    [
    propput, 
    id(0x8001140E), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall wordBreak([in] BSTR p );
    [
    propget, 
    id(0x8001140E), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall wordBreak([out, retval] BSTR * p );
    [
    propput, 
    id(0x8001140D), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall lineBreak([in] BSTR p );
    [
    propget, 
    id(0x8001140D), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall lineBreak([out, retval] BSTR * p );
    [
    propput, 
    id(0x8001140F), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textJustify([in] BSTR p );
    [
    propget, 
    id(0x8001140F), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textJustify([out, retval] BSTR * p );
    [
    propput, 
    id(0x80011410), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textJustifyTrim([in] BSTR p );
    [
    propget, 
    id(0x80011410), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textJustifyTrim([out, retval] BSTR * p );
    [
    propput, 
    id(0x80011411), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textKashida([in] VARIANT p );
    [
    propget, 
    id(0x80011411), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textKashida([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011413), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall overflowX([in] BSTR p );
    [
    propget, 
    id(0x80011413), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall overflowX([out, retval] BSTR * p );
    [
    propput, 
    id(0x80011414), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall overflowY([in] BSTR p );
    [
    propget, 
    id(0x80011414), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall overflowY([out, retval] BSTR * p );
    [
    propput, 
    id(0x8001141B), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall accelerator([in] BSTR p );
    [
    propget, 
    id(0x8001141B), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall accelerator([out, retval] BSTR * p );
  };

  [
    uuid(3050F657-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLRuleStyle3: IDispatch
  {
    [
    propput, 
    id(0x80011423), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall layoutFlow([in] BSTR p );
    [
    propget, 
    id(0x80011423), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall layoutFlow([out, retval] BSTR * p );
    [
    propput, 
    id(0x80011421), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall zoom([in] VARIANT p );
    [
    propget, 
    id(0x80011421), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall zoom([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011426), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall wordWrap([in] BSTR p );
    [
    propget, 
    id(0x80011426), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall wordWrap([out, retval] BSTR * p );
    [
    propput, 
    id(0x80011427), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textUnderlinePosition([in] BSTR p );
    [
    propget, 
    id(0x80011427), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textUnderlinePosition([out, retval] BSTR * p );
    [
    propput, 
    id(0x8001143C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollbarBaseColor([in] VARIANT p );
    [
    propget, 
    id(0x8001143C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollbarBaseColor([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001143D), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollbarFaceColor([in] VARIANT p );
    [
    propget, 
    id(0x8001143D), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollbarFaceColor([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001143E), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollbar3dLightColor([in] VARIANT p );
    [
    propget, 
    id(0x8001143E), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollbar3dLightColor([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001143F), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollbarShadowColor([in] VARIANT p );
    [
    propget, 
    id(0x8001143F), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollbarShadowColor([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011440), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollbarHighlightColor([in] VARIANT p );
    [
    propget, 
    id(0x80011440), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollbarHighlightColor([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011441), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollbarDarkShadowColor([in] VARIANT p );
    [
    propget, 
    id(0x80011441), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollbarDarkShadowColor([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011442), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollbarArrowColor([in] VARIANT p );
    [
    propget, 
    id(0x80011442), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollbarArrowColor([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001144C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollbarTrackColor([in] VARIANT p );
    [
    propget, 
    id(0x8001144C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollbarTrackColor([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011448), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall writingMode([in] BSTR p );
    [
    propget, 
    id(0x80011448), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall writingMode([out, retval] BSTR * p );
    [
    propput, 
    id(0x80011453), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textAlignLast([in] BSTR p );
    [
    propget, 
    id(0x80011453), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textAlignLast([out, retval] BSTR * p );
    [
    propput, 
    id(0x80011454), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textKashidaSpace([in] VARIANT p );
    [
    propget, 
    id(0x80011454), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textKashidaSpace([out, retval] VARIANT * p );
  };

  [
    uuid(3050F817-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLRuleStyle4: IDispatch
  {
    [
    propput, 
    id(0x80011459), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textOverflow([in] BSTR p );
    [
    propget, 
    id(0x80011459), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textOverflow([out, retval] BSTR * p );
    [
    propput, 
    id(0x8001145B), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall minHeight([in] VARIANT p );
    [
    propget, 
    id(0x8001145B), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall minHeight([out, retval] VARIANT * p );
  };

  [
    uuid(3050F55A-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLStyle
  {
    properties:
    methods:
    [
    propput, 
    id(0x8001139A), 
    bindable, 
    displaybind
    ]
    void fontFamily(BSTR Param1 );
    [
    propget, 
    id(0x8001139A), 
    bindable, 
    displaybind
    ]
    BSTR fontFamily( void );
    [
    propput, 
    id(0x800113A0), 
    bindable, 
    displaybind
    ]
    void fontStyle(BSTR Param1 );
    [
    propget, 
    id(0x800113A0), 
    bindable, 
    displaybind
    ]
    BSTR fontStyle( void );
    [
    propput, 
    id(0x800113A1), 
    bindable, 
    displaybind
    ]
    void fontVariant(BSTR Param1 );
    [
    propget, 
    id(0x800113A1), 
    bindable, 
    displaybind
    ]
    BSTR fontVariant( void );
    [
    propput, 
    id(0x800113A3), 
    bindable, 
    displaybind
    ]
    void fontWeight(BSTR Param1 );
    [
    propget, 
    id(0x800113A3), 
    bindable, 
    displaybind
    ]
    BSTR fontWeight( void );
    [
    propput, 
    id(0x8001139B), 
    bindable, 
    displaybind
    ]
    void fontSize(VARIANT Param1 );
    [
    propget, 
    id(0x8001139B), 
    bindable, 
    displaybind
    ]
    VARIANT fontSize( void );
    [
    propput, 
    id(0x800113B1), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    void font(BSTR Param1 );
    [
    propget, 
    id(0x800113B1), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    BSTR font( void );
    [
    propput, 
    id(0x8001138A), 
    bindable, 
    displaybind
    ]
    void color(VARIANT Param1 );
    [
    propget, 
    id(0x8001138A), 
    bindable, 
    displaybind
    ]
    VARIANT color( void );
    [
    propput, 
    id(0x800113A8), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    void background(BSTR Param1 );
    [
    propget, 
    id(0x800113A8), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    BSTR background( void );
    [
    propput, 
    id(0xFFFFFE0B), 
    bindable, 
    displaybind
    ]
    void backgroundColor(VARIANT Param1 );
    [
    propget, 
    id(0xFFFFFE0B), 
    bindable, 
    displaybind
    ]
    VARIANT backgroundColor( void );
    [
    propput, 
    id(0x80011389), 
    bindable, 
    displaybind
    ]
    void backgroundImage(BSTR Param1 );
    [
    propget, 
    id(0x80011389), 
    bindable, 
    displaybind
    ]
    BSTR backgroundImage( void );
    [
    propput, 
    id(0x800113B4), 
    bindable, 
    displaybind
    ]
    void backgroundRepeat(BSTR Param1 );
    [
    propget, 
    id(0x800113B4), 
    bindable, 
    displaybind
    ]
    BSTR backgroundRepeat( void );
    [
    propput, 
    id(0x800113B5), 
    bindable, 
    displaybind
    ]
    void backgroundAttachment(BSTR Param1 );
    [
    propget, 
    id(0x800113B5), 
    bindable, 
    displaybind
    ]
    BSTR backgroundAttachment( void );
    [
    propput, 
    id(0x800113B6), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    void backgroundPosition(BSTR Param1 );
    [
    propget, 
    id(0x800113B6), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    BSTR backgroundPosition( void );
    [
    propput, 
    id(0x800113A9), 
    bindable, 
    displaybind
    ]
    void backgroundPositionX(VARIANT Param1 );
    [
    propget, 
    id(0x800113A9), 
    bindable, 
    displaybind
    ]
    VARIANT backgroundPositionX( void );
    [
    propput, 
    id(0x800113AA), 
    bindable, 
    displaybind
    ]
    void backgroundPositionY(VARIANT Param1 );
    [
    propget, 
    id(0x800113AA), 
    bindable, 
    displaybind
    ]
    VARIANT backgroundPositionY( void );
    [
    propput, 
    id(0x800113B7), 
    bindable, 
    displaybind
    ]
    void wordSpacing(VARIANT Param1 );
    [
    propget, 
    id(0x800113B7), 
    bindable, 
    displaybind
    ]
    VARIANT wordSpacing( void );
    [
    propput, 
    id(0x80011390), 
    bindable, 
    displaybind
    ]
    void letterSpacing(VARIANT Param1 );
    [
    propget, 
    id(0x80011390), 
    bindable, 
    displaybind
    ]
    VARIANT letterSpacing( void );
    [
    propput, 
    id(0x800113AB), 
    bindable, 
    displaybind
    ]
    void textDecoration(BSTR Param1 );
    [
    propget, 
    id(0x800113AB), 
    bindable, 
    displaybind
    ]
    BSTR textDecoration( void );
    [
    propput, 
    id(0x8001139F), 
    bindable, 
    displaybind
    ]
    void textDecorationNone(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001139F), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL textDecorationNone( void );
    [
    propput, 
    id(0x8001139D), 
    bindable, 
    displaybind
    ]
    void textDecorationUnderline(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001139D), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL textDecorationUnderline( void );
    [
    propput, 
    id(0x800113CD), 
    bindable, 
    displaybind
    ]
    void textDecorationOverline(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x800113CD), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL textDecorationOverline( void );
    [
    propput, 
    id(0x8001139C), 
    bindable, 
    displaybind
    ]
    void textDecorationLineThrough(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001139C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL textDecorationLineThrough( void );
    [
    propput, 
    id(0x8001139E), 
    bindable, 
    displaybind
    ]
    void textDecorationBlink(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001139E), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL textDecorationBlink( void );
    [
    propput, 
    id(0x800113B8), 
    bindable, 
    displaybind
    ]
    void verticalAlign(VARIANT Param1 );
    [
    propget, 
    id(0x800113B8), 
    bindable, 
    displaybind
    ]
    VARIANT verticalAlign( void );
    [
    propput, 
    id(0x8001138C), 
    bindable, 
    displaybind
    ]
    void textTransform(BSTR Param1 );
    [
    propget, 
    id(0x8001138C), 
    bindable, 
    displaybind
    ]
    BSTR textTransform( void );
    [
    propput, 
    id(0x80010048), 
    bindable, 
    displaybind
    ]
    void textAlign(BSTR Param1 );
    [
    propget, 
    id(0x80010048), 
    bindable, 
    displaybind
    ]
    BSTR textAlign( void );
    [
    propput, 
    id(0x8001138F), 
    bindable, 
    displaybind
    ]
    void textIndent(VARIANT Param1 );
    [
    propget, 
    id(0x8001138F), 
    bindable, 
    displaybind
    ]
    VARIANT textIndent( void );
    [
    propput, 
    id(0x8001138E), 
    bindable, 
    displaybind
    ]
    void lineHeight(VARIANT Param1 );
    [
    propget, 
    id(0x8001138E), 
    bindable, 
    displaybind
    ]
    VARIANT lineHeight( void );
    [
    propput, 
    id(0x800113AD), 
    bindable, 
    displaybind
    ]
    void marginTop(VARIANT Param1 );
    [
    propget, 
    id(0x800113AD), 
    bindable, 
    displaybind
    ]
    VARIANT marginTop( void );
    [
    propput, 
    id(0x800113AE), 
    bindable, 
    displaybind
    ]
    void marginRight(VARIANT Param1 );
    [
    propget, 
    id(0x800113AE), 
    bindable, 
    displaybind
    ]
    VARIANT marginRight( void );
    [
    propput, 
    id(0x800113AF), 
    bindable, 
    displaybind
    ]
    void marginBottom(VARIANT Param1 );
    [
    propget, 
    id(0x800113AF), 
    bindable, 
    displaybind
    ]
    VARIANT marginBottom( void );
    [
    propput, 
    id(0x800113B0), 
    bindable, 
    displaybind
    ]
    void marginLeft(VARIANT Param1 );
    [
    propget, 
    id(0x800113B0), 
    bindable, 
    displaybind
    ]
    VARIANT marginLeft( void );
    [
    propput, 
    id(0x800113AC), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    void margin(BSTR Param1 );
    [
    propget, 
    id(0x800113AC), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    BSTR margin( void );
    [
    propput, 
    id(0x80011394), 
    bindable, 
    displaybind
    ]
    void paddingTop(VARIANT Param1 );
    [
    propget, 
    id(0x80011394), 
    bindable, 
    displaybind
    ]
    VARIANT paddingTop( void );
    [
    propput, 
    id(0x80011395), 
    bindable, 
    displaybind
    ]
    void paddingRight(VARIANT Param1 );
    [
    propget, 
    id(0x80011395), 
    bindable, 
    displaybind
    ]
    VARIANT paddingRight( void );
    [
    propput, 
    id(0x80011396), 
    bindable, 
    displaybind
    ]
    void paddingBottom(VARIANT Param1 );
    [
    propget, 
    id(0x80011396), 
    bindable, 
    displaybind
    ]
    VARIANT paddingBottom( void );
    [
    propput, 
    id(0x80011397), 
    bindable, 
    displaybind
    ]
    void paddingLeft(VARIANT Param1 );
    [
    propget, 
    id(0x80011397), 
    bindable, 
    displaybind
    ]
    VARIANT paddingLeft( void );
    [
    propput, 
    id(0x80011393), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    void padding(BSTR Param1 );
    [
    propget, 
    id(0x80011393), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    BSTR padding( void );
    [
    propput, 
    id(0x800113B9), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    void border(BSTR Param1 );
    [
    propget, 
    id(0x800113B9), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    BSTR border( void );
    [
    propput, 
    id(0x800113BA), 
    bindable, 
    displaybind
    ]
    void borderTop(BSTR Param1 );
    [
    propget, 
    id(0x800113BA), 
    bindable, 
    displaybind
    ]
    BSTR borderTop( void );
    [
    propput, 
    id(0x800113BB), 
    bindable, 
    displaybind
    ]
    void borderRight(BSTR Param1 );
    [
    propget, 
    id(0x800113BB), 
    bindable, 
    displaybind
    ]
    BSTR borderRight( void );
    [
    propput, 
    id(0x800113BC), 
    bindable, 
    displaybind
    ]
    void borderBottom(BSTR Param1 );
    [
    propget, 
    id(0x800113BC), 
    bindable, 
    displaybind
    ]
    BSTR borderBottom( void );
    [
    propput, 
    id(0x800113BD), 
    bindable, 
    displaybind
    ]
    void borderLeft(BSTR Param1 );
    [
    propget, 
    id(0x800113BD), 
    bindable, 
    displaybind
    ]
    BSTR borderLeft( void );
    [
    propput, 
    id(0x800113BE), 
    bindable, 
    displaybind
    ]
    void borderColor(BSTR Param1 );
    [
    propget, 
    id(0x800113BE), 
    bindable, 
    displaybind
    ]
    BSTR borderColor( void );
    [
    propput, 
    id(0x800113BF), 
    bindable, 
    displaybind
    ]
    void borderTopColor(VARIANT Param1 );
    [
    propget, 
    id(0x800113BF), 
    bindable, 
    displaybind
    ]
    VARIANT borderTopColor( void );
    [
    propput, 
    id(0x800113C0), 
    bindable, 
    displaybind
    ]
    void borderRightColor(VARIANT Param1 );
    [
    propget, 
    id(0x800113C0), 
    bindable, 
    displaybind
    ]
    VARIANT borderRightColor( void );
    [
    propput, 
    id(0x800113C1), 
    bindable, 
    displaybind
    ]
    void borderBottomColor(VARIANT Param1 );
    [
    propget, 
    id(0x800113C1), 
    bindable, 
    displaybind
    ]
    VARIANT borderBottomColor( void );
    [
    propput, 
    id(0x800113C2), 
    bindable, 
    displaybind
    ]
    void borderLeftColor(VARIANT Param1 );
    [
    propget, 
    id(0x800113C2), 
    bindable, 
    displaybind
    ]
    VARIANT borderLeftColor( void );
    [
    propput, 
    id(0x800113C3), 
    bindable, 
    displaybind
    ]
    void borderWidth(BSTR Param1 );
    [
    propget, 
    id(0x800113C3), 
    bindable, 
    displaybind
    ]
    BSTR borderWidth( void );
    [
    propput, 
    id(0x800113C4), 
    bindable, 
    displaybind
    ]
    void borderTopWidth(VARIANT Param1 );
    [
    propget, 
    id(0x800113C4), 
    bindable, 
    displaybind
    ]
    VARIANT borderTopWidth( void );
    [
    propput, 
    id(0x800113C5), 
    bindable, 
    displaybind
    ]
    void borderRightWidth(VARIANT Param1 );
    [
    propget, 
    id(0x800113C5), 
    bindable, 
    displaybind
    ]
    VARIANT borderRightWidth( void );
    [
    propput, 
    id(0x800113C6), 
    bindable, 
    displaybind
    ]
    void borderBottomWidth(VARIANT Param1 );
    [
    propget, 
    id(0x800113C6), 
    bindable, 
    displaybind
    ]
    VARIANT borderBottomWidth( void );
    [
    propput, 
    id(0x800113C7), 
    bindable, 
    displaybind
    ]
    void borderLeftWidth(VARIANT Param1 );
    [
    propget, 
    id(0x800113C7), 
    bindable, 
    displaybind
    ]
    VARIANT borderLeftWidth( void );
    [
    propput, 
    id(0x800113C8), 
    bindable, 
    displaybind
    ]
    void borderStyle(BSTR Param1 );
    [
    propget, 
    id(0x800113C8), 
    bindable, 
    displaybind
    ]
    BSTR borderStyle( void );
    [
    propput, 
    id(0x800113C9), 
    bindable, 
    displaybind
    ]
    void borderTopStyle(BSTR Param1 );
    [
    propget, 
    id(0x800113C9), 
    bindable, 
    displaybind
    ]
    BSTR borderTopStyle( void );
    [
    propput, 
    id(0x800113CA), 
    bindable, 
    displaybind
    ]
    void borderRightStyle(BSTR Param1 );
    [
    propget, 
    id(0x800113CA), 
    bindable, 
    displaybind
    ]
    BSTR borderRightStyle( void );
    [
    propput, 
    id(0x800113CB), 
    bindable, 
    displaybind
    ]
    void borderBottomStyle(BSTR Param1 );
    [
    propget, 
    id(0x800113CB), 
    bindable, 
    displaybind
    ]
    BSTR borderBottomStyle( void );
    [
    propput, 
    id(0x800113CC), 
    bindable, 
    displaybind
    ]
    void borderLeftStyle(BSTR Param1 );
    [
    propget, 
    id(0x800113CC), 
    bindable, 
    displaybind
    ]
    BSTR borderLeftStyle( void );
    [
    propput, 
    id(0x80010005), 
    bindable, 
    displaybind
    ]
    void width(VARIANT Param1 );
    [
    propget, 
    id(0x80010005), 
    bindable, 
    displaybind
    ]
    VARIANT width( void );
    [
    propput, 
    id(0x80010006), 
    bindable, 
    displaybind
    ]
    void height(VARIANT Param1 );
    [
    propget, 
    id(0x80010006), 
    bindable, 
    displaybind
    ]
    VARIANT height( void );
    [
    propput, 
    id(0x800113CE), 
    bindable, 
    displaybind
    ]
    void styleFloat(BSTR Param1 );
    [
    propget, 
    id(0x800113CE), 
    bindable, 
    displaybind
    ]
    BSTR styleFloat( void );
    [
    propput, 
    id(0x80011398), 
    bindable, 
    displaybind
    ]
    void clear(BSTR Param1 );
    [
    propget, 
    id(0x80011398), 
    bindable, 
    displaybind
    ]
    BSTR clear( void );
    [
    propput, 
    id(0x800113CF), 
    bindable, 
    displaybind
    ]
    void display(BSTR Param1 );
    [
    propget, 
    id(0x800113CF), 
    bindable, 
    displaybind
    ]
    BSTR display( void );
    [
    propput, 
    id(0x800113D8), 
    bindable, 
    displaybind
    ]
    void visibility(BSTR Param1 );
    [
    propget, 
    id(0x800113D8), 
    bindable, 
    displaybind
    ]
    BSTR visibility( void );
    [
    propput, 
    id(0x800113D0), 
    bindable, 
    displaybind
    ]
    void listStyleType(BSTR Param1 );
    [
    propget, 
    id(0x800113D0), 
    bindable, 
    displaybind
    ]
    BSTR listStyleType( void );
    [
    propput, 
    id(0x800113D1), 
    bindable, 
    displaybind
    ]
    void listStylePosition(BSTR Param1 );
    [
    propget, 
    id(0x800113D1), 
    bindable, 
    displaybind
    ]
    BSTR listStylePosition( void );
    [
    propput, 
    id(0x800113D2), 
    bindable, 
    displaybind
    ]
    void listStyleImage(BSTR Param1 );
    [
    propget, 
    id(0x800113D2), 
    bindable, 
    displaybind
    ]
    BSTR listStyleImage( void );
    [
    propput, 
    id(0x800113D3), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    void listStyle(BSTR Param1 );
    [
    propget, 
    id(0x800113D3), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    BSTR listStyle( void );
    [
    propput, 
    id(0x800113D4), 
    bindable, 
    displaybind
    ]
    void whiteSpace(BSTR Param1 );
    [
    propget, 
    id(0x800113D4), 
    bindable, 
    displaybind
    ]
    BSTR whiteSpace( void );
    [
    propput, 
    id(0x80010004), 
    bindable, 
    displaybind
    ]
    void top(VARIANT Param1 );
    [
    propget, 
    id(0x80010004), 
    bindable, 
    displaybind
    ]
    VARIANT top( void );
    [
    propput, 
    id(0x80010003), 
    bindable, 
    displaybind
    ]
    void left(VARIANT Param1 );
    [
    propget, 
    id(0x80010003), 
    bindable, 
    displaybind
    ]
    VARIANT left( void );
    [
    propput, 
    id(0x800113E3), 
    bindable, 
    displaybind
    ]
    void zIndex(VARIANT Param1 );
    [
    propget, 
    id(0x800113E3), 
    bindable, 
    displaybind
    ]
    VARIANT zIndex( void );
    [
    propput, 
    id(0x80011392), 
    bindable, 
    displaybind
    ]
    void overflow(BSTR Param1 );
    [
    propget, 
    id(0x80011392), 
    bindable, 
    displaybind
    ]
    BSTR overflow( void );
    [
    propput, 
    id(0x800113D5), 
    bindable, 
    displaybind
    ]
    void pageBreakBefore(BSTR Param1 );
    [
    propget, 
    id(0x800113D5), 
    bindable, 
    displaybind
    ]
    BSTR pageBreakBefore( void );
    [
    propput, 
    id(0x800113D6), 
    bindable, 
    displaybind
    ]
    void pageBreakAfter(BSTR Param1 );
    [
    propget, 
    id(0x800113D6), 
    bindable, 
    displaybind
    ]
    BSTR pageBreakAfter( void );
    [
    propput, 
    id(0x800113EB), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    void cssText(BSTR Param1 );
    [
    propget, 
    id(0x800113EB), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    BSTR cssText( void );
    [
    propput, 
    id(0x80010FA0), 
    bindable, 
    displaybind, 
    hidden
    ]
    void pixelTop(long Param1 );
    [
    propget, 
    id(0x80010FA0), 
    bindable, 
    displaybind, 
    hidden
    ]
    long pixelTop( void );
    [
    propput, 
    id(0x80010FA1), 
    bindable, 
    displaybind, 
    hidden
    ]
    void pixelLeft(long Param1 );
    [
    propget, 
    id(0x80010FA1), 
    bindable, 
    displaybind, 
    hidden
    ]
    long pixelLeft( void );
    [
    propput, 
    id(0x80010FA2), 
    bindable, 
    displaybind, 
    hidden
    ]
    void pixelWidth(long Param1 );
    [
    propget, 
    id(0x80010FA2), 
    bindable, 
    displaybind, 
    hidden
    ]
    long pixelWidth( void );
    [
    propput, 
    id(0x80010FA3), 
    bindable, 
    displaybind, 
    hidden
    ]
    void pixelHeight(long Param1 );
    [
    propget, 
    id(0x80010FA3), 
    bindable, 
    displaybind, 
    hidden
    ]
    long pixelHeight( void );
    [
    propput, 
    id(0x80010FA4), 
    bindable, 
    displaybind
    ]
    void posTop(float Param1 );
    [
    propget, 
    id(0x80010FA4), 
    bindable, 
    displaybind
    ]
    float posTop( void );
    [
    propput, 
    id(0x80010FA5), 
    bindable, 
    displaybind
    ]
    void posLeft(float Param1 );
    [
    propget, 
    id(0x80010FA5), 
    bindable, 
    displaybind
    ]
    float posLeft( void );
    [
    propput, 
    id(0x80010FA6), 
    bindable, 
    displaybind
    ]
    void posWidth(float Param1 );
    [
    propget, 
    id(0x80010FA6), 
    bindable, 
    displaybind
    ]
    float posWidth( void );
    [
    propput, 
    id(0x80010FA7), 
    bindable, 
    displaybind
    ]
    void posHeight(float Param1 );
    [
    propget, 
    id(0x80010FA7), 
    bindable, 
    displaybind
    ]
    float posHeight( void );
    [
    propput, 
    id(0x800113EE), 
    bindable, 
    displaybind
    ]
    void cursor(BSTR Param1 );
    [
    propget, 
    id(0x800113EE), 
    bindable, 
    displaybind
    ]
    BSTR cursor( void );
    [
    propput, 
    id(0x800113E4), 
    bindable, 
    displaybind
    ]
    void clip(BSTR Param1 );
    [
    propget, 
    id(0x800113E4), 
    bindable, 
    displaybind
    ]
    BSTR clip( void );
    [
    propput, 
    id(0x800113DA), 
    bindable, 
    displaybind
    ]
    void filter(BSTR Param1 );
    [
    propget, 
    id(0x800113DA), 
    bindable, 
    displaybind
    ]
    BSTR filter( void );
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x80010FA8)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x800113EA), 
    bindable, 
    displaybind
    ]
    void tableLayout(BSTR Param1 );
    [
    propget, 
    id(0x800113EA), 
    bindable, 
    displaybind
    ]
    BSTR tableLayout( void );
    [
    propput, 
    id(0x800113DC), 
    bindable, 
    displaybind
    ]
    void borderCollapse(BSTR Param1 );
    [
    propget, 
    id(0x800113DC), 
    bindable, 
    displaybind
    ]
    BSTR borderCollapse( void );
    [
    propput, 
    id(0x800113FF), 
    bindable, 
    displaybind
    ]
    void direction(BSTR Param1 );
    [
    propget, 
    id(0x800113FF), 
    bindable, 
    displaybind
    ]
    BSTR direction( void );
    [
    propput, 
    id(0x800113FB), 
    bindable, 
    displaybind
    ]
    void behavior(BSTR Param1 );
    [
    propget, 
    id(0x800113FB), 
    bindable, 
    displaybind
    ]
    BSTR behavior( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x800113E2), 
    bindable, 
    displaybind
    ]
    void position(BSTR Param1 );
    [
    propget, 
    id(0x800113E2), 
    bindable, 
    displaybind
    ]
    BSTR position( void );
    [
    propput, 
    id(0x800113FE), 
    bindable, 
    displaybind
    ]
    void unicodeBidi(BSTR Param1 );
    [
    propget, 
    id(0x800113FE), 
    bindable, 
    displaybind
    ]
    BSTR unicodeBidi( void );
    [
    propput, 
    id(0x8001004E), 
    bindable, 
    displaybind
    ]
    void bottom(VARIANT Param1 );
    [
    propget, 
    id(0x8001004E), 
    bindable, 
    displaybind
    ]
    VARIANT bottom( void );
    [
    propput, 
    id(0x8001004D), 
    bindable, 
    displaybind
    ]
    void right(VARIANT Param1 );
    [
    propget, 
    id(0x8001004D), 
    bindable, 
    displaybind
    ]
    VARIANT right( void );
    [
    propput, 
    id(0x80010FA9), 
    bindable, 
    displaybind, 
    hidden
    ]
    void pixelBottom(long Param1 );
    [
    propget, 
    id(0x80010FA9), 
    bindable, 
    displaybind, 
    hidden
    ]
    long pixelBottom( void );
    [
    propput, 
    id(0x80010FAA), 
    bindable, 
    displaybind, 
    hidden
    ]
    void pixelRight(long Param1 );
    [
    propget, 
    id(0x80010FAA), 
    bindable, 
    displaybind, 
    hidden
    ]
    long pixelRight( void );
    [
    propput, 
    id(0x80010FAB), 
    bindable, 
    displaybind
    ]
    void posBottom(float Param1 );
    [
    propget, 
    id(0x80010FAB), 
    bindable, 
    displaybind
    ]
    float posBottom( void );
    [
    propput, 
    id(0x80010FAC), 
    bindable, 
    displaybind
    ]
    void posRight(float Param1 );
    [
    propget, 
    id(0x80010FAC), 
    bindable, 
    displaybind
    ]
    float posRight( void );
    [
    propput, 
    id(0x80011400), 
    bindable, 
    displaybind
    ]
    void imeMode(BSTR Param1 );
    [
    propget, 
    id(0x80011400), 
    bindable, 
    displaybind
    ]
    BSTR imeMode( void );
    [
    propput, 
    id(0x80011401), 
    bindable, 
    displaybind
    ]
    void rubyAlign(BSTR Param1 );
    [
    propget, 
    id(0x80011401), 
    bindable, 
    displaybind
    ]
    BSTR rubyAlign( void );
    [
    propput, 
    id(0x80011402), 
    bindable, 
    displaybind
    ]
    void rubyPosition(BSTR Param1 );
    [
    propget, 
    id(0x80011402), 
    bindable, 
    displaybind
    ]
    BSTR rubyPosition( void );
    [
    propput, 
    id(0x80011403), 
    bindable, 
    displaybind
    ]
    void rubyOverhang(BSTR Param1 );
    [
    propget, 
    id(0x80011403), 
    bindable, 
    displaybind
    ]
    BSTR rubyOverhang( void );
    [
    propput, 
    id(0x80011407), 
    bindable, 
    displaybind
    ]
    void layoutGridChar(VARIANT Param1 );
    [
    propget, 
    id(0x80011407), 
    bindable, 
    displaybind
    ]
    VARIANT layoutGridChar( void );
    [
    propput, 
    id(0x80011408), 
    bindable, 
    displaybind
    ]
    void layoutGridLine(VARIANT Param1 );
    [
    propget, 
    id(0x80011408), 
    bindable, 
    displaybind
    ]
    VARIANT layoutGridLine( void );
    [
    propput, 
    id(0x80011409), 
    bindable, 
    displaybind
    ]
    void layoutGridMode(BSTR Param1 );
    [
    propget, 
    id(0x80011409), 
    bindable, 
    displaybind
    ]
    BSTR layoutGridMode( void );
    [
    propput, 
    id(0x8001140A), 
    bindable, 
    displaybind
    ]
    void layoutGridType(BSTR Param1 );
    [
    propget, 
    id(0x8001140A), 
    bindable, 
    displaybind
    ]
    BSTR layoutGridType( void );
    [
    propput, 
    id(0x8001140B), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    void layoutGrid(BSTR Param1 );
    [
    propget, 
    id(0x8001140B), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    BSTR layoutGrid( void );
    [
    propput, 
    id(0x8001140E), 
    bindable, 
    displaybind
    ]
    void wordBreak(BSTR Param1 );
    [
    propget, 
    id(0x8001140E), 
    bindable, 
    displaybind
    ]
    BSTR wordBreak( void );
    [
    propput, 
    id(0x8001140D), 
    bindable, 
    displaybind
    ]
    void lineBreak(BSTR Param1 );
    [
    propget, 
    id(0x8001140D), 
    bindable, 
    displaybind
    ]
    BSTR lineBreak( void );
    [
    propput, 
    id(0x8001140F), 
    bindable, 
    displaybind
    ]
    void textJustify(BSTR Param1 );
    [
    propget, 
    id(0x8001140F), 
    bindable, 
    displaybind
    ]
    BSTR textJustify( void );
    [
    propput, 
    id(0x80011410), 
    bindable, 
    displaybind
    ]
    void textJustifyTrim(BSTR Param1 );
    [
    propget, 
    id(0x80011410), 
    bindable, 
    displaybind
    ]
    BSTR textJustifyTrim( void );
    [
    propput, 
    id(0x80011411), 
    bindable, 
    displaybind
    ]
    void textKashida(VARIANT Param1 );
    [
    propget, 
    id(0x80011411), 
    bindable, 
    displaybind
    ]
    VARIANT textKashida( void );
    [
    propput, 
    id(0x8001140C), 
    bindable, 
    displaybind
    ]
    void textAutospace(BSTR Param1 );
    [
    propget, 
    id(0x8001140C), 
    bindable, 
    displaybind
    ]
    BSTR textAutospace( void );
    [
    propput, 
    id(0x80011413), 
    bindable, 
    displaybind
    ]
    void overflowX(BSTR Param1 );
    [
    propget, 
    id(0x80011413), 
    bindable, 
    displaybind
    ]
    BSTR overflowX( void );
    [
    propput, 
    id(0x80011414), 
    bindable, 
    displaybind
    ]
    void overflowY(BSTR Param1 );
    [
    propget, 
    id(0x80011414), 
    bindable, 
    displaybind
    ]
    BSTR overflowY( void );
    [
    propput, 
    id(0x8001141B), 
    bindable, 
    displaybind
    ]
    void accelerator(BSTR Param1 );
    [
    propget, 
    id(0x8001141B), 
    bindable, 
    displaybind
    ]
    BSTR accelerator( void );
    [
    propput, 
    id(0x80011423), 
    bindable, 
    displaybind
    ]
    void layoutFlow(BSTR Param1 );
    [
    propget, 
    id(0x80011423), 
    bindable, 
    displaybind
    ]
    BSTR layoutFlow( void );
    [
    propput, 
    id(0x80011421), 
    bindable, 
    displaybind
    ]
    void zoom(VARIANT Param1 );
    [
    propget, 
    id(0x80011421), 
    bindable, 
    displaybind
    ]
    VARIANT zoom( void );
    [
    propput, 
    id(0x80011426), 
    bindable, 
    displaybind
    ]
    void wordWrap(BSTR Param1 );
    [
    propget, 
    id(0x80011426), 
    bindable, 
    displaybind
    ]
    BSTR wordWrap( void );
    [
    propput, 
    id(0x80011427), 
    bindable, 
    displaybind
    ]
    void textUnderlinePosition(BSTR Param1 );
    [
    propget, 
    id(0x80011427), 
    bindable, 
    displaybind
    ]
    BSTR textUnderlinePosition( void );
    [
    propput, 
    id(0x8001143C), 
    bindable, 
    displaybind
    ]
    void scrollbarBaseColor(VARIANT Param1 );
    [
    propget, 
    id(0x8001143C), 
    bindable, 
    displaybind
    ]
    VARIANT scrollbarBaseColor( void );
    [
    propput, 
    id(0x8001143D), 
    bindable, 
    displaybind
    ]
    void scrollbarFaceColor(VARIANT Param1 );
    [
    propget, 
    id(0x8001143D), 
    bindable, 
    displaybind
    ]
    VARIANT scrollbarFaceColor( void );
    [
    propput, 
    id(0x8001143E), 
    bindable, 
    displaybind
    ]
    void scrollbar3dLightColor(VARIANT Param1 );
    [
    propget, 
    id(0x8001143E), 
    bindable, 
    displaybind
    ]
    VARIANT scrollbar3dLightColor( void );
    [
    propput, 
    id(0x8001143F), 
    bindable, 
    displaybind
    ]
    void scrollbarShadowColor(VARIANT Param1 );
    [
    propget, 
    id(0x8001143F), 
    bindable, 
    displaybind
    ]
    VARIANT scrollbarShadowColor( void );
    [
    propput, 
    id(0x80011440), 
    bindable, 
    displaybind
    ]
    void scrollbarHighlightColor(VARIANT Param1 );
    [
    propget, 
    id(0x80011440), 
    bindable, 
    displaybind
    ]
    VARIANT scrollbarHighlightColor( void );
    [
    propput, 
    id(0x80011441), 
    bindable, 
    displaybind
    ]
    void scrollbarDarkShadowColor(VARIANT Param1 );
    [
    propget, 
    id(0x80011441), 
    bindable, 
    displaybind
    ]
    VARIANT scrollbarDarkShadowColor( void );
    [
    propput, 
    id(0x80011442), 
    bindable, 
    displaybind
    ]
    void scrollbarArrowColor(VARIANT Param1 );
    [
    propget, 
    id(0x80011442), 
    bindable, 
    displaybind
    ]
    VARIANT scrollbarArrowColor( void );
    [
    propput, 
    id(0x8001144C), 
    bindable, 
    displaybind
    ]
    void scrollbarTrackColor(VARIANT Param1 );
    [
    propget, 
    id(0x8001144C), 
    bindable, 
    displaybind
    ]
    VARIANT scrollbarTrackColor( void );
    [
    propput, 
    id(0x80011448), 
    bindable, 
    displaybind
    ]
    void writingMode(BSTR Param1 );
    [
    propget, 
    id(0x80011448), 
    bindable, 
    displaybind
    ]
    BSTR writingMode( void );
    [
    propput, 
    id(0x80011453), 
    bindable, 
    displaybind
    ]
    void textAlignLast(BSTR Param1 );
    [
    propget, 
    id(0x80011453), 
    bindable, 
    displaybind
    ]
    BSTR textAlignLast( void );
    [
    propput, 
    id(0x80011454), 
    bindable, 
    displaybind
    ]
    void textKashidaSpace(VARIANT Param1 );
    [
    propget, 
    id(0x80011454), 
    bindable, 
    displaybind
    ]
    VARIANT textKashidaSpace( void );
    [
    propput, 
    id(0x80011459), 
    bindable, 
    displaybind
    ]
    void textOverflow(BSTR Param1 );
    [
    propget, 
    id(0x80011459), 
    bindable, 
    displaybind
    ]
    BSTR textOverflow( void );
    [
    propput, 
    id(0x8001145B), 
    bindable, 
    displaybind
    ]
    void minHeight(VARIANT Param1 );
    [
    propget, 
    id(0x8001145B), 
    bindable, 
    displaybind
    ]
    VARIANT minHeight( void );
  };

  [
    uuid(3050F285-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLStyle
  {
    [default] dispinterface DispHTMLStyle;
    interface IHTMLStyle;
    interface IHTMLStyle2;
    interface IHTMLStyle3;
    interface IHTMLStyle4;
  };

  [
    uuid(3050F55C-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLRuleStyle
  {
    properties:
    methods:
    [
    propput, 
    id(0x8001139A), 
    bindable, 
    displaybind
    ]
    void fontFamily(BSTR Param1 );
    [
    propget, 
    id(0x8001139A), 
    bindable, 
    displaybind
    ]
    BSTR fontFamily( void );
    [
    propput, 
    id(0x800113A0), 
    bindable, 
    displaybind
    ]
    void fontStyle(BSTR Param1 );
    [
    propget, 
    id(0x800113A0), 
    bindable, 
    displaybind
    ]
    BSTR fontStyle( void );
    [
    propput, 
    id(0x800113A1), 
    bindable, 
    displaybind
    ]
    void fontVariant(BSTR Param1 );
    [
    propget, 
    id(0x800113A1), 
    bindable, 
    displaybind
    ]
    BSTR fontVariant( void );
    [
    propput, 
    id(0x800113A3), 
    bindable, 
    displaybind
    ]
    void fontWeight(BSTR Param1 );
    [
    propget, 
    id(0x800113A3), 
    bindable, 
    displaybind
    ]
    BSTR fontWeight( void );
    [
    propput, 
    id(0x8001139B), 
    bindable, 
    displaybind
    ]
    void fontSize(VARIANT Param1 );
    [
    propget, 
    id(0x8001139B), 
    bindable, 
    displaybind
    ]
    VARIANT fontSize( void );
    [
    propput, 
    id(0x800113B1), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    void font(BSTR Param1 );
    [
    propget, 
    id(0x800113B1), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    BSTR font( void );
    [
    propput, 
    id(0x8001138A), 
    bindable, 
    displaybind
    ]
    void color(VARIANT Param1 );
    [
    propget, 
    id(0x8001138A), 
    bindable, 
    displaybind
    ]
    VARIANT color( void );
    [
    propput, 
    id(0x800113A8), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    void background(BSTR Param1 );
    [
    propget, 
    id(0x800113A8), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    BSTR background( void );
    [
    propput, 
    id(0xFFFFFE0B), 
    bindable, 
    displaybind
    ]
    void backgroundColor(VARIANT Param1 );
    [
    propget, 
    id(0xFFFFFE0B), 
    bindable, 
    displaybind
    ]
    VARIANT backgroundColor( void );
    [
    propput, 
    id(0x80011389), 
    bindable, 
    displaybind
    ]
    void backgroundImage(BSTR Param1 );
    [
    propget, 
    id(0x80011389), 
    bindable, 
    displaybind
    ]
    BSTR backgroundImage( void );
    [
    propput, 
    id(0x800113B4), 
    bindable, 
    displaybind
    ]
    void backgroundRepeat(BSTR Param1 );
    [
    propget, 
    id(0x800113B4), 
    bindable, 
    displaybind
    ]
    BSTR backgroundRepeat( void );
    [
    propput, 
    id(0x800113B5), 
    bindable, 
    displaybind
    ]
    void backgroundAttachment(BSTR Param1 );
    [
    propget, 
    id(0x800113B5), 
    bindable, 
    displaybind
    ]
    BSTR backgroundAttachment( void );
    [
    propput, 
    id(0x800113B6), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    void backgroundPosition(BSTR Param1 );
    [
    propget, 
    id(0x800113B6), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    BSTR backgroundPosition( void );
    [
    propput, 
    id(0x800113A9), 
    bindable, 
    displaybind
    ]
    void backgroundPositionX(VARIANT Param1 );
    [
    propget, 
    id(0x800113A9), 
    bindable, 
    displaybind
    ]
    VARIANT backgroundPositionX( void );
    [
    propput, 
    id(0x800113AA), 
    bindable, 
    displaybind
    ]
    void backgroundPositionY(VARIANT Param1 );
    [
    propget, 
    id(0x800113AA), 
    bindable, 
    displaybind
    ]
    VARIANT backgroundPositionY( void );
    [
    propput, 
    id(0x800113B7), 
    bindable, 
    displaybind
    ]
    void wordSpacing(VARIANT Param1 );
    [
    propget, 
    id(0x800113B7), 
    bindable, 
    displaybind
    ]
    VARIANT wordSpacing( void );
    [
    propput, 
    id(0x80011390), 
    bindable, 
    displaybind
    ]
    void letterSpacing(VARIANT Param1 );
    [
    propget, 
    id(0x80011390), 
    bindable, 
    displaybind
    ]
    VARIANT letterSpacing( void );
    [
    propput, 
    id(0x800113AB), 
    bindable, 
    displaybind
    ]
    void textDecoration(BSTR Param1 );
    [
    propget, 
    id(0x800113AB), 
    bindable, 
    displaybind
    ]
    BSTR textDecoration( void );
    [
    propput, 
    id(0x8001139F), 
    bindable, 
    displaybind
    ]
    void textDecorationNone(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001139F), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL textDecorationNone( void );
    [
    propput, 
    id(0x8001139D), 
    bindable, 
    displaybind
    ]
    void textDecorationUnderline(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001139D), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL textDecorationUnderline( void );
    [
    propput, 
    id(0x800113CD), 
    bindable, 
    displaybind
    ]
    void textDecorationOverline(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x800113CD), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL textDecorationOverline( void );
    [
    propput, 
    id(0x8001139C), 
    bindable, 
    displaybind
    ]
    void textDecorationLineThrough(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001139C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL textDecorationLineThrough( void );
    [
    propput, 
    id(0x8001139E), 
    bindable, 
    displaybind
    ]
    void textDecorationBlink(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001139E), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL textDecorationBlink( void );
    [
    propput, 
    id(0x800113B8), 
    bindable, 
    displaybind
    ]
    void verticalAlign(VARIANT Param1 );
    [
    propget, 
    id(0x800113B8), 
    bindable, 
    displaybind
    ]
    VARIANT verticalAlign( void );
    [
    propput, 
    id(0x8001138C), 
    bindable, 
    displaybind
    ]
    void textTransform(BSTR Param1 );
    [
    propget, 
    id(0x8001138C), 
    bindable, 
    displaybind
    ]
    BSTR textTransform( void );
    [
    propput, 
    id(0x80010048), 
    bindable, 
    displaybind
    ]
    void textAlign(BSTR Param1 );
    [
    propget, 
    id(0x80010048), 
    bindable, 
    displaybind
    ]
    BSTR textAlign( void );
    [
    propput, 
    id(0x8001138F), 
    bindable, 
    displaybind
    ]
    void textIndent(VARIANT Param1 );
    [
    propget, 
    id(0x8001138F), 
    bindable, 
    displaybind
    ]
    VARIANT textIndent( void );
    [
    propput, 
    id(0x8001138E), 
    bindable, 
    displaybind
    ]
    void lineHeight(VARIANT Param1 );
    [
    propget, 
    id(0x8001138E), 
    bindable, 
    displaybind
    ]
    VARIANT lineHeight( void );
    [
    propput, 
    id(0x800113AD), 
    bindable, 
    displaybind
    ]
    void marginTop(VARIANT Param1 );
    [
    propget, 
    id(0x800113AD), 
    bindable, 
    displaybind
    ]
    VARIANT marginTop( void );
    [
    propput, 
    id(0x800113AE), 
    bindable, 
    displaybind
    ]
    void marginRight(VARIANT Param1 );
    [
    propget, 
    id(0x800113AE), 
    bindable, 
    displaybind
    ]
    VARIANT marginRight( void );
    [
    propput, 
    id(0x800113AF), 
    bindable, 
    displaybind
    ]
    void marginBottom(VARIANT Param1 );
    [
    propget, 
    id(0x800113AF), 
    bindable, 
    displaybind
    ]
    VARIANT marginBottom( void );
    [
    propput, 
    id(0x800113B0), 
    bindable, 
    displaybind
    ]
    void marginLeft(VARIANT Param1 );
    [
    propget, 
    id(0x800113B0), 
    bindable, 
    displaybind
    ]
    VARIANT marginLeft( void );
    [
    propput, 
    id(0x800113AC), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    void margin(BSTR Param1 );
    [
    propget, 
    id(0x800113AC), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    BSTR margin( void );
    [
    propput, 
    id(0x80011394), 
    bindable, 
    displaybind
    ]
    void paddingTop(VARIANT Param1 );
    [
    propget, 
    id(0x80011394), 
    bindable, 
    displaybind
    ]
    VARIANT paddingTop( void );
    [
    propput, 
    id(0x80011395), 
    bindable, 
    displaybind
    ]
    void paddingRight(VARIANT Param1 );
    [
    propget, 
    id(0x80011395), 
    bindable, 
    displaybind
    ]
    VARIANT paddingRight( void );
    [
    propput, 
    id(0x80011396), 
    bindable, 
    displaybind
    ]
    void paddingBottom(VARIANT Param1 );
    [
    propget, 
    id(0x80011396), 
    bindable, 
    displaybind
    ]
    VARIANT paddingBottom( void );
    [
    propput, 
    id(0x80011397), 
    bindable, 
    displaybind
    ]
    void paddingLeft(VARIANT Param1 );
    [
    propget, 
    id(0x80011397), 
    bindable, 
    displaybind
    ]
    VARIANT paddingLeft( void );
    [
    propput, 
    id(0x80011393), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    void padding(BSTR Param1 );
    [
    propget, 
    id(0x80011393), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    BSTR padding( void );
    [
    propput, 
    id(0x800113B9), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    void border(BSTR Param1 );
    [
    propget, 
    id(0x800113B9), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    BSTR border( void );
    [
    propput, 
    id(0x800113BA), 
    bindable, 
    displaybind
    ]
    void borderTop(BSTR Param1 );
    [
    propget, 
    id(0x800113BA), 
    bindable, 
    displaybind
    ]
    BSTR borderTop( void );
    [
    propput, 
    id(0x800113BB), 
    bindable, 
    displaybind
    ]
    void borderRight(BSTR Param1 );
    [
    propget, 
    id(0x800113BB), 
    bindable, 
    displaybind
    ]
    BSTR borderRight( void );
    [
    propput, 
    id(0x800113BC), 
    bindable, 
    displaybind
    ]
    void borderBottom(BSTR Param1 );
    [
    propget, 
    id(0x800113BC), 
    bindable, 
    displaybind
    ]
    BSTR borderBottom( void );
    [
    propput, 
    id(0x800113BD), 
    bindable, 
    displaybind
    ]
    void borderLeft(BSTR Param1 );
    [
    propget, 
    id(0x800113BD), 
    bindable, 
    displaybind
    ]
    BSTR borderLeft( void );
    [
    propput, 
    id(0x800113BE), 
    bindable, 
    displaybind
    ]
    void borderColor(BSTR Param1 );
    [
    propget, 
    id(0x800113BE), 
    bindable, 
    displaybind
    ]
    BSTR borderColor( void );
    [
    propput, 
    id(0x800113BF), 
    bindable, 
    displaybind
    ]
    void borderTopColor(VARIANT Param1 );
    [
    propget, 
    id(0x800113BF), 
    bindable, 
    displaybind
    ]
    VARIANT borderTopColor( void );
    [
    propput, 
    id(0x800113C0), 
    bindable, 
    displaybind
    ]
    void borderRightColor(VARIANT Param1 );
    [
    propget, 
    id(0x800113C0), 
    bindable, 
    displaybind
    ]
    VARIANT borderRightColor( void );
    [
    propput, 
    id(0x800113C1), 
    bindable, 
    displaybind
    ]
    void borderBottomColor(VARIANT Param1 );
    [
    propget, 
    id(0x800113C1), 
    bindable, 
    displaybind
    ]
    VARIANT borderBottomColor( void );
    [
    propput, 
    id(0x800113C2), 
    bindable, 
    displaybind
    ]
    void borderLeftColor(VARIANT Param1 );
    [
    propget, 
    id(0x800113C2), 
    bindable, 
    displaybind
    ]
    VARIANT borderLeftColor( void );
    [
    propput, 
    id(0x800113C3), 
    bindable, 
    displaybind
    ]
    void borderWidth(BSTR Param1 );
    [
    propget, 
    id(0x800113C3), 
    bindable, 
    displaybind
    ]
    BSTR borderWidth( void );
    [
    propput, 
    id(0x800113C4), 
    bindable, 
    displaybind
    ]
    void borderTopWidth(VARIANT Param1 );
    [
    propget, 
    id(0x800113C4), 
    bindable, 
    displaybind
    ]
    VARIANT borderTopWidth( void );
    [
    propput, 
    id(0x800113C5), 
    bindable, 
    displaybind
    ]
    void borderRightWidth(VARIANT Param1 );
    [
    propget, 
    id(0x800113C5), 
    bindable, 
    displaybind
    ]
    VARIANT borderRightWidth( void );
    [
    propput, 
    id(0x800113C6), 
    bindable, 
    displaybind
    ]
    void borderBottomWidth(VARIANT Param1 );
    [
    propget, 
    id(0x800113C6), 
    bindable, 
    displaybind
    ]
    VARIANT borderBottomWidth( void );
    [
    propput, 
    id(0x800113C7), 
    bindable, 
    displaybind
    ]
    void borderLeftWidth(VARIANT Param1 );
    [
    propget, 
    id(0x800113C7), 
    bindable, 
    displaybind
    ]
    VARIANT borderLeftWidth( void );
    [
    propput, 
    id(0x800113C8), 
    bindable, 
    displaybind
    ]
    void borderStyle(BSTR Param1 );
    [
    propget, 
    id(0x800113C8), 
    bindable, 
    displaybind
    ]
    BSTR borderStyle( void );
    [
    propput, 
    id(0x800113C9), 
    bindable, 
    displaybind
    ]
    void borderTopStyle(BSTR Param1 );
    [
    propget, 
    id(0x800113C9), 
    bindable, 
    displaybind
    ]
    BSTR borderTopStyle( void );
    [
    propput, 
    id(0x800113CA), 
    bindable, 
    displaybind
    ]
    void borderRightStyle(BSTR Param1 );
    [
    propget, 
    id(0x800113CA), 
    bindable, 
    displaybind
    ]
    BSTR borderRightStyle( void );
    [
    propput, 
    id(0x800113CB), 
    bindable, 
    displaybind
    ]
    void borderBottomStyle(BSTR Param1 );
    [
    propget, 
    id(0x800113CB), 
    bindable, 
    displaybind
    ]
    BSTR borderBottomStyle( void );
    [
    propput, 
    id(0x800113CC), 
    bindable, 
    displaybind
    ]
    void borderLeftStyle(BSTR Param1 );
    [
    propget, 
    id(0x800113CC), 
    bindable, 
    displaybind
    ]
    BSTR borderLeftStyle( void );
    [
    propput, 
    id(0x80010005), 
    bindable, 
    displaybind
    ]
    void width(VARIANT Param1 );
    [
    propget, 
    id(0x80010005), 
    bindable, 
    displaybind
    ]
    VARIANT width( void );
    [
    propput, 
    id(0x80010006), 
    bindable, 
    displaybind
    ]
    void height(VARIANT Param1 );
    [
    propget, 
    id(0x80010006), 
    bindable, 
    displaybind
    ]
    VARIANT height( void );
    [
    propput, 
    id(0x800113CE), 
    bindable, 
    displaybind
    ]
    void styleFloat(BSTR Param1 );
    [
    propget, 
    id(0x800113CE), 
    bindable, 
    displaybind
    ]
    BSTR styleFloat( void );
    [
    propput, 
    id(0x80011398), 
    bindable, 
    displaybind
    ]
    void clear(BSTR Param1 );
    [
    propget, 
    id(0x80011398), 
    bindable, 
    displaybind
    ]
    BSTR clear( void );
    [
    propput, 
    id(0x800113CF), 
    bindable, 
    displaybind
    ]
    void display(BSTR Param1 );
    [
    propget, 
    id(0x800113CF), 
    bindable, 
    displaybind
    ]
    BSTR display( void );
    [
    propput, 
    id(0x800113D8), 
    bindable, 
    displaybind
    ]
    void visibility(BSTR Param1 );
    [
    propget, 
    id(0x800113D8), 
    bindable, 
    displaybind
    ]
    BSTR visibility( void );
    [
    propput, 
    id(0x800113D0), 
    bindable, 
    displaybind
    ]
    void listStyleType(BSTR Param1 );
    [
    propget, 
    id(0x800113D0), 
    bindable, 
    displaybind
    ]
    BSTR listStyleType( void );
    [
    propput, 
    id(0x800113D1), 
    bindable, 
    displaybind
    ]
    void listStylePosition(BSTR Param1 );
    [
    propget, 
    id(0x800113D1), 
    bindable, 
    displaybind
    ]
    BSTR listStylePosition( void );
    [
    propput, 
    id(0x800113D2), 
    bindable, 
    displaybind
    ]
    void listStyleImage(BSTR Param1 );
    [
    propget, 
    id(0x800113D2), 
    bindable, 
    displaybind
    ]
    BSTR listStyleImage( void );
    [
    propput, 
    id(0x800113D3), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    void listStyle(BSTR Param1 );
    [
    propget, 
    id(0x800113D3), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    BSTR listStyle( void );
    [
    propput, 
    id(0x800113D4), 
    bindable, 
    displaybind
    ]
    void whiteSpace(BSTR Param1 );
    [
    propget, 
    id(0x800113D4), 
    bindable, 
    displaybind
    ]
    BSTR whiteSpace( void );
    [
    propput, 
    id(0x80010004), 
    bindable, 
    displaybind
    ]
    void top(VARIANT Param1 );
    [
    propget, 
    id(0x80010004), 
    bindable, 
    displaybind
    ]
    VARIANT top( void );
    [
    propput, 
    id(0x80010003), 
    bindable, 
    displaybind
    ]
    void left(VARIANT Param1 );
    [
    propget, 
    id(0x80010003), 
    bindable, 
    displaybind
    ]
    VARIANT left( void );
    [
    propput, 
    id(0x800113E3), 
    bindable, 
    displaybind
    ]
    void zIndex(VARIANT Param1 );
    [
    propget, 
    id(0x800113E3), 
    bindable, 
    displaybind
    ]
    VARIANT zIndex( void );
    [
    propput, 
    id(0x80011392), 
    bindable, 
    displaybind
    ]
    void overflow(BSTR Param1 );
    [
    propget, 
    id(0x80011392), 
    bindable, 
    displaybind
    ]
    BSTR overflow( void );
    [
    propput, 
    id(0x800113D5), 
    bindable, 
    displaybind
    ]
    void pageBreakBefore(BSTR Param1 );
    [
    propget, 
    id(0x800113D5), 
    bindable, 
    displaybind
    ]
    BSTR pageBreakBefore( void );
    [
    propput, 
    id(0x800113D6), 
    bindable, 
    displaybind
    ]
    void pageBreakAfter(BSTR Param1 );
    [
    propget, 
    id(0x800113D6), 
    bindable, 
    displaybind
    ]
    BSTR pageBreakAfter( void );
    [
    propput, 
    id(0x800113EB), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    void cssText(BSTR Param1 );
    [
    propget, 
    id(0x800113EB), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    BSTR cssText( void );
    [
    propput, 
    id(0x800113EE), 
    bindable, 
    displaybind
    ]
    void cursor(BSTR Param1 );
    [
    propget, 
    id(0x800113EE), 
    bindable, 
    displaybind
    ]
    BSTR cursor( void );
    [
    propput, 
    id(0x800113E4), 
    bindable, 
    displaybind
    ]
    void clip(BSTR Param1 );
    [
    propget, 
    id(0x800113E4), 
    bindable, 
    displaybind
    ]
    BSTR clip( void );
    [
    propput, 
    id(0x800113DA), 
    bindable, 
    displaybind
    ]
    void filter(BSTR Param1 );
    [
    propget, 
    id(0x800113DA), 
    bindable, 
    displaybind
    ]
    BSTR filter( void );
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800113EA), 
    bindable, 
    displaybind
    ]
    void tableLayout(BSTR Param1 );
    [
    propget, 
    id(0x800113EA), 
    bindable, 
    displaybind
    ]
    BSTR tableLayout( void );
    [
    propput, 
    id(0x800113DC), 
    bindable, 
    displaybind
    ]
    void borderCollapse(BSTR Param1 );
    [
    propget, 
    id(0x800113DC), 
    bindable, 
    displaybind
    ]
    BSTR borderCollapse( void );
    [
    propput, 
    id(0x800113FF), 
    bindable, 
    displaybind
    ]
    void direction(BSTR Param1 );
    [
    propget, 
    id(0x800113FF), 
    bindable, 
    displaybind
    ]
    BSTR direction( void );
    [
    propput, 
    id(0x800113FB), 
    bindable, 
    displaybind
    ]
    void behavior(BSTR Param1 );
    [
    propget, 
    id(0x800113FB), 
    bindable, 
    displaybind
    ]
    BSTR behavior( void );
    [
    propput, 
    id(0x800113E2), 
    bindable, 
    displaybind
    ]
    void position(BSTR Param1 );
    [
    propget, 
    id(0x800113E2), 
    bindable, 
    displaybind
    ]
    BSTR position( void );
    [
    propput, 
    id(0x800113FE), 
    bindable, 
    displaybind
    ]
    void unicodeBidi(BSTR Param1 );
    [
    propget, 
    id(0x800113FE), 
    bindable, 
    displaybind
    ]
    BSTR unicodeBidi( void );
    [
    propput, 
    id(0x8001004E), 
    bindable, 
    displaybind
    ]
    void bottom(VARIANT Param1 );
    [
    propget, 
    id(0x8001004E), 
    bindable, 
    displaybind
    ]
    VARIANT bottom( void );
    [
    propput, 
    id(0x8001004D), 
    bindable, 
    displaybind
    ]
    void right(VARIANT Param1 );
    [
    propget, 
    id(0x8001004D), 
    bindable, 
    displaybind
    ]
    VARIANT right( void );
    [
    propput, 
    id(0x80010FA9), 
    bindable, 
    displaybind, 
    hidden
    ]
    void pixelBottom(long Param1 );
    [
    propget, 
    id(0x80010FA9), 
    bindable, 
    displaybind, 
    hidden
    ]
    long pixelBottom( void );
    [
    propput, 
    id(0x80010FAA), 
    bindable, 
    displaybind, 
    hidden
    ]
    void pixelRight(long Param1 );
    [
    propget, 
    id(0x80010FAA), 
    bindable, 
    displaybind, 
    hidden
    ]
    long pixelRight( void );
    [
    propput, 
    id(0x80010FAB), 
    bindable, 
    displaybind
    ]
    void posBottom(float Param1 );
    [
    propget, 
    id(0x80010FAB), 
    bindable, 
    displaybind
    ]
    float posBottom( void );
    [
    propput, 
    id(0x80010FAC), 
    bindable, 
    displaybind
    ]
    void posRight(float Param1 );
    [
    propget, 
    id(0x80010FAC), 
    bindable, 
    displaybind
    ]
    float posRight( void );
    [
    propput, 
    id(0x80011400), 
    bindable, 
    displaybind
    ]
    void imeMode(BSTR Param1 );
    [
    propget, 
    id(0x80011400), 
    bindable, 
    displaybind
    ]
    BSTR imeMode( void );
    [
    propput, 
    id(0x80011401), 
    bindable, 
    displaybind
    ]
    void rubyAlign(BSTR Param1 );
    [
    propget, 
    id(0x80011401), 
    bindable, 
    displaybind
    ]
    BSTR rubyAlign( void );
    [
    propput, 
    id(0x80011402), 
    bindable, 
    displaybind
    ]
    void rubyPosition(BSTR Param1 );
    [
    propget, 
    id(0x80011402), 
    bindable, 
    displaybind
    ]
    BSTR rubyPosition( void );
    [
    propput, 
    id(0x80011403), 
    bindable, 
    displaybind
    ]
    void rubyOverhang(BSTR Param1 );
    [
    propget, 
    id(0x80011403), 
    bindable, 
    displaybind
    ]
    BSTR rubyOverhang( void );
    [
    propput, 
    id(0x80011407), 
    bindable, 
    displaybind
    ]
    void layoutGridChar(VARIANT Param1 );
    [
    propget, 
    id(0x80011407), 
    bindable, 
    displaybind
    ]
    VARIANT layoutGridChar( void );
    [
    propput, 
    id(0x80011408), 
    bindable, 
    displaybind
    ]
    void layoutGridLine(VARIANT Param1 );
    [
    propget, 
    id(0x80011408), 
    bindable, 
    displaybind
    ]
    VARIANT layoutGridLine( void );
    [
    propput, 
    id(0x80011409), 
    bindable, 
    displaybind
    ]
    void layoutGridMode(BSTR Param1 );
    [
    propget, 
    id(0x80011409), 
    bindable, 
    displaybind
    ]
    BSTR layoutGridMode( void );
    [
    propput, 
    id(0x8001140A), 
    bindable, 
    displaybind
    ]
    void layoutGridType(BSTR Param1 );
    [
    propget, 
    id(0x8001140A), 
    bindable, 
    displaybind
    ]
    BSTR layoutGridType( void );
    [
    propput, 
    id(0x8001140B), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    void layoutGrid(BSTR Param1 );
    [
    propget, 
    id(0x8001140B), 
    bindable, 
    displaybind, 
    nonbrowsable
    ]
    BSTR layoutGrid( void );
    [
    propput, 
    id(0x8001140C), 
    bindable, 
    displaybind
    ]
    void textAutospace(BSTR Param1 );
    [
    propget, 
    id(0x8001140C), 
    bindable, 
    displaybind
    ]
    BSTR textAutospace( void );
    [
    propput, 
    id(0x8001140E), 
    bindable, 
    displaybind
    ]
    void wordBreak(BSTR Param1 );
    [
    propget, 
    id(0x8001140E), 
    bindable, 
    displaybind
    ]
    BSTR wordBreak( void );
    [
    propput, 
    id(0x8001140D), 
    bindable, 
    displaybind
    ]
    void lineBreak(BSTR Param1 );
    [
    propget, 
    id(0x8001140D), 
    bindable, 
    displaybind
    ]
    BSTR lineBreak( void );
    [
    propput, 
    id(0x8001140F), 
    bindable, 
    displaybind
    ]
    void textJustify(BSTR Param1 );
    [
    propget, 
    id(0x8001140F), 
    bindable, 
    displaybind
    ]
    BSTR textJustify( void );
    [
    propput, 
    id(0x80011410), 
    bindable, 
    displaybind
    ]
    void textJustifyTrim(BSTR Param1 );
    [
    propget, 
    id(0x80011410), 
    bindable, 
    displaybind
    ]
    BSTR textJustifyTrim( void );
    [
    propput, 
    id(0x80011411), 
    bindable, 
    displaybind
    ]
    void textKashida(VARIANT Param1 );
    [
    propget, 
    id(0x80011411), 
    bindable, 
    displaybind
    ]
    VARIANT textKashida( void );
    [
    propput, 
    id(0x80011413), 
    bindable, 
    displaybind
    ]
    void overflowX(BSTR Param1 );
    [
    propget, 
    id(0x80011413), 
    bindable, 
    displaybind
    ]
    BSTR overflowX( void );
    [
    propput, 
    id(0x80011414), 
    bindable, 
    displaybind
    ]
    void overflowY(BSTR Param1 );
    [
    propget, 
    id(0x80011414), 
    bindable, 
    displaybind
    ]
    BSTR overflowY( void );
    [
    propput, 
    id(0x8001141B), 
    bindable, 
    displaybind
    ]
    void accelerator(BSTR Param1 );
    [
    propget, 
    id(0x8001141B), 
    bindable, 
    displaybind
    ]
    BSTR accelerator( void );
    [
    propput, 
    id(0x80011423), 
    bindable, 
    displaybind
    ]
    void layoutFlow(BSTR Param1 );
    [
    propget, 
    id(0x80011423), 
    bindable, 
    displaybind
    ]
    BSTR layoutFlow( void );
    [
    propput, 
    id(0x80011421), 
    bindable, 
    displaybind
    ]
    void zoom(VARIANT Param1 );
    [
    propget, 
    id(0x80011421), 
    bindable, 
    displaybind
    ]
    VARIANT zoom( void );
    [
    propput, 
    id(0x80011426), 
    bindable, 
    displaybind
    ]
    void wordWrap(BSTR Param1 );
    [
    propget, 
    id(0x80011426), 
    bindable, 
    displaybind
    ]
    BSTR wordWrap( void );
    [
    propput, 
    id(0x80011427), 
    bindable, 
    displaybind
    ]
    void textUnderlinePosition(BSTR Param1 );
    [
    propget, 
    id(0x80011427), 
    bindable, 
    displaybind
    ]
    BSTR textUnderlinePosition( void );
    [
    propput, 
    id(0x8001143C), 
    bindable, 
    displaybind
    ]
    void scrollbarBaseColor(VARIANT Param1 );
    [
    propget, 
    id(0x8001143C), 
    bindable, 
    displaybind
    ]
    VARIANT scrollbarBaseColor( void );
    [
    propput, 
    id(0x8001143D), 
    bindable, 
    displaybind
    ]
    void scrollbarFaceColor(VARIANT Param1 );
    [
    propget, 
    id(0x8001143D), 
    bindable, 
    displaybind
    ]
    VARIANT scrollbarFaceColor( void );
    [
    propput, 
    id(0x8001143E), 
    bindable, 
    displaybind
    ]
    void scrollbar3dLightColor(VARIANT Param1 );
    [
    propget, 
    id(0x8001143E), 
    bindable, 
    displaybind
    ]
    VARIANT scrollbar3dLightColor( void );
    [
    propput, 
    id(0x8001143F), 
    bindable, 
    displaybind
    ]
    void scrollbarShadowColor(VARIANT Param1 );
    [
    propget, 
    id(0x8001143F), 
    bindable, 
    displaybind
    ]
    VARIANT scrollbarShadowColor( void );
    [
    propput, 
    id(0x80011440), 
    bindable, 
    displaybind
    ]
    void scrollbarHighlightColor(VARIANT Param1 );
    [
    propget, 
    id(0x80011440), 
    bindable, 
    displaybind
    ]
    VARIANT scrollbarHighlightColor( void );
    [
    propput, 
    id(0x80011441), 
    bindable, 
    displaybind
    ]
    void scrollbarDarkShadowColor(VARIANT Param1 );
    [
    propget, 
    id(0x80011441), 
    bindable, 
    displaybind
    ]
    VARIANT scrollbarDarkShadowColor( void );
    [
    propput, 
    id(0x80011442), 
    bindable, 
    displaybind
    ]
    void scrollbarArrowColor(VARIANT Param1 );
    [
    propget, 
    id(0x80011442), 
    bindable, 
    displaybind
    ]
    VARIANT scrollbarArrowColor( void );
    [
    propput, 
    id(0x8001144C), 
    bindable, 
    displaybind
    ]
    void scrollbarTrackColor(VARIANT Param1 );
    [
    propget, 
    id(0x8001144C), 
    bindable, 
    displaybind
    ]
    VARIANT scrollbarTrackColor( void );
    [
    propput, 
    id(0x80011448), 
    bindable, 
    displaybind
    ]
    void writingMode(BSTR Param1 );
    [
    propget, 
    id(0x80011448), 
    bindable, 
    displaybind
    ]
    BSTR writingMode( void );
    [
    propput, 
    id(0x80011453), 
    bindable, 
    displaybind
    ]
    void textAlignLast(BSTR Param1 );
    [
    propget, 
    id(0x80011453), 
    bindable, 
    displaybind
    ]
    BSTR textAlignLast( void );
    [
    propput, 
    id(0x80011454), 
    bindable, 
    displaybind
    ]
    void textKashidaSpace(VARIANT Param1 );
    [
    propget, 
    id(0x80011454), 
    bindable, 
    displaybind
    ]
    VARIANT textKashidaSpace( void );
    [
    propput, 
    id(0x80011459), 
    bindable, 
    displaybind
    ]
    void textOverflow(BSTR Param1 );
    [
    propget, 
    id(0x80011459), 
    bindable, 
    displaybind
    ]
    BSTR textOverflow( void );
    [
    propput, 
    id(0x8001145B), 
    bindable, 
    displaybind
    ]
    void minHeight(VARIANT Param1 );
    [
    propget, 
    id(0x8001145B), 
    bindable, 
    displaybind
    ]
    VARIANT minHeight( void );
  };

  [
    uuid(3050F3D0-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLRuleStyle
  {
    [default] dispinterface DispHTMLRuleStyle;
    interface IHTMLRuleStyle;
    interface IHTMLRuleStyle2;
    interface IHTMLRuleStyle3;
    interface IHTMLRuleStyle4;
  };

  
  typedef enum tag_styleTextLineThroughStyle
  {
    styleTextLineThroughStyleUndefined = 0, 
    styleTextLineThroughStyleSingle = 1, 
    styleTextLineThroughStyleDouble = 2, 
    styleTextLineThroughStyle_Max = 2147483647
  } _styleTextLineThroughStyle;

  
  typedef enum tag_styleTextUnderlineStyle
  {
    styleTextUnderlineStyleUndefined = 0, 
    styleTextUnderlineStyleSingle = 1, 
    styleTextUnderlineStyleDouble = 2, 
    styleTextUnderlineStyleWords = 3, 
    styleTextUnderlineStyleDotted = 4, 
    styleTextUnderlineStyleThick = 5, 
    styleTextUnderlineStyleDash = 6, 
    styleTextUnderlineStyleDotDash = 7, 
    styleTextUnderlineStyleDotDotDash = 8, 
    styleTextUnderlineStyleWave = 9, 
    styleTextUnderlineStyleSingleAccounting = 10, 
    styleTextUnderlineStyleDoubleAccounting = 11, 
    styleTextUnderlineStyleThickDash = 12, 
    styleTextUnderlineStyle_Max = 2147483647
  } _styleTextUnderlineStyle;

  
  typedef enum tag_styleTextEffect
  {
    styleTextEffectNone = 0, 
    styleTextEffectEmboss = 1, 
    styleTextEffectEngrave = 2, 
    styleTextEffectOutline = 3, 
    styleTextEffect_Max = 2147483647
  } _styleTextEffect;

  
  typedef enum tag_styleDefaultTextSelection
  {
    styleDefaultTextSelectionFalse = 0, 
    styleDefaultTextSelectionTrue = 1, 
    styleDefaultTextSelection_Max = 2147483647
  } _styleDefaultTextSelection;

  
  typedef enum tag_styleTextDecoration
  {
    styleTextDecorationNone = 0, 
    styleTextDecorationUnderline = 1, 
    styleTextDecorationOverline = 2, 
    styleTextDecorationLineThrough = 3, 
    styleTextDecorationBlink = 4, 
    styleTextDecoration_Max = 2147483647
  } _styleTextDecoration;

  [
    uuid(3050F6AE-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLRenderStyle: IDispatch
  {
    [
    propput, 
    id(0x8001142E), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textLineThroughStyle([in] BSTR p );
    [
    propget, 
    id(0x8001142E), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textLineThroughStyle([out, retval] BSTR * p );
    [
    propput, 
    id(0x8001142F), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textUnderlineStyle([in] BSTR p );
    [
    propget, 
    id(0x8001142F), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textUnderlineStyle([out, retval] BSTR * p );
    [
    propput, 
    id(0x80011430), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textEffect([in] BSTR p );
    [
    propget, 
    id(0x80011430), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textEffect([out, retval] BSTR * p );
    [
    propput, 
    id(0x80011446), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textColor([in] VARIANT p );
    [
    propget, 
    id(0x80011446), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textColor([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011431), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textBackgroundColor([in] VARIANT p );
    [
    propget, 
    id(0x80011431), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textBackgroundColor([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011445), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textDecorationColor([in] VARIANT p );
    [
    propget, 
    id(0x80011445), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textDecorationColor([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011432), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall renderingPriority([in] long p );
    [
    propget, 
    id(0x80011432), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall renderingPriority([out, retval] long * p );
    [
    propput, 
    id(0x80011444), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall defaultTextSelection([in] BSTR p );
    [
    propget, 
    id(0x80011444), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall defaultTextSelection([out, retval] BSTR * p );
    [
    propput, 
    id(0x80011447), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textDecoration([in] BSTR p );
    [
    propget, 
    id(0x80011447), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textDecoration([out, retval] BSTR * p );
  };

  [
    uuid(3050F58B-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLRenderStyle
  {
    properties:
    methods:
    [
    propput, 
    id(0x8001142E), 
    bindable, 
    displaybind
    ]
    void textLineThroughStyle(BSTR Param1 );
    [
    propget, 
    id(0x8001142E), 
    bindable, 
    displaybind
    ]
    BSTR textLineThroughStyle( void );
    [
    propput, 
    id(0x8001142F), 
    bindable, 
    displaybind
    ]
    void textUnderlineStyle(BSTR Param1 );
    [
    propget, 
    id(0x8001142F), 
    bindable, 
    displaybind
    ]
    BSTR textUnderlineStyle( void );
    [
    propput, 
    id(0x80011430), 
    bindable, 
    displaybind
    ]
    void textEffect(BSTR Param1 );
    [
    propget, 
    id(0x80011430), 
    bindable, 
    displaybind
    ]
    BSTR textEffect( void );
    [
    propput, 
    id(0x80011446), 
    bindable, 
    displaybind
    ]
    void textColor(VARIANT Param1 );
    [
    propget, 
    id(0x80011446), 
    bindable, 
    displaybind
    ]
    VARIANT textColor( void );
    [
    propput, 
    id(0x80011431), 
    bindable, 
    displaybind
    ]
    void textBackgroundColor(VARIANT Param1 );
    [
    propget, 
    id(0x80011431), 
    bindable, 
    displaybind
    ]
    VARIANT textBackgroundColor( void );
    [
    propput, 
    id(0x80011445), 
    bindable, 
    displaybind
    ]
    void textDecorationColor(VARIANT Param1 );
    [
    propget, 
    id(0x80011445), 
    bindable, 
    displaybind
    ]
    VARIANT textDecorationColor( void );
    [
    propput, 
    id(0x80011432), 
    bindable, 
    displaybind
    ]
    void renderingPriority(long Param1 );
    [
    propget, 
    id(0x80011432), 
    bindable, 
    displaybind
    ]
    long renderingPriority( void );
    [
    propput, 
    id(0x80011444), 
    bindable, 
    displaybind
    ]
    void defaultTextSelection(BSTR Param1 );
    [
    propget, 
    id(0x80011444), 
    bindable, 
    displaybind
    ]
    BSTR defaultTextSelection( void );
    [
    propput, 
    id(0x80011447), 
    bindable, 
    displaybind
    ]
    void textDecoration(BSTR Param1 );
    [
    propget, 
    id(0x80011447), 
    bindable, 
    displaybind
    ]
    BSTR textDecoration( void );
  };

  [
    uuid(3050F6AA-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLRenderStyle
  {
    [default] dispinterface DispHTMLRenderStyle;
    interface IHTMLRenderStyle;
  };

  
  typedef enum tag_textDecoration
  {
    textDecorationNone = 0, 
    textDecorationUnderline = 1, 
    textDecorationOverline = 2, 
    textDecorationLineThrough = 3, 
    textDecorationBlink = 4, 
    textDecoration_Max = 2147483647
  } _textDecoration;

  [
    uuid(3050F3DB-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLCurrentStyle: IDispatch
  {
    [
    propget, 
    id(0x800113E2), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall position([out, retval] BSTR * p );
    [
    propget, 
    id(0x800113CE), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall styleFloat([out, retval] BSTR * p );
    [
    propget, 
    id(0x8001138A), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall color([out, retval] VARIANT * p );
    [
    propget, 
    id(0xFFFFFE0B), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall backgroundColor([out, retval] VARIANT * p );
    [
    propget, 
    id(0x8001139A), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall fontFamily([out, retval] BSTR * p );
    [
    propget, 
    id(0x800113A0), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall fontStyle([out, retval] BSTR * p );
    [
    propget, 
    id(0x800113A1), 
    bindable, 
    displaybind, 
    hidden
    ]
    HRESULT _stdcall fontVariant([out, retval] BSTR * p );
    [
    propget, 
    id(0x800113A3), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall fontWeight([out, retval] VARIANT * p );
    [
    propget, 
    id(0x8001139B), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall fontSize([out, retval] VARIANT * p );
    [
    propget, 
    id(0x80011389), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall backgroundImage([out, retval] BSTR * p );
    [
    propget, 
    id(0x800113A9), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall backgroundPositionX([out, retval] VARIANT * p );
    [
    propget, 
    id(0x800113AA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall backgroundPositionY([out, retval] VARIANT * p );
    [
    propget, 
    id(0x800113B4), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall backgroundRepeat([out, retval] BSTR * p );
    [
    propget, 
    id(0x800113C2), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderLeftColor([out, retval] VARIANT * p );
    [
    propget, 
    id(0x800113BF), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderTopColor([out, retval] VARIANT * p );
    [
    propget, 
    id(0x800113C0), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderRightColor([out, retval] VARIANT * p );
    [
    propget, 
    id(0x800113C1), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderBottomColor([out, retval] VARIANT * p );
    [
    propget, 
    id(0x800113C9), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderTopStyle([out, retval] BSTR * p );
    [
    propget, 
    id(0x800113CA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderRightStyle([out, retval] BSTR * p );
    [
    propget, 
    id(0x800113CB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderBottomStyle([out, retval] BSTR * p );
    [
    propget, 
    id(0x800113CC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderLeftStyle([out, retval] BSTR * p );
    [
    propget, 
    id(0x800113C4), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderTopWidth([out, retval] VARIANT * p );
    [
    propget, 
    id(0x800113C5), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderRightWidth([out, retval] VARIANT * p );
    [
    propget, 
    id(0x800113C6), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderBottomWidth([out, retval] VARIANT * p );
    [
    propget, 
    id(0x800113C7), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderLeftWidth([out, retval] VARIANT * p );
    [
    propget, 
    id(0x80010003), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall left([out, retval] VARIANT * p );
    [
    propget, 
    id(0x80010004), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall top([out, retval] VARIANT * p );
    [
    propget, 
    id(0x80010005), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall width([out, retval] VARIANT * p );
    [
    propget, 
    id(0x80010006), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall height([out, retval] VARIANT * p );
    [
    propget, 
    id(0x80011397), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall paddingLeft([out, retval] VARIANT * p );
    [
    propget, 
    id(0x80011394), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall paddingTop([out, retval] VARIANT * p );
    [
    propget, 
    id(0x80011395), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall paddingRight([out, retval] VARIANT * p );
    [
    propget, 
    id(0x80011396), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall paddingBottom([out, retval] VARIANT * p );
    [
    propget, 
    id(0x80010048), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textAlign([out, retval] BSTR * p );
    [
    propget, 
    id(0x800113AB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textDecoration([out, retval] BSTR * p );
    [
    propget, 
    id(0x800113CF), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall display([out, retval] BSTR * p );
    [
    propget, 
    id(0x800113D8), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall visibility([out, retval] BSTR * p );
    [
    propget, 
    id(0x800113E3), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall zIndex([out, retval] VARIANT * p );
    [
    propget, 
    id(0x80011390), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall letterSpacing([out, retval] VARIANT * p );
    [
    propget, 
    id(0x8001138E), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall lineHeight([out, retval] VARIANT * p );
    [
    propget, 
    id(0x8001138F), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textIndent([out, retval] VARIANT * p );
    [
    propget, 
    id(0x800113B8), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall verticalAlign([out, retval] VARIANT * p );
    [
    propget, 
    id(0x800113B5), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall backgroundAttachment([out, retval] BSTR * p );
    [
    propget, 
    id(0x800113AD), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall marginTop([out, retval] VARIANT * p );
    [
    propget, 
    id(0x800113AE), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall marginRight([out, retval] VARIANT * p );
    [
    propget, 
    id(0x800113AF), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall marginBottom([out, retval] VARIANT * p );
    [
    propget, 
    id(0x800113B0), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall marginLeft([out, retval] VARIANT * p );
    [
    propget, 
    id(0x80011398), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall clear([out, retval] BSTR * p );
    [
    propget, 
    id(0x800113D0), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall listStyleType([out, retval] BSTR * p );
    [
    propget, 
    id(0x800113D1), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall listStylePosition([out, retval] BSTR * p );
    [
    propget, 
    id(0x800113D2), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall listStyleImage([out, retval] BSTR * p );
    [
    propget, 
    id(0x800113E5), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall clipTop([out, retval] VARIANT * p );
    [
    propget, 
    id(0x800113E6), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall clipRight([out, retval] VARIANT * p );
    [
    propget, 
    id(0x800113E7), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall clipBottom([out, retval] VARIANT * p );
    [
    propget, 
    id(0x800113E8), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall clipLeft([out, retval] VARIANT * p );
    [
    propget, 
    id(0x80011392), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall overflow([out, retval] BSTR * p );
    [
    propget, 
    id(0x800113D5), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall pageBreakBefore([out, retval] BSTR * p );
    [
    propget, 
    id(0x800113D6), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall pageBreakAfter([out, retval] BSTR * p );
    [
    propget, 
    id(0x800113EE), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall cursor([out, retval] BSTR * p );
    [
    propget, 
    id(0x800113EA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall tableLayout([out, retval] BSTR * p );
    [
    propget, 
    id(0x800113DC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderCollapse([out, retval] BSTR * p );
    [
    propget, 
    id(0x800113FF), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall direction([out, retval] BSTR * p );
    [
    propget, 
    id(0x800113FB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall behavior([out, retval] BSTR * p );
    [
    id(0x800101F6)
    ]
    HRESULT _stdcall getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags, [out, retval] VARIANT * AttributeValue );
    [
    propget, 
    id(0x800113FE), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall unicodeBidi([out, retval] BSTR * p );
    [
    propget, 
    id(0x8001004D), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall right([out, retval] VARIANT * p );
    [
    propget, 
    id(0x8001004E), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall bottom([out, retval] VARIANT * p );
    [
    propget, 
    id(0x80011400), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall imeMode([out, retval] BSTR * p );
    [
    propget, 
    id(0x80011401), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall rubyAlign([out, retval] BSTR * p );
    [
    propget, 
    id(0x80011402), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall rubyPosition([out, retval] BSTR * p );
    [
    propget, 
    id(0x80011403), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall rubyOverhang([out, retval] BSTR * p );
    [
    propget, 
    id(0x8001140C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textAutospace([out, retval] BSTR * p );
    [
    propget, 
    id(0x8001140D), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall lineBreak([out, retval] BSTR * p );
    [
    propget, 
    id(0x8001140E), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall wordBreak([out, retval] BSTR * p );
    [
    propget, 
    id(0x8001140F), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textJustify([out, retval] BSTR * p );
    [
    propget, 
    id(0x80011410), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textJustifyTrim([out, retval] BSTR * p );
    [
    propget, 
    id(0x80011411), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textKashida([out, retval] VARIANT * p );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall blockDirection([out, retval] BSTR * p );
    [
    propget, 
    id(0x80011407), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall layoutGridChar([out, retval] VARIANT * p );
    [
    propget, 
    id(0x80011408), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall layoutGridLine([out, retval] VARIANT * p );
    [
    propget, 
    id(0x80011409), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall layoutGridMode([out, retval] BSTR * p );
    [
    propget, 
    id(0x8001140A), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall layoutGridType([out, retval] BSTR * p );
    [
    propget, 
    id(0x800113C8), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderStyle([out, retval] BSTR * p );
    [
    propget, 
    id(0x800113BE), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderColor([out, retval] BSTR * p );
    [
    propget, 
    id(0x800113C3), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall borderWidth([out, retval] BSTR * p );
    [
    propget, 
    id(0x80011393), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall padding([out, retval] BSTR * p );
    [
    propget, 
    id(0x800113AC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall margin([out, retval] BSTR * p );
    [
    propget, 
    id(0x8001141B), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall accelerator([out, retval] BSTR * p );
    [
    propget, 
    id(0x80011413), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall overflowX([out, retval] BSTR * p );
    [
    propget, 
    id(0x80011414), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall overflowY([out, retval] BSTR * p );
    [
    propget, 
    id(0x8001138C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textTransform([out, retval] BSTR * p );
  };

  [
    uuid(3050F658-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLCurrentStyle2: IDispatch
  {
    [
    propget, 
    id(0x80011423), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall layoutFlow([out, retval] BSTR * p );
    [
    propget, 
    id(0x80011426), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall wordWrap([out, retval] BSTR * p );
    [
    propget, 
    id(0x80011427), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textUnderlinePosition([out, retval] BSTR * p );
    [
    propget, 
    id(0x80011428), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall hasLayout([out, retval] VARIANT_BOOL * p );
    [
    propget, 
    id(0x8001143C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollbarBaseColor([out, retval] VARIANT * p );
    [
    propget, 
    id(0x8001143D), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollbarFaceColor([out, retval] VARIANT * p );
    [
    propget, 
    id(0x8001143E), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollbar3dLightColor([out, retval] VARIANT * p );
    [
    propget, 
    id(0x8001143F), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollbarShadowColor([out, retval] VARIANT * p );
    [
    propget, 
    id(0x80011440), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollbarHighlightColor([out, retval] VARIANT * p );
    [
    propget, 
    id(0x80011441), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollbarDarkShadowColor([out, retval] VARIANT * p );
    [
    propget, 
    id(0x80011442), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollbarArrowColor([out, retval] VARIANT * p );
    [
    propget, 
    id(0x8001144C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollbarTrackColor([out, retval] VARIANT * p );
    [
    propget, 
    id(0x80011448), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall writingMode([out, retval] BSTR * p );
    [
    propget, 
    id(0x80011421), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall zoom([out, retval] VARIANT * p );
    [
    propget, 
    id(0x800113DA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall filter([out, retval] BSTR * p );
    [
    propget, 
    id(0x80011453), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textAlignLast([out, retval] BSTR * p );
    [
    propget, 
    id(0x80011454), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textKashidaSpace([out, retval] VARIANT * p );
    [
    propget, 
    id(0x80011458), 
    restricted, 
    bindable, 
    displaybind, 
    hidden, 
    nonbrowsable
    ]
    HRESULT _stdcall isBlock([out, retval] VARIANT_BOOL * p );
  };

  [
    uuid(3050F818-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLCurrentStyle3: IDispatch
  {
    [
    propget, 
    id(0x80011459), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall textOverflow([out, retval] BSTR * p );
    [
    propget, 
    id(0x8001145B), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall minHeight([out, retval] VARIANT * p );
    [
    propget, 
    id(0x800113B7), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall wordSpacing([out, retval] VARIANT * p );
    [
    propget, 
    id(0x800113D4), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall whiteSpace([out, retval] BSTR * p );
  };

  [
    uuid(3050F557-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLCurrentStyle
  {
    properties:
    methods:
    [
    propget, 
    id(0x800113E2), 
    bindable, 
    displaybind
    ]
    BSTR position( void );
    [
    propget, 
    id(0x800113CE), 
    bindable, 
    displaybind
    ]
    BSTR styleFloat( void );
    [
    propget, 
    id(0x8001138A), 
    bindable, 
    displaybind
    ]
    VARIANT color( void );
    [
    propget, 
    id(0xFFFFFE0B), 
    bindable, 
    displaybind
    ]
    VARIANT backgroundColor( void );
    [
    propget, 
    id(0x8001139A), 
    bindable, 
    displaybind
    ]
    BSTR fontFamily( void );
    [
    propget, 
    id(0x800113A0), 
    bindable, 
    displaybind
    ]
    BSTR fontStyle( void );
    [
    propget, 
    id(0x800113A1), 
    bindable, 
    displaybind, 
    hidden
    ]
    BSTR fontVariant( void );
    [
    propget, 
    id(0x800113A3), 
    bindable, 
    displaybind
    ]
    VARIANT fontWeight( void );
    [
    propget, 
    id(0x8001139B), 
    bindable, 
    displaybind
    ]
    VARIANT fontSize( void );
    [
    propget, 
    id(0x80011389), 
    bindable, 
    displaybind
    ]
    BSTR backgroundImage( void );
    [
    propget, 
    id(0x800113A9), 
    bindable, 
    displaybind
    ]
    VARIANT backgroundPositionX( void );
    [
    propget, 
    id(0x800113AA), 
    bindable, 
    displaybind
    ]
    VARIANT backgroundPositionY( void );
    [
    propget, 
    id(0x800113B4), 
    bindable, 
    displaybind
    ]
    BSTR backgroundRepeat( void );
    [
    propget, 
    id(0x800113C2), 
    bindable, 
    displaybind
    ]
    VARIANT borderLeftColor( void );
    [
    propget, 
    id(0x800113BF), 
    bindable, 
    displaybind
    ]
    VARIANT borderTopColor( void );
    [
    propget, 
    id(0x800113C0), 
    bindable, 
    displaybind
    ]
    VARIANT borderRightColor( void );
    [
    propget, 
    id(0x800113C1), 
    bindable, 
    displaybind
    ]
    VARIANT borderBottomColor( void );
    [
    propget, 
    id(0x800113C9), 
    bindable, 
    displaybind
    ]
    BSTR borderTopStyle( void );
    [
    propget, 
    id(0x800113CA), 
    bindable, 
    displaybind
    ]
    BSTR borderRightStyle( void );
    [
    propget, 
    id(0x800113CB), 
    bindable, 
    displaybind
    ]
    BSTR borderBottomStyle( void );
    [
    propget, 
    id(0x800113CC), 
    bindable, 
    displaybind
    ]
    BSTR borderLeftStyle( void );
    [
    propget, 
    id(0x800113C4), 
    bindable, 
    displaybind
    ]
    VARIANT borderTopWidth( void );
    [
    propget, 
    id(0x800113C5), 
    bindable, 
    displaybind
    ]
    VARIANT borderRightWidth( void );
    [
    propget, 
    id(0x800113C6), 
    bindable, 
    displaybind
    ]
    VARIANT borderBottomWidth( void );
    [
    propget, 
    id(0x800113C7), 
    bindable, 
    displaybind
    ]
    VARIANT borderLeftWidth( void );
    [
    propget, 
    id(0x80010003), 
    bindable, 
    displaybind
    ]
    VARIANT left( void );
    [
    propget, 
    id(0x80010004), 
    bindable, 
    displaybind
    ]
    VARIANT top( void );
    [
    propget, 
    id(0x80010005), 
    bindable, 
    displaybind
    ]
    VARIANT width( void );
    [
    propget, 
    id(0x80010006), 
    bindable, 
    displaybind
    ]
    VARIANT height( void );
    [
    propget, 
    id(0x80011397), 
    bindable, 
    displaybind
    ]
    VARIANT paddingLeft( void );
    [
    propget, 
    id(0x80011394), 
    bindable, 
    displaybind
    ]
    VARIANT paddingTop( void );
    [
    propget, 
    id(0x80011395), 
    bindable, 
    displaybind
    ]
    VARIANT paddingRight( void );
    [
    propget, 
    id(0x80011396), 
    bindable, 
    displaybind
    ]
    VARIANT paddingBottom( void );
    [
    propget, 
    id(0x80010048), 
    bindable, 
    displaybind
    ]
    BSTR textAlign( void );
    [
    propget, 
    id(0x800113AB), 
    bindable, 
    displaybind
    ]
    BSTR textDecoration( void );
    [
    propget, 
    id(0x800113CF), 
    bindable, 
    displaybind
    ]
    BSTR display( void );
    [
    propget, 
    id(0x800113D8), 
    bindable, 
    displaybind
    ]
    BSTR visibility( void );
    [
    propget, 
    id(0x800113E3), 
    bindable, 
    displaybind
    ]
    VARIANT zIndex( void );
    [
    propget, 
    id(0x80011390), 
    bindable, 
    displaybind
    ]
    VARIANT letterSpacing( void );
    [
    propget, 
    id(0x8001138E), 
    bindable, 
    displaybind
    ]
    VARIANT lineHeight( void );
    [
    propget, 
    id(0x8001138F), 
    bindable, 
    displaybind
    ]
    VARIANT textIndent( void );
    [
    propget, 
    id(0x800113B8), 
    bindable, 
    displaybind
    ]
    VARIANT verticalAlign( void );
    [
    propget, 
    id(0x800113B5), 
    bindable, 
    displaybind
    ]
    BSTR backgroundAttachment( void );
    [
    propget, 
    id(0x800113AD), 
    bindable, 
    displaybind
    ]
    VARIANT marginTop( void );
    [
    propget, 
    id(0x800113AE), 
    bindable, 
    displaybind
    ]
    VARIANT marginRight( void );
    [
    propget, 
    id(0x800113AF), 
    bindable, 
    displaybind
    ]
    VARIANT marginBottom( void );
    [
    propget, 
    id(0x800113B0), 
    bindable, 
    displaybind
    ]
    VARIANT marginLeft( void );
    [
    propget, 
    id(0x80011398), 
    bindable, 
    displaybind
    ]
    BSTR clear( void );
    [
    propget, 
    id(0x800113D0), 
    bindable, 
    displaybind
    ]
    BSTR listStyleType( void );
    [
    propget, 
    id(0x800113D1), 
    bindable, 
    displaybind
    ]
    BSTR listStylePosition( void );
    [
    propget, 
    id(0x800113D2), 
    bindable, 
    displaybind
    ]
    BSTR listStyleImage( void );
    [
    propget, 
    id(0x800113E5), 
    bindable, 
    displaybind
    ]
    VARIANT clipTop( void );
    [
    propget, 
    id(0x800113E6), 
    bindable, 
    displaybind
    ]
    VARIANT clipRight( void );
    [
    propget, 
    id(0x800113E7), 
    bindable, 
    displaybind
    ]
    VARIANT clipBottom( void );
    [
    propget, 
    id(0x800113E8), 
    bindable, 
    displaybind
    ]
    VARIANT clipLeft( void );
    [
    propget, 
    id(0x80011392), 
    bindable, 
    displaybind
    ]
    BSTR overflow( void );
    [
    propget, 
    id(0x800113D5), 
    bindable, 
    displaybind
    ]
    BSTR pageBreakBefore( void );
    [
    propget, 
    id(0x800113D6), 
    bindable, 
    displaybind
    ]
    BSTR pageBreakAfter( void );
    [
    propget, 
    id(0x800113EE), 
    bindable, 
    displaybind
    ]
    BSTR cursor( void );
    [
    propget, 
    id(0x800113EA), 
    bindable, 
    displaybind
    ]
    BSTR tableLayout( void );
    [
    propget, 
    id(0x800113DC), 
    bindable, 
    displaybind
    ]
    BSTR borderCollapse( void );
    [
    propget, 
    id(0x800113FF), 
    bindable, 
    displaybind
    ]
    BSTR direction( void );
    [
    propget, 
    id(0x800113FB), 
    bindable, 
    displaybind
    ]
    BSTR behavior( void );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    propget, 
    id(0x800113FE), 
    bindable, 
    displaybind
    ]
    BSTR unicodeBidi( void );
    [
    propget, 
    id(0x8001004D), 
    bindable, 
    displaybind
    ]
    VARIANT right( void );
    [
    propget, 
    id(0x8001004E), 
    bindable, 
    displaybind
    ]
    VARIANT bottom( void );
    [
    propget, 
    id(0x80011400), 
    bindable, 
    displaybind
    ]
    BSTR imeMode( void );
    [
    propget, 
    id(0x80011401), 
    bindable, 
    displaybind
    ]
    BSTR rubyAlign( void );
    [
    propget, 
    id(0x80011402), 
    bindable, 
    displaybind
    ]
    BSTR rubyPosition( void );
    [
    propget, 
    id(0x80011403), 
    bindable, 
    displaybind
    ]
    BSTR rubyOverhang( void );
    [
    propget, 
    id(0x8001140C), 
    bindable, 
    displaybind
    ]
    BSTR textAutospace( void );
    [
    propget, 
    id(0x8001140D), 
    bindable, 
    displaybind
    ]
    BSTR lineBreak( void );
    [
    propget, 
    id(0x8001140E), 
    bindable, 
    displaybind
    ]
    BSTR wordBreak( void );
    [
    propget, 
    id(0x8001140F), 
    bindable, 
    displaybind
    ]
    BSTR textJustify( void );
    [
    propget, 
    id(0x80011410), 
    bindable, 
    displaybind
    ]
    BSTR textJustifyTrim( void );
    [
    propget, 
    id(0x80011411), 
    bindable, 
    displaybind
    ]
    VARIANT textKashida( void );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR blockDirection( void );
    [
    propget, 
    id(0x80011407), 
    bindable, 
    displaybind
    ]
    VARIANT layoutGridChar( void );
    [
    propget, 
    id(0x80011408), 
    bindable, 
    displaybind
    ]
    VARIANT layoutGridLine( void );
    [
    propget, 
    id(0x80011409), 
    bindable, 
    displaybind
    ]
    BSTR layoutGridMode( void );
    [
    propget, 
    id(0x8001140A), 
    bindable, 
    displaybind
    ]
    BSTR layoutGridType( void );
    [
    propget, 
    id(0x800113C8), 
    bindable, 
    displaybind
    ]
    BSTR borderStyle( void );
    [
    propget, 
    id(0x800113BE), 
    bindable, 
    displaybind
    ]
    BSTR borderColor( void );
    [
    propget, 
    id(0x800113C3), 
    bindable, 
    displaybind
    ]
    BSTR borderWidth( void );
    [
    propget, 
    id(0x80011393), 
    bindable, 
    displaybind
    ]
    BSTR padding( void );
    [
    propget, 
    id(0x800113AC), 
    bindable, 
    displaybind
    ]
    BSTR margin( void );
    [
    propget, 
    id(0x8001141B), 
    bindable, 
    displaybind
    ]
    BSTR accelerator( void );
    [
    propget, 
    id(0x80011413), 
    bindable, 
    displaybind
    ]
    BSTR overflowX( void );
    [
    propget, 
    id(0x80011414), 
    bindable, 
    displaybind
    ]
    BSTR overflowY( void );
    [
    propget, 
    id(0x8001138C), 
    bindable, 
    displaybind
    ]
    BSTR textTransform( void );
    [
    propget, 
    id(0x80011423), 
    bindable, 
    displaybind
    ]
    BSTR layoutFlow( void );
    [
    propget, 
    id(0x80011426), 
    bindable, 
    displaybind
    ]
    BSTR wordWrap( void );
    [
    propget, 
    id(0x80011427), 
    bindable, 
    displaybind
    ]
    BSTR textUnderlinePosition( void );
    [
    propget, 
    id(0x80011428), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hasLayout( void );
    [
    propget, 
    id(0x8001143C), 
    bindable, 
    displaybind
    ]
    VARIANT scrollbarBaseColor( void );
    [
    propget, 
    id(0x8001143D), 
    bindable, 
    displaybind
    ]
    VARIANT scrollbarFaceColor( void );
    [
    propget, 
    id(0x8001143E), 
    bindable, 
    displaybind
    ]
    VARIANT scrollbar3dLightColor( void );
    [
    propget, 
    id(0x8001143F), 
    bindable, 
    displaybind
    ]
    VARIANT scrollbarShadowColor( void );
    [
    propget, 
    id(0x80011440), 
    bindable, 
    displaybind
    ]
    VARIANT scrollbarHighlightColor( void );
    [
    propget, 
    id(0x80011441), 
    bindable, 
    displaybind
    ]
    VARIANT scrollbarDarkShadowColor( void );
    [
    propget, 
    id(0x80011442), 
    bindable, 
    displaybind
    ]
    VARIANT scrollbarArrowColor( void );
    [
    propget, 
    id(0x8001144C), 
    bindable, 
    displaybind
    ]
    VARIANT scrollbarTrackColor( void );
    [
    propget, 
    id(0x80011448), 
    bindable, 
    displaybind
    ]
    BSTR writingMode( void );
    [
    propget, 
    id(0x80011421), 
    bindable, 
    displaybind
    ]
    VARIANT zoom( void );
    [
    propget, 
    id(0x800113DA), 
    bindable, 
    displaybind
    ]
    BSTR filter( void );
    [
    propget, 
    id(0x80011453), 
    bindable, 
    displaybind
    ]
    BSTR textAlignLast( void );
    [
    propget, 
    id(0x80011454), 
    bindable, 
    displaybind
    ]
    VARIANT textKashidaSpace( void );
    [
    propget, 
    id(0x80011458), 
    restricted, 
    bindable, 
    displaybind, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL isBlock( void );
    [
    propget, 
    id(0x80011459), 
    bindable, 
    displaybind
    ]
    BSTR textOverflow( void );
    [
    propget, 
    id(0x8001145B), 
    bindable, 
    displaybind
    ]
    VARIANT minHeight( void );
    [
    propget, 
    id(0x800113B7), 
    bindable, 
    displaybind
    ]
    VARIANT wordSpacing( void );
    [
    propget, 
    id(0x800113D4), 
    bindable, 
    displaybind
    ]
    BSTR whiteSpace( void );
  };

  [
    uuid(3050F3DC-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLCurrentStyle
  {
    [default] dispinterface DispHTMLCurrentStyle;
    interface IHTMLCurrentStyle;
    interface IHTMLCurrentStyle2;
    interface IHTMLCurrentStyle3;
  };

  [
    uuid(3050F4A3-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLRect: IDispatch
  {
    [
    propput, 
    id(0x000003E9)
    ]
    HRESULT _stdcall left([in] long p );
    [
    propget, 
    id(0x000003E9)
    ]
    HRESULT _stdcall left([out, retval] long * p );
    [
    propput, 
    id(0x000003EA)
    ]
    HRESULT _stdcall top([in] long p );
    [
    propget, 
    id(0x000003EA)
    ]
    HRESULT _stdcall top([out, retval] long * p );
    [
    propput, 
    id(0x000003EB)
    ]
    HRESULT _stdcall right([in] long p );
    [
    propget, 
    id(0x000003EB)
    ]
    HRESULT _stdcall right([out, retval] long * p );
    [
    propput, 
    id(0x000003EC)
    ]
    HRESULT _stdcall bottom([in] long p );
    [
    propget, 
    id(0x000003EC)
    ]
    HRESULT _stdcall bottom([out, retval] long * p );
  };

  [
    uuid(3050F80B-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLDOMNode2: IDispatch
  {
    [
    propget, 
    id(0x80010459)
    ]
    HRESULT _stdcall ownerDocument([out, retval]  IDispatch ** p );
  };

  [
    uuid(3050F4B0-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLDOMAttribute: IDispatch
  {
    [
    propget, 
    id(0x000003E8)
    ]
    HRESULT _stdcall nodeName([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003EA)
    ]
    HRESULT _stdcall nodeValue([in] VARIANT p );
    [
    propget, 
    id(0x000003EA)
    ]
    HRESULT _stdcall nodeValue([out, retval] VARIANT * p );
    [
    propget, 
    id(0x000003E9)
    ]
    HRESULT _stdcall specified([out, retval] VARIANT_BOOL * p );
  };

  [
    uuid(3050F809-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLDOMTextNode2: IDispatch
  {
    [
    id(0x000003EC)
    ]
    HRESULT _stdcall substringData([in] long offset, [in] long Count, [out, retval] BSTR * pbstrsubString );
    [
    id(0x000003ED)
    ]
    HRESULT _stdcall appendData([in] BSTR bstrstring );
    [
    id(0x000003EE)
    ]
    HRESULT _stdcall insertData([in] long offset, [in] BSTR bstrstring );
    [
    id(0x000003EF)
    ]
    HRESULT _stdcall deleteData([in] long offset, [in] long Count );
    [
    id(0x000003F0)
    ]
    HRESULT _stdcall replaceData([in] long offset, [in] long Count, [in] BSTR bstrstring );
  };

  [
    uuid(3050F80D-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLDOMImplementation: IDispatch
  {
    [
    id(0x000003E8)
    ]
    HRESULT _stdcall hasFeature([in] BSTR bstrfeature, [in, optional] VARIANT version, [out, retval] VARIANT_BOOL * pfHasFeature );
  };

  [
    uuid(3050F4B2-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLDOMAttribute
  {
    [default] dispinterface DispHTMLDOMAttribute;
    interface IHTMLDOMAttribute;
    interface IHTMLDOMAttribute2;
  };

  [
    uuid(3050F4BA-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLDOMTextNode
  {
    [default] dispinterface DispHTMLDOMTextNode;
    interface IHTMLDOMTextNode;
    interface IHTMLDOMTextNode2;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
  };

  [
    uuid(3050F58F-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLDOMImplementation
  {
    properties:
    methods:
    [
    id(0x000003E8)
    ]
    VARIANT_BOOL hasFeature([in] BSTR bstrfeature, [in, optional] VARIANT version );
  };

  [
    uuid(3050F80E-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLDOMImplementation
  {
    [default] dispinterface DispHTMLDOMImplementation;
    interface IHTMLDOMImplementation;
  };

  [
    uuid(3050F5AB-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLDOMChildrenCollection: IDispatch
  {
    [
    propget, 
    id(0x000005DC)
    ]
    HRESULT _stdcall length([out, retval] long * p );
    [
    propget, 
    id(0xFFFFFFFC), 
    restricted, 
    hidden
    ]
    HRESULT _stdcall _newEnum([out, retval]  IUnknown ** p );
    [
    id(0x00000000)
    ]
    HRESULT _stdcall item([in] long index, [out, retval]  IDispatch ** ppItem );
  };

  [
    uuid(3050F4CC-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLAttributeCollection
  {
    [default] dispinterface DispHTMLAttributeCollection;
    interface IHTMLAttributeCollection;
    interface IHTMLAttributeCollection2;
  };

  [
    uuid(3050F577-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispDOMChildrenCollection
  {
    properties:
    methods:
    [
    propget, 
    id(0x000005DC)
    ]
    long length( void );
    [
    propget, 
    id(0xFFFFFFFC), 
    restricted, 
    hidden
    ]
     IUnknown * _newEnum( void );
    [
    id(0x00000000)
    ]
     IDispatch * item([in] long index );
  };

  [
    uuid(3050F5AA-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass DOMChildrenCollection
  {
    [default] dispinterface DispDOMChildrenCollection;
    interface IHTMLDOMChildrenCollection;
  };

  [
    uuid(3050F33C-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface HTMLElementEvents
  {
    properties:
    methods:
    [
    id(0x8001000A)
    ]
    VARIANT_BOOL onhelp( void );
    [
    id(0xFFFFFDA8)
    ]
    VARIANT_BOOL onclick( void );
    [
    id(0xFFFFFDA7)
    ]
    VARIANT_BOOL ondblclick( void );
    [
    id(0xFFFFFDA5)
    ]
    VARIANT_BOOL onkeypress( void );
    [
    id(0xFFFFFDA6)
    ]
    void onkeydown( void );
    [
    id(0xFFFFFDA4)
    ]
    void onkeyup( void );
    [
    id(0x80010009)
    ]
    void onmouseout( void );
    [
    id(0x80010008)
    ]
    void onmouseover( void );
    [
    id(0xFFFFFDA2)
    ]
    void onmousemove( void );
    [
    id(0xFFFFFDA3)
    ]
    void onmousedown( void );
    [
    id(0xFFFFFDA1)
    ]
    void onmouseup( void );
    [
    id(0x8001000C)
    ]
    VARIANT_BOOL onselectstart( void );
    [
    id(0x80010011)
    ]
    void onfilterchange( void );
    [
    id(0x8001000B)
    ]
    VARIANT_BOOL ondragstart( void );
    [
    id(0x80010004)
    ]
    VARIANT_BOOL onbeforeupdate( void );
    [
    id(0x80010005)
    ]
    void onafterupdate( void );
    [
    id(0x8001000D)
    ]
    VARIANT_BOOL onerrorupdate( void );
    [
    id(0x80010006)
    ]
    VARIANT_BOOL onrowexit( void );
    [
    id(0x80010007)
    ]
    void onrowenter( void );
    [
    id(0x8001000E)
    ]
    void ondatasetchanged( void );
    [
    id(0x8001000F)
    ]
    void ondataavailable( void );
    [
    id(0x80010010)
    ]
    void ondatasetcomplete( void );
    [
    id(0x80010012)
    ]
    void onlosecapture( void );
    [
    id(0x80010013)
    ]
    void onpropertychange( void );
    [
    id(0x000003F6)
    ]
    void onscroll( void );
    [
    id(0x80010001)
    ]
    void onfocus( void );
    [
    id(0x80010000)
    ]
    void onblur( void );
    [
    id(0x000003F8)
    ]
    void onresize( void );
    [
    id(0x80010014)
    ]
    VARIANT_BOOL ondrag( void );
    [
    id(0x80010015)
    ]
    void ondragend( void );
    [
    id(0x80010016)
    ]
    VARIANT_BOOL ondragenter( void );
    [
    id(0x80010017)
    ]
    VARIANT_BOOL ondragover( void );
    [
    id(0x80010018)
    ]
    void ondragleave( void );
    [
    id(0x80010019)
    ]
    VARIANT_BOOL ondrop( void );
    [
    id(0x8001001D)
    ]
    VARIANT_BOOL onbeforecut( void );
    [
    id(0x8001001A)
    ]
    VARIANT_BOOL oncut( void );
    [
    id(0x8001001E)
    ]
    VARIANT_BOOL onbeforecopy( void );
    [
    id(0x8001001B)
    ]
    VARIANT_BOOL oncopy( void );
    [
    id(0x8001001F)
    ]
    VARIANT_BOOL onbeforepaste( void );
    [
    id(0x8001001C)
    ]
    VARIANT_BOOL onpaste( void );
    [
    id(0x000003FF)
    ]
    VARIANT_BOOL oncontextmenu( void );
    [
    id(0x80010020)
    ]
    void onrowsdelete( void );
    [
    id(0x80010021)
    ]
    void onrowsinserted( void );
    [
    id(0x80010022)
    ]
    void oncellchange( void );
    [
    id(0xFFFFFD9F)
    ]
    void onreadystatechange( void );
    [
    id(0x00000403)
    ]
    void onbeforeeditfocus( void );
    [
    id(0x00000406)
    ]
    void onlayoutcomplete( void );
    [
    id(0x00000407)
    ]
    void onpage( void );
    [
    id(0x0000040A)
    ]
    VARIANT_BOOL onbeforedeactivate( void );
    [
    id(0x00000417)
    ]
    VARIANT_BOOL onbeforeactivate( void );
    [
    id(0x0000040B)
    ]
    void onmove( void );
    [
    id(0x0000040C)
    ]
    VARIANT_BOOL oncontrolselect( void );
    [
    id(0x0000040E)
    ]
    VARIANT_BOOL onmovestart( void );
    [
    id(0x0000040F)
    ]
    void onmoveend( void );
    [
    id(0x00000410)
    ]
    VARIANT_BOOL onresizestart( void );
    [
    id(0x00000411)
    ]
    void onresizeend( void );
    [
    id(0x00000412)
    ]
    void onmouseenter( void );
    [
    id(0x00000413)
    ]
    void onmouseleave( void );
    [
    id(0x00000409)
    ]
    VARIANT_BOOL onmousewheel( void );
    [
    id(0x00000414)
    ]
    void onactivate( void );
    [
    id(0x00000415)
    ]
    void ondeactivate( void );
    [
    id(0x00000418)
    ]
    void onfocusin( void );
    [
    id(0x00000419)
    ]
    void onfocusout( void );
  };

  
  typedef enum tag_htmlListType
  {
    htmlListTypeNotSet = 0, 
    htmlListTypeLargeAlpha = 1, 
    htmlListTypeSmallAlpha = 2, 
    htmlListTypeLargeRoman = 3, 
    htmlListTypeSmallRoman = 4, 
    htmlListTypeNumbers = 5, 
    htmlListTypeDisc = 6, 
    htmlListTypeCircle = 7, 
    htmlListTypeSquare = 8, 
    htmlListType_Max = 2147483647
  } _htmlListType;

  
  typedef enum tag_htmlMethod
  {
    htmlMethodNotSet = 0, 
    htmlMethodGet = 1, 
    htmlMethodPost = 2, 
    htmlMethod_Max = 2147483647
  } _htmlMethod;

  
  typedef enum tag_htmlWrap
  {
    htmlWrapOff = 1, 
    htmlWrapSoft = 2, 
    htmlWrapHard = 3, 
    htmlWrap_Max = 2147483647
  } _htmlWrap;

  
  typedef enum tag_htmlDir
  {
    htmlDirNotSet = 0, 
    htmlDirLeftToRight = 1, 
    htmlDirRightToLeft = 2, 
    htmlDir_Max = 2147483647
  } _htmlDir;

  
  typedef enum tag_htmlEditable
  {
    htmlEditableInherit = 0, 
    htmlEditableTrue = 1, 
    htmlEditableFalse = 2, 
    htmlEditable_Max = 2147483647
  } _htmlEditable;

  
  typedef enum tag_htmlInput
  {
    htmlInputNotSet = 0, 
    htmlInputButton = 1, 
    htmlInputCheckbox = 2, 
    htmlInputFile = 3, 
    htmlInputHidden = 4, 
    htmlInputImage = 5, 
    htmlInputPassword = 6, 
    htmlInputRadio = 7, 
    htmlInputReset = 8, 
    htmlInputSelectOne = 9, 
    htmlInputSelectMultiple = 10, 
    htmlInputSubmit = 11, 
    htmlInputText = 12, 
    htmlInputTextarea = 13, 
    htmlInputRichtext = 14, 
    htmlInput_Max = 2147483647
  } _htmlInput;

  
  typedef enum tag_htmlEncoding
  {
    htmlEncodingURL = 0, 
    htmlEncodingMultipart = 1, 
    htmlEncodingText = 2, 
    htmlEncoding_Max = 2147483647
  } _htmlEncoding;

  
  typedef enum tag_htmlAdjacency
  {
    htmlAdjacencyBeforeBegin = 1, 
    htmlAdjacencyAfterBegin = 2, 
    htmlAdjacencyBeforeEnd = 3, 
    htmlAdjacencyAfterEnd = 4, 
    htmlAdjacency_Max = 2147483647
  } _htmlAdjacency;

  
  typedef enum tag_htmlTabIndex
  {
    htmlTabIndexNotSet = 4294934528, 
    htmlTabIndex_Max = 2147483647
  } _htmlTabIndex;

  
  typedef enum tag_htmlComponent
  {
    htmlComponentClient = 0, 
    htmlComponentSbLeft = 1, 
    htmlComponentSbPageLeft = 2, 
    htmlComponentSbHThumb = 3, 
    htmlComponentSbPageRight = 4, 
    htmlComponentSbRight = 5, 
    htmlComponentSbUp = 6, 
    htmlComponentSbPageUp = 7, 
    htmlComponentSbVThumb = 8, 
    htmlComponentSbPageDown = 9, 
    htmlComponentSbDown = 10, 
    htmlComponentSbLeft2 = 11, 
    htmlComponentSbPageLeft2 = 12, 
    htmlComponentSbRight2 = 13, 
    htmlComponentSbPageRight2 = 14, 
    htmlComponentSbUp2 = 15, 
    htmlComponentSbPageUp2 = 16, 
    htmlComponentSbDown2 = 17, 
    htmlComponentSbPageDown2 = 18, 
    htmlComponentSbTop = 19, 
    htmlComponentSbBottom = 20, 
    htmlComponentOutside = 21, 
    htmlComponentGHTopLeft = 22, 
    htmlComponentGHLeft = 23, 
    htmlComponentGHTop = 24, 
    htmlComponentGHBottomLeft = 25, 
    htmlComponentGHTopRight = 26, 
    htmlComponentGHBottom = 27, 
    htmlComponentGHRight = 28, 
    htmlComponentGHBottomRight = 29, 
    htmlComponent_Max = 2147483647
  } _htmlComponent;

  
  typedef enum tag_htmlApplyLocation
  {
    htmlApplyLocationInside = 0, 
    htmlApplyLocationOutside = 1, 
    htmlApplyLocation_Max = 2147483647
  } _htmlApplyLocation;

  
  typedef enum tag_htmlGlyphMode
  {
    htmlGlyphModeNone = 0, 
    htmlGlyphModeBegin = 1, 
    htmlGlyphModeEnd = 2, 
    htmlGlyphModeBoth = 3, 
    htmlGlyphMode_Max = 2147483647
  } _htmlGlyphMode;

  [
    uuid(3050F21F-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLElementCollection: IDispatch
  {
    [
    id(0x000005DD)
    ]
    HRESULT _stdcall toString([out, retval] BSTR * String );
    [
    propput, 
    id(0x000005DC)
    ]
    HRESULT _stdcall length([in] long p );
    [
    propget, 
    id(0x000005DC)
    ]
    HRESULT _stdcall length([out, retval] long * p );
    [
    propget, 
    id(0xFFFFFFFC), 
    restricted, 
    hidden
    ]
    HRESULT _stdcall _newEnum([out, retval]  IUnknown ** p );
    [
    id(0x00000000)
    ]
    HRESULT _stdcall item([in, optional] VARIANT name, [in, optional] VARIANT index, [out, retval]  IDispatch ** pdisp );
    [
    id(0x000005DE)
    ]
    HRESULT _stdcall tags([in] VARIANT tagName, [out, retval]  IDispatch ** pdisp );
  };

  [
    uuid(3050F4D0-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLUniqueName: IDispatch
  {
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    HRESULT _stdcall uniqueNumber([out, retval] long * p );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    HRESULT _stdcall uniqueID([out, retval] BSTR * p );
  };

  [
    uuid(3050F3F2-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLDatabinding: IDispatch
  {
    [
    propput, 
    id(0x800103FD)
    ]
    HRESULT _stdcall dataFld([in] BSTR p );
    [
    propget, 
    id(0x800103FD)
    ]
    HRESULT _stdcall dataFld([out, retval] BSTR * p );
    [
    propput, 
    id(0x800103FE)
    ]
    HRESULT _stdcall dataSrc([in] BSTR p );
    [
    propget, 
    id(0x800103FE)
    ]
    HRESULT _stdcall dataSrc([out, retval] BSTR * p );
    [
    propput, 
    id(0x800103FF)
    ]
    HRESULT _stdcall dataFormatAs([in] BSTR p );
    [
    propget, 
    id(0x800103FF)
    ]
    HRESULT _stdcall dataFormatAs([out, retval] BSTR * p );
  };

  [
    uuid(626FC520-A41E-11CF-A731-00A0C9082637), 
    dual, 
    oleautomation
  ]
   interface IHTMLDocument: IDispatch
  {
    [
    propget, 
    id(0x000003E9), 
    hidden, 
    nonbrowsable
    ]
    HRESULT _stdcall Script([out, retval]  IDispatch ** p );
  };

  [
    uuid(3050F6C8-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLDefaults
  {
    [default] dispinterface DispHTMLDefaults;
    interface IHTMLElementDefaults;
  };

  [
    uuid(3050F5DF-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTCPropertyBehavior: IDispatch
  {
    [
    id(0x800101F4)
    ]
    HRESULT _stdcall fireChange( void );
    [
    propput, 
    id(0x80011415)
    ]
    HRESULT _stdcall value([in] VARIANT p );
    [
    propget, 
    id(0x80011415)
    ]
    HRESULT _stdcall value([out, retval] VARIANT * p );
  };

  [
    uuid(3050F631-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTCMethodBehavior: IDispatch
  {
  };

  [
    uuid(3050F5F4-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTCAttachBehavior: IDispatch
  {
    [
    id(0x00000000)
    ]
    HRESULT _stdcall FireEvent([in]  IDispatch * evt );
    [
    id(0x800101F4)
    ]
    HRESULT _stdcall detachEvent( void );
  };

  [
    uuid(3050F7EB-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTCAttachBehavior2: IDispatch
  {
    [
    id(0x00000000)
    ]
    HRESULT _stdcall FireEvent([in] VARIANT evt );
  };

  [
    uuid(3050F5DC-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTCDescBehavior: IDispatch
  {
    [
    propget, 
    id(0x800101F4), 
    bindable
    ]
    HRESULT _stdcall urn([out, retval] BSTR * p );
    [
    propget, 
    id(0x800101F5), 
    bindable
    ]
    HRESULT _stdcall name([out, retval] BSTR * p );
  };

  [
    uuid(3050F4FC-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTCDefaultDispatch
  {
    [default] dispinterface DispHTCDefaultDispatch;
    interface IHTCDefaultDispatch;
  };

  [
    uuid(3050F57F-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTCPropertyBehavior
  {
    properties:
    methods:
    [
    id(0x800101F4)
    ]
    void fireChange( void );
    [
    propput, 
    id(0x80011415)
    ]
    void value(VARIANT Param1 );
    [
    propget, 
    id(0x80011415)
    ]
    VARIANT value( void );
  };

  [
    uuid(3050F5DE-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTCPropertyBehavior
  {
    [default] dispinterface DispHTCPropertyBehavior;
    interface IHTCPropertyBehavior;
  };

  [
    uuid(3050F587-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTCMethodBehavior
  {
    properties:
    methods:
  };

  [
    uuid(3050F630-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTCMethodBehavior
  {
    [default] dispinterface DispHTCMethodBehavior;
    interface IHTCMethodBehavior;
  };

  [
    uuid(3050F4FE-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTCEventBehavior
  {
    [default] dispinterface DispHTCEventBehavior;
    interface IHTCEventBehavior;
  };

  [
    uuid(3050F583-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTCAttachBehavior
  {
    properties:
    methods:
    [
    id(0x00000000)
    ]
    void FireEvent([in] VARIANT evt );
    [
    id(0x800101F4)
    ]
    void detachEvent( void );
  };

  [
    uuid(3050F5F5-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTCAttachBehavior
  {
    [default] dispinterface DispHTCAttachBehavior;
    interface IHTCAttachBehavior2;
    interface IHTCAttachBehavior;
  };

  [
    uuid(3050F57E-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTCDescBehavior
  {
    properties:
    methods:
    [
    propget, 
    id(0x800101F4), 
    bindable
    ]
    BSTR urn( void );
    [
    propget, 
    id(0x800101F5), 
    bindable
    ]
    BSTR name( void );
  };

  [
    uuid(3050F5DD-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTCDescBehavior
  {
    [default] dispinterface DispHTCDescBehavior;
    interface IHTCDescBehavior;
  };

  [
    uuid(3050F5E2-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLUrnCollection: IDispatch
  {
    [
    propget, 
    id(0x000003E9)
    ]
    HRESULT _stdcall length([out, retval] long * p );
    [
    id(0x00000000)
    ]
    HRESULT _stdcall item([in] long index, [out, retval] BSTR * ppUrn );
  };

  [
    uuid(3050F580-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLUrnCollection
  {
    [default] interface IHTMLUrnCollection;
  };

  [
    uuid(3050F4B8-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLGenericElement
  {
    [default] dispinterface DispHTMLGenericElement;
    [default, source] dispinterface HTMLElementEvents;
    [source] dispinterface HTMLElementEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLGenericElement;
  };

  [
    uuid(3050F3CE-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLStyleSheetRule
  {
    [default] interface IHTMLStyleSheetRule;
  };

  [
    uuid(3050F3CD-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLStyleSheetRulesCollection
  {
    [default] interface IHTMLStyleSheetRulesCollection;
  };

  [
    uuid(3050F7EE-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLStyleSheetPage: IDispatch
  {
    [
    propget, 
    id(0x000003E9)
    ]
    HRESULT _stdcall selector([out, retval] BSTR * p );
    [
    propget, 
    id(0x000003EA)
    ]
    HRESULT _stdcall pseudoClass([out, retval] BSTR * p );
  };

  [
    uuid(3050F7EF-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLStyleSheetPage
  {
    [default] interface IHTMLStyleSheetPage;
  };

  [
    uuid(3050F7F1-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLStyleSheetPagesCollection
  {
    [default] interface IHTMLStyleSheetPagesCollection;
  };

  [
    uuid(3050F2E4-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLStyleSheet
  {
    [default] dispinterface DispHTMLStyleSheet;
    interface IHTMLStyleSheet;
    interface IHTMLStyleSheet2;
  };

  [
    uuid(3050F37F-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLStyleSheetsCollection
  {
    [default] interface IHTMLStyleSheetsCollection;
  };

  [
    uuid(3050F3CC-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface HTMLLinkElementEvents
  {
    properties:
    methods:
    [
    id(0x8001000A)
    ]
    VARIANT_BOOL onhelp( void );
    [
    id(0xFFFFFDA8)
    ]
    VARIANT_BOOL onclick( void );
    [
    id(0xFFFFFDA7)
    ]
    VARIANT_BOOL ondblclick( void );
    [
    id(0xFFFFFDA5)
    ]
    VARIANT_BOOL onkeypress( void );
    [
    id(0xFFFFFDA6)
    ]
    void onkeydown( void );
    [
    id(0xFFFFFDA4)
    ]
    void onkeyup( void );
    [
    id(0x80010009)
    ]
    void onmouseout( void );
    [
    id(0x80010008)
    ]
    void onmouseover( void );
    [
    id(0xFFFFFDA2)
    ]
    void onmousemove( void );
    [
    id(0xFFFFFDA3)
    ]
    void onmousedown( void );
    [
    id(0xFFFFFDA1)
    ]
    void onmouseup( void );
    [
    id(0x8001000C)
    ]
    VARIANT_BOOL onselectstart( void );
    [
    id(0x80010011)
    ]
    void onfilterchange( void );
    [
    id(0x8001000B)
    ]
    VARIANT_BOOL ondragstart( void );
    [
    id(0x80010004)
    ]
    VARIANT_BOOL onbeforeupdate( void );
    [
    id(0x80010005)
    ]
    void onafterupdate( void );
    [
    id(0x8001000D)
    ]
    VARIANT_BOOL onerrorupdate( void );
    [
    id(0x80010006)
    ]
    VARIANT_BOOL onrowexit( void );
    [
    id(0x80010007)
    ]
    void onrowenter( void );
    [
    id(0x8001000E)
    ]
    void ondatasetchanged( void );
    [
    id(0x8001000F)
    ]
    void ondataavailable( void );
    [
    id(0x80010010)
    ]
    void ondatasetcomplete( void );
    [
    id(0x80010012)
    ]
    void onlosecapture( void );
    [
    id(0x80010013)
    ]
    void onpropertychange( void );
    [
    id(0x000003F6)
    ]
    void onscroll( void );
    [
    id(0x80010001)
    ]
    void onfocus( void );
    [
    id(0x80010000)
    ]
    void onblur( void );
    [
    id(0x000003F8)
    ]
    void onresize( void );
    [
    id(0x80010014)
    ]
    VARIANT_BOOL ondrag( void );
    [
    id(0x80010015)
    ]
    void ondragend( void );
    [
    id(0x80010016)
    ]
    VARIANT_BOOL ondragenter( void );
    [
    id(0x80010017)
    ]
    VARIANT_BOOL ondragover( void );
    [
    id(0x80010018)
    ]
    void ondragleave( void );
    [
    id(0x80010019)
    ]
    VARIANT_BOOL ondrop( void );
    [
    id(0x8001001D)
    ]
    VARIANT_BOOL onbeforecut( void );
    [
    id(0x8001001A)
    ]
    VARIANT_BOOL oncut( void );
    [
    id(0x8001001E)
    ]
    VARIANT_BOOL onbeforecopy( void );
    [
    id(0x8001001B)
    ]
    VARIANT_BOOL oncopy( void );
    [
    id(0x8001001F)
    ]
    VARIANT_BOOL onbeforepaste( void );
    [
    id(0x8001001C)
    ]
    VARIANT_BOOL onpaste( void );
    [
    id(0x000003FF)
    ]
    VARIANT_BOOL oncontextmenu( void );
    [
    id(0x80010020)
    ]
    void onrowsdelete( void );
    [
    id(0x80010021)
    ]
    void onrowsinserted( void );
    [
    id(0x80010022)
    ]
    void oncellchange( void );
    [
    id(0xFFFFFD9F)
    ]
    void onreadystatechange( void );
    [
    id(0x00000403)
    ]
    void onbeforeeditfocus( void );
    [
    id(0x00000406)
    ]
    void onlayoutcomplete( void );
    [
    id(0x00000407)
    ]
    void onpage( void );
    [
    id(0x0000040A)
    ]
    VARIANT_BOOL onbeforedeactivate( void );
    [
    id(0x00000417)
    ]
    VARIANT_BOOL onbeforeactivate( void );
    [
    id(0x0000040B)
    ]
    void onmove( void );
    [
    id(0x0000040C)
    ]
    VARIANT_BOOL oncontrolselect( void );
    [
    id(0x0000040E)
    ]
    VARIANT_BOOL onmovestart( void );
    [
    id(0x0000040F)
    ]
    void onmoveend( void );
    [
    id(0x00000410)
    ]
    VARIANT_BOOL onresizestart( void );
    [
    id(0x00000411)
    ]
    void onresizeend( void );
    [
    id(0x00000412)
    ]
    void onmouseenter( void );
    [
    id(0x00000413)
    ]
    void onmouseleave( void );
    [
    id(0x00000409)
    ]
    VARIANT_BOOL onmousewheel( void );
    [
    id(0x00000414)
    ]
    void onactivate( void );
    [
    id(0x00000415)
    ]
    void ondeactivate( void );
    [
    id(0x00000418)
    ]
    void onfocusin( void );
    [
    id(0x00000419)
    ]
    void onfocusout( void );
    [
    id(0x000003EB)
    ]
    void onload( void );
    [
    id(0x000003EA)
    ]
    void onerror( void );
  };

  [
    uuid(3050F4E5-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLLinkElement2: IDispatch
  {
    [
    propput, 
    id(0x000003F9), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall target([in] BSTR p );
    [
    propget, 
    id(0x000003F9), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall target([out, retval] BSTR * p );
  };

  [
    uuid(3050F81E-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLLinkElement3: IDispatch
  {
    [
    propput, 
    id(0x000003FA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall charset([in] BSTR p );
    [
    propget, 
    id(0x000003FA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall charset([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003FB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall hreflang([in] BSTR p );
    [
    propget, 
    id(0x000003FB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall hreflang([out, retval] BSTR * p );
  };

  [
    uuid(3050F277-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLLinkElement
  {
    [default] dispinterface DispHTMLLinkElement;
    [default, source] dispinterface HTMLLinkElementEvents;
    [source] dispinterface HTMLLinkElementEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLLinkElement;
    interface IHTMLLinkElement2;
    interface IHTMLLinkElement3;
  };

  
  typedef enum tag_htmlUnit
  {
    htmlUnitCharacter = 1, 
    htmlUnitWord = 2, 
    htmlUnitSentence = 3, 
    htmlUnitTextEdit = 6, 
    htmlUnit_Max = 2147483647
  } _htmlUnit;

  
  typedef enum tag_htmlEndPoints
  {
    htmlEndPointsStartToStart = 1, 
    htmlEndPointsStartToEnd = 2, 
    htmlEndPointsEndToStart = 3, 
    htmlEndPointsEndToEnd = 4, 
    htmlEndPoints_Max = 2147483647
  } _htmlEndPoints;

  
  typedef enum tag_htmlDirection
  {
    htmlDirectionForward = 99999, 
    htmlDirectionBackward = 4294867297, 
    htmlDirection_Max = 2147483647
  } _htmlDirection;

  [
    uuid(3050F40B-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLTextRangeMetrics: IDispatch
  {
    [
    propget, 
    id(0x0000040B)
    ]
    HRESULT _stdcall offsetTop([out, retval] long * p );
    [
    propget, 
    id(0x0000040C)
    ]
    HRESULT _stdcall offsetLeft([out, retval] long * p );
    [
    propget, 
    id(0x0000040D)
    ]
    HRESULT _stdcall boundingTop([out, retval] long * p );
    [
    propget, 
    id(0x0000040E)
    ]
    HRESULT _stdcall boundingLeft([out, retval] long * p );
    [
    propget, 
    id(0x0000040F)
    ]
    HRESULT _stdcall boundingWidth([out, retval] long * p );
    [
    propget, 
    id(0x00000410)
    ]
    HRESULT _stdcall boundingHeight([out, retval] long * p );
  };

  [
    uuid(3050F364-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface HTMLFormElementEvents
  {
    properties:
    methods:
    [
    id(0x8001000A)
    ]
    VARIANT_BOOL onhelp( void );
    [
    id(0xFFFFFDA8)
    ]
    VARIANT_BOOL onclick( void );
    [
    id(0xFFFFFDA7)
    ]
    VARIANT_BOOL ondblclick( void );
    [
    id(0xFFFFFDA5)
    ]
    VARIANT_BOOL onkeypress( void );
    [
    id(0xFFFFFDA6)
    ]
    void onkeydown( void );
    [
    id(0xFFFFFDA4)
    ]
    void onkeyup( void );
    [
    id(0x80010009)
    ]
    void onmouseout( void );
    [
    id(0x80010008)
    ]
    void onmouseover( void );
    [
    id(0xFFFFFDA2)
    ]
    void onmousemove( void );
    [
    id(0xFFFFFDA3)
    ]
    void onmousedown( void );
    [
    id(0xFFFFFDA1)
    ]
    void onmouseup( void );
    [
    id(0x8001000C)
    ]
    VARIANT_BOOL onselectstart( void );
    [
    id(0x80010011)
    ]
    void onfilterchange( void );
    [
    id(0x8001000B)
    ]
    VARIANT_BOOL ondragstart( void );
    [
    id(0x80010004)
    ]
    VARIANT_BOOL onbeforeupdate( void );
    [
    id(0x80010005)
    ]
    void onafterupdate( void );
    [
    id(0x8001000D)
    ]
    VARIANT_BOOL onerrorupdate( void );
    [
    id(0x80010006)
    ]
    VARIANT_BOOL onrowexit( void );
    [
    id(0x80010007)
    ]
    void onrowenter( void );
    [
    id(0x8001000E)
    ]
    void ondatasetchanged( void );
    [
    id(0x8001000F)
    ]
    void ondataavailable( void );
    [
    id(0x80010010)
    ]
    void ondatasetcomplete( void );
    [
    id(0x80010012)
    ]
    void onlosecapture( void );
    [
    id(0x80010013)
    ]
    void onpropertychange( void );
    [
    id(0x000003F6)
    ]
    void onscroll( void );
    [
    id(0x80010001)
    ]
    void onfocus( void );
    [
    id(0x80010000)
    ]
    void onblur( void );
    [
    id(0x000003F8)
    ]
    void onresize( void );
    [
    id(0x80010014)
    ]
    VARIANT_BOOL ondrag( void );
    [
    id(0x80010015)
    ]
    void ondragend( void );
    [
    id(0x80010016)
    ]
    VARIANT_BOOL ondragenter( void );
    [
    id(0x80010017)
    ]
    VARIANT_BOOL ondragover( void );
    [
    id(0x80010018)
    ]
    void ondragleave( void );
    [
    id(0x80010019)
    ]
    VARIANT_BOOL ondrop( void );
    [
    id(0x8001001D)
    ]
    VARIANT_BOOL onbeforecut( void );
    [
    id(0x8001001A)
    ]
    VARIANT_BOOL oncut( void );
    [
    id(0x8001001E)
    ]
    VARIANT_BOOL onbeforecopy( void );
    [
    id(0x8001001B)
    ]
    VARIANT_BOOL oncopy( void );
    [
    id(0x8001001F)
    ]
    VARIANT_BOOL onbeforepaste( void );
    [
    id(0x8001001C)
    ]
    VARIANT_BOOL onpaste( void );
    [
    id(0x000003FF)
    ]
    VARIANT_BOOL oncontextmenu( void );
    [
    id(0x80010020)
    ]
    void onrowsdelete( void );
    [
    id(0x80010021)
    ]
    void onrowsinserted( void );
    [
    id(0x80010022)
    ]
    void oncellchange( void );
    [
    id(0xFFFFFD9F)
    ]
    void onreadystatechange( void );
    [
    id(0x00000403)
    ]
    void onbeforeeditfocus( void );
    [
    id(0x00000406)
    ]
    void onlayoutcomplete( void );
    [
    id(0x00000407)
    ]
    void onpage( void );
    [
    id(0x0000040A)
    ]
    VARIANT_BOOL onbeforedeactivate( void );
    [
    id(0x00000417)
    ]
    VARIANT_BOOL onbeforeactivate( void );
    [
    id(0x0000040B)
    ]
    void onmove( void );
    [
    id(0x0000040C)
    ]
    VARIANT_BOOL oncontrolselect( void );
    [
    id(0x0000040E)
    ]
    VARIANT_BOOL onmovestart( void );
    [
    id(0x0000040F)
    ]
    void onmoveend( void );
    [
    id(0x00000410)
    ]
    VARIANT_BOOL onresizestart( void );
    [
    id(0x00000411)
    ]
    void onresizeend( void );
    [
    id(0x00000412)
    ]
    void onmouseenter( void );
    [
    id(0x00000413)
    ]
    void onmouseleave( void );
    [
    id(0x00000409)
    ]
    VARIANT_BOOL onmousewheel( void );
    [
    id(0x00000414)
    ]
    void onactivate( void );
    [
    id(0x00000415)
    ]
    void ondeactivate( void );
    [
    id(0x00000418)
    ]
    void onfocusin( void );
    [
    id(0x00000419)
    ]
    void onfocusout( void );
    [
    id(0x000003EF)
    ]
    VARIANT_BOOL onsubmit( void );
    [
    id(0x000003F7)
    ]
    VARIANT_BOOL onreset( void );
  };

  [
    uuid(3050F1F7-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLFormElement: IDispatch
  {
    [
    propput, 
    id(0x000003E9), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall action([in] BSTR p );
    [
    propget, 
    id(0x000003E9), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall action([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall dir([in] BSTR p );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall dir([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003EB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall encoding([in] BSTR p );
    [
    propget, 
    id(0x000003EB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall encoding([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003EC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall method([in] BSTR p );
    [
    propget, 
    id(0x000003EC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall method([out, retval] BSTR * p );
    [
    propget, 
    id(0x000003ED)
    ]
    HRESULT _stdcall elements([out, retval]  IDispatch ** p );
    [
    propput, 
    id(0x000003EE), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall target([in] BSTR p );
    [
    propget, 
    id(0x000003EE), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall target([out, retval] BSTR * p );
    [
    propput, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall name([in] BSTR p );
    [
    propget, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall name([out, retval] BSTR * p );
    [
    propput, 
    id(0x8001177B), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onsubmit([in] VARIANT p );
    [
    propget, 
    id(0x8001177B), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onsubmit([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001177C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onreset([in] VARIANT p );
    [
    propget, 
    id(0x8001177C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onreset([out, retval] VARIANT * p );
    [
    id(0x000003F1)
    ]
    HRESULT _stdcall submit( void );
    [
    id(0x000003F2)
    ]
    HRESULT _stdcall reset( void );
    [
    propput, 
    id(0x000005DC)
    ]
    HRESULT _stdcall length([in] long p );
    [
    propget, 
    id(0x000005DC)
    ]
    HRESULT _stdcall length([out, retval] long * p );
    [
    propget, 
    id(0xFFFFFFFC), 
    restricted, 
    hidden
    ]
    HRESULT _stdcall _newEnum([out, retval]  IUnknown ** p );
    [
    id(0x00000000)
    ]
    HRESULT _stdcall item([in, optional] VARIANT name, [in, optional] VARIANT index, [out, retval]  IDispatch ** pdisp );
    [
    id(0x000005DE)
    ]
    HRESULT _stdcall tags([in] VARIANT tagName, [out, retval]  IDispatch ** pdisp );
  };

  [
    uuid(3050F4F6-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLFormElement2: IDispatch
  {
    [
    propput, 
    id(0x000003F3), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall acceptCharset([in] BSTR p );
    [
    propget, 
    id(0x000003F3), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall acceptCharset([out, retval] BSTR * p );
    [
    id(0x000005E1)
    ]
    HRESULT _stdcall urns([in] VARIANT urn, [out, retval]  IDispatch ** pdisp );
  };

  [
    uuid(3050F836-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLFormElement3: IDispatch
  {
    [
    id(0x000005E2)
    ]
    HRESULT _stdcall namedItem([in] BSTR name, [out, retval]  IDispatch ** pdisp );
  };

  [
    uuid(3050F645-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLSubmitData: IDispatch
  {
    [
    id(0x000003F4)
    ]
    HRESULT _stdcall appendNameValuePair([in, optional, defaultvalue("")] BSTR name, [in, optional, defaultvalue("")] BSTR value );
    [
    id(0x000003F5)
    ]
    HRESULT _stdcall appendNameFilePair([in, optional, defaultvalue("")] BSTR name, [in, optional, defaultvalue("")] BSTR filename );
    [
    id(0x000003F6)
    ]
    HRESULT _stdcall appendItemSeparator( void );
  };

  [
    uuid(3050F251-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLFormElement
  {
    [default] dispinterface DispHTMLFormElement;
    [default, source] dispinterface HTMLFormElementEvents;
    [source] dispinterface HTMLFormElementEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLFormElement;
    interface IHTMLFormElement2;
    interface IHTMLFormElement3;
    interface IHTMLSubmitData;
  };

  [
    uuid(3050F4EA-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface HTMLControlElementEvents
  {
    properties:
    methods:
    [
    id(0x8001000A)
    ]
    VARIANT_BOOL onhelp( void );
    [
    id(0xFFFFFDA8)
    ]
    VARIANT_BOOL onclick( void );
    [
    id(0xFFFFFDA7)
    ]
    VARIANT_BOOL ondblclick( void );
    [
    id(0xFFFFFDA5)
    ]
    VARIANT_BOOL onkeypress( void );
    [
    id(0xFFFFFDA6)
    ]
    void onkeydown( void );
    [
    id(0xFFFFFDA4)
    ]
    void onkeyup( void );
    [
    id(0x80010009)
    ]
    void onmouseout( void );
    [
    id(0x80010008)
    ]
    void onmouseover( void );
    [
    id(0xFFFFFDA2)
    ]
    void onmousemove( void );
    [
    id(0xFFFFFDA3)
    ]
    void onmousedown( void );
    [
    id(0xFFFFFDA1)
    ]
    void onmouseup( void );
    [
    id(0x8001000C)
    ]
    VARIANT_BOOL onselectstart( void );
    [
    id(0x80010011)
    ]
    void onfilterchange( void );
    [
    id(0x8001000B)
    ]
    VARIANT_BOOL ondragstart( void );
    [
    id(0x80010004)
    ]
    VARIANT_BOOL onbeforeupdate( void );
    [
    id(0x80010005)
    ]
    void onafterupdate( void );
    [
    id(0x8001000D)
    ]
    VARIANT_BOOL onerrorupdate( void );
    [
    id(0x80010006)
    ]
    VARIANT_BOOL onrowexit( void );
    [
    id(0x80010007)
    ]
    void onrowenter( void );
    [
    id(0x8001000E)
    ]
    void ondatasetchanged( void );
    [
    id(0x8001000F)
    ]
    void ondataavailable( void );
    [
    id(0x80010010)
    ]
    void ondatasetcomplete( void );
    [
    id(0x80010012)
    ]
    void onlosecapture( void );
    [
    id(0x80010013)
    ]
    void onpropertychange( void );
    [
    id(0x000003F6)
    ]
    void onscroll( void );
    [
    id(0x80010001)
    ]
    void onfocus( void );
    [
    id(0x80010000)
    ]
    void onblur( void );
    [
    id(0x000003F8)
    ]
    void onresize( void );
    [
    id(0x80010014)
    ]
    VARIANT_BOOL ondrag( void );
    [
    id(0x80010015)
    ]
    void ondragend( void );
    [
    id(0x80010016)
    ]
    VARIANT_BOOL ondragenter( void );
    [
    id(0x80010017)
    ]
    VARIANT_BOOL ondragover( void );
    [
    id(0x80010018)
    ]
    void ondragleave( void );
    [
    id(0x80010019)
    ]
    VARIANT_BOOL ondrop( void );
    [
    id(0x8001001D)
    ]
    VARIANT_BOOL onbeforecut( void );
    [
    id(0x8001001A)
    ]
    VARIANT_BOOL oncut( void );
    [
    id(0x8001001E)
    ]
    VARIANT_BOOL onbeforecopy( void );
    [
    id(0x8001001B)
    ]
    VARIANT_BOOL oncopy( void );
    [
    id(0x8001001F)
    ]
    VARIANT_BOOL onbeforepaste( void );
    [
    id(0x8001001C)
    ]
    VARIANT_BOOL onpaste( void );
    [
    id(0x000003FF)
    ]
    VARIANT_BOOL oncontextmenu( void );
    [
    id(0x80010020)
    ]
    void onrowsdelete( void );
    [
    id(0x80010021)
    ]
    void onrowsinserted( void );
    [
    id(0x80010022)
    ]
    void oncellchange( void );
    [
    id(0xFFFFFD9F)
    ]
    void onreadystatechange( void );
    [
    id(0x00000403)
    ]
    void onbeforeeditfocus( void );
    [
    id(0x00000406)
    ]
    void onlayoutcomplete( void );
    [
    id(0x00000407)
    ]
    void onpage( void );
    [
    id(0x0000040A)
    ]
    VARIANT_BOOL onbeforedeactivate( void );
    [
    id(0x00000417)
    ]
    VARIANT_BOOL onbeforeactivate( void );
    [
    id(0x0000040B)
    ]
    void onmove( void );
    [
    id(0x0000040C)
    ]
    VARIANT_BOOL oncontrolselect( void );
    [
    id(0x0000040E)
    ]
    VARIANT_BOOL onmovestart( void );
    [
    id(0x0000040F)
    ]
    void onmoveend( void );
    [
    id(0x00000410)
    ]
    VARIANT_BOOL onresizestart( void );
    [
    id(0x00000411)
    ]
    void onresizeend( void );
    [
    id(0x00000412)
    ]
    void onmouseenter( void );
    [
    id(0x00000413)
    ]
    void onmouseleave( void );
    [
    id(0x00000409)
    ]
    VARIANT_BOOL onmousewheel( void );
    [
    id(0x00000414)
    ]
    void onactivate( void );
    [
    id(0x00000415)
    ]
    void ondeactivate( void );
    [
    id(0x00000418)
    ]
    void onfocusin( void );
    [
    id(0x00000419)
    ]
    void onfocusout( void );
  };

  
  typedef enum tag_htmlStart
  {
    htmlStartfileopen = 0, 
    htmlStartmouseover = 1, 
    htmlStart_Max = 2147483647
  } _htmlStart;

  [
    uuid(3050F4E9-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLControlElement: IDispatch
  {
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall tabIndex([in] short p );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall tabIndex([out, retval] short * p );
    [
    id(0x800107D0)
    ]
    HRESULT _stdcall focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall accessKey([in] BSTR p );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall accessKey([out, retval] BSTR * p );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onblur([in] VARIANT p );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onblur([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onfocus([in] VARIANT p );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onfocus([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onresize([in] VARIANT p );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onresize([out, retval] VARIANT * p );
    [
    id(0x800107D2)
    ]
    HRESULT _stdcall blur( void );
    [
    id(0x800107E1)
    ]
    HRESULT _stdcall addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    HRESULT _stdcall removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall clientHeight([out, retval] long * p );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall clientWidth([out, retval] long * p );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall clientTop([out, retval] long * p );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall clientLeft([out, retval] long * p );
  };

  [
    uuid(3050F218-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLTextElement: IDispatch
  {
  };

  [
    uuid(3050F26A-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLTextElement
  {
    [default] dispinterface DispHTMLTextElement;
    [default, source] dispinterface HTMLElementEvents;
    [source] dispinterface HTMLElementEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLTextElement;
  };

  [
    uuid(1FF6AA72-5842-11CF-A707-00AA00C0098D), 
    hidden
  ]
   dispinterface HTMLTextContainerEvents
  {
    properties:
    methods:
    [
    id(0x8001000A)
    ]
    VARIANT_BOOL onhelp( void );
    [
    id(0xFFFFFDA8)
    ]
    VARIANT_BOOL onclick( void );
    [
    id(0xFFFFFDA7)
    ]
    VARIANT_BOOL ondblclick( void );
    [
    id(0xFFFFFDA5)
    ]
    VARIANT_BOOL onkeypress( void );
    [
    id(0xFFFFFDA6)
    ]
    void onkeydown( void );
    [
    id(0xFFFFFDA4)
    ]
    void onkeyup( void );
    [
    id(0x80010009)
    ]
    void onmouseout( void );
    [
    id(0x80010008)
    ]
    void onmouseover( void );
    [
    id(0xFFFFFDA2)
    ]
    void onmousemove( void );
    [
    id(0xFFFFFDA3)
    ]
    void onmousedown( void );
    [
    id(0xFFFFFDA1)
    ]
    void onmouseup( void );
    [
    id(0x8001000C)
    ]
    VARIANT_BOOL onselectstart( void );
    [
    id(0x80010011)
    ]
    void onfilterchange( void );
    [
    id(0x8001000B)
    ]
    VARIANT_BOOL ondragstart( void );
    [
    id(0x80010004)
    ]
    VARIANT_BOOL onbeforeupdate( void );
    [
    id(0x80010005)
    ]
    void onafterupdate( void );
    [
    id(0x8001000D)
    ]
    VARIANT_BOOL onerrorupdate( void );
    [
    id(0x80010006)
    ]
    VARIANT_BOOL onrowexit( void );
    [
    id(0x80010007)
    ]
    void onrowenter( void );
    [
    id(0x8001000E)
    ]
    void ondatasetchanged( void );
    [
    id(0x8001000F)
    ]
    void ondataavailable( void );
    [
    id(0x80010010)
    ]
    void ondatasetcomplete( void );
    [
    id(0x80010012)
    ]
    void onlosecapture( void );
    [
    id(0x80010013)
    ]
    void onpropertychange( void );
    [
    id(0x000003F6)
    ]
    void onscroll( void );
    [
    id(0x80010001)
    ]
    void onfocus( void );
    [
    id(0x80010000)
    ]
    void onblur( void );
    [
    id(0x000003F8)
    ]
    void onresize( void );
    [
    id(0x80010014)
    ]
    VARIANT_BOOL ondrag( void );
    [
    id(0x80010015)
    ]
    void ondragend( void );
    [
    id(0x80010016)
    ]
    VARIANT_BOOL ondragenter( void );
    [
    id(0x80010017)
    ]
    VARIANT_BOOL ondragover( void );
    [
    id(0x80010018)
    ]
    void ondragleave( void );
    [
    id(0x80010019)
    ]
    VARIANT_BOOL ondrop( void );
    [
    id(0x8001001D)
    ]
    VARIANT_BOOL onbeforecut( void );
    [
    id(0x8001001A)
    ]
    VARIANT_BOOL oncut( void );
    [
    id(0x8001001E)
    ]
    VARIANT_BOOL onbeforecopy( void );
    [
    id(0x8001001B)
    ]
    VARIANT_BOOL oncopy( void );
    [
    id(0x8001001F)
    ]
    VARIANT_BOOL onbeforepaste( void );
    [
    id(0x8001001C)
    ]
    VARIANT_BOOL onpaste( void );
    [
    id(0x000003FF)
    ]
    VARIANT_BOOL oncontextmenu( void );
    [
    id(0x80010020)
    ]
    void onrowsdelete( void );
    [
    id(0x80010021)
    ]
    void onrowsinserted( void );
    [
    id(0x80010022)
    ]
    void oncellchange( void );
    [
    id(0xFFFFFD9F)
    ]
    void onreadystatechange( void );
    [
    id(0x00000403)
    ]
    void onbeforeeditfocus( void );
    [
    id(0x00000406)
    ]
    void onlayoutcomplete( void );
    [
    id(0x00000407)
    ]
    void onpage( void );
    [
    id(0x0000040A)
    ]
    VARIANT_BOOL onbeforedeactivate( void );
    [
    id(0x00000417)
    ]
    VARIANT_BOOL onbeforeactivate( void );
    [
    id(0x0000040B)
    ]
    void onmove( void );
    [
    id(0x0000040C)
    ]
    VARIANT_BOOL oncontrolselect( void );
    [
    id(0x0000040E)
    ]
    VARIANT_BOOL onmovestart( void );
    [
    id(0x0000040F)
    ]
    void onmoveend( void );
    [
    id(0x00000410)
    ]
    VARIANT_BOOL onresizestart( void );
    [
    id(0x00000411)
    ]
    void onresizeend( void );
    [
    id(0x00000412)
    ]
    void onmouseenter( void );
    [
    id(0x00000413)
    ]
    void onmouseleave( void );
    [
    id(0x00000409)
    ]
    VARIANT_BOOL onmousewheel( void );
    [
    id(0x00000414)
    ]
    void onactivate( void );
    [
    id(0x00000415)
    ]
    void ondeactivate( void );
    [
    id(0x00000418)
    ]
    void onfocusin( void );
    [
    id(0x00000419)
    ]
    void onfocusout( void );
    [
    id(0x000003E9)
    ]
    void onchange( void );
    [
    id(0x000003EE)
    ]
    void onselect( void );
  };

  [
    uuid(3050F230-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLTextContainer: IDispatch
  {
    [
    id(0x000003E9)
    ]
    HRESULT _stdcall createControlRange([out, retval]  IDispatch ** range );
    [
    propget, 
    id(0x000003EA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollHeight([out, retval] long * p );
    [
    propget, 
    id(0x000003EB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollWidth([out, retval] long * p );
    [
    propput, 
    id(0x000003EC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollTop([in] long p );
    [
    propget, 
    id(0x000003EC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollTop([out, retval] long * p );
    [
    propput, 
    id(0x000003ED), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollLeft([in] long p );
    [
    propget, 
    id(0x000003ED), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollLeft([out, retval] long * p );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onscroll([in] VARIANT p );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onscroll([out, retval] VARIANT * p );
  };

  [
    uuid(3050F25B-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface HTMLImgEvents
  {
    properties:
    methods:
    [
    id(0x8001000A)
    ]
    VARIANT_BOOL onhelp( void );
    [
    id(0xFFFFFDA8)
    ]
    VARIANT_BOOL onclick( void );
    [
    id(0xFFFFFDA7)
    ]
    VARIANT_BOOL ondblclick( void );
    [
    id(0xFFFFFDA5)
    ]
    VARIANT_BOOL onkeypress( void );
    [
    id(0xFFFFFDA6)
    ]
    void onkeydown( void );
    [
    id(0xFFFFFDA4)
    ]
    void onkeyup( void );
    [
    id(0x80010009)
    ]
    void onmouseout( void );
    [
    id(0x80010008)
    ]
    void onmouseover( void );
    [
    id(0xFFFFFDA2)
    ]
    void onmousemove( void );
    [
    id(0xFFFFFDA3)
    ]
    void onmousedown( void );
    [
    id(0xFFFFFDA1)
    ]
    void onmouseup( void );
    [
    id(0x8001000C)
    ]
    VARIANT_BOOL onselectstart( void );
    [
    id(0x80010011)
    ]
    void onfilterchange( void );
    [
    id(0x8001000B)
    ]
    VARIANT_BOOL ondragstart( void );
    [
    id(0x80010004)
    ]
    VARIANT_BOOL onbeforeupdate( void );
    [
    id(0x80010005)
    ]
    void onafterupdate( void );
    [
    id(0x8001000D)
    ]
    VARIANT_BOOL onerrorupdate( void );
    [
    id(0x80010006)
    ]
    VARIANT_BOOL onrowexit( void );
    [
    id(0x80010007)
    ]
    void onrowenter( void );
    [
    id(0x8001000E)
    ]
    void ondatasetchanged( void );
    [
    id(0x8001000F)
    ]
    void ondataavailable( void );
    [
    id(0x80010010)
    ]
    void ondatasetcomplete( void );
    [
    id(0x80010012)
    ]
    void onlosecapture( void );
    [
    id(0x80010013)
    ]
    void onpropertychange( void );
    [
    id(0x000003F6)
    ]
    void onscroll( void );
    [
    id(0x80010001)
    ]
    void onfocus( void );
    [
    id(0x80010000)
    ]
    void onblur( void );
    [
    id(0x000003F8)
    ]
    void onresize( void );
    [
    id(0x80010014)
    ]
    VARIANT_BOOL ondrag( void );
    [
    id(0x80010015)
    ]
    void ondragend( void );
    [
    id(0x80010016)
    ]
    VARIANT_BOOL ondragenter( void );
    [
    id(0x80010017)
    ]
    VARIANT_BOOL ondragover( void );
    [
    id(0x80010018)
    ]
    void ondragleave( void );
    [
    id(0x80010019)
    ]
    VARIANT_BOOL ondrop( void );
    [
    id(0x8001001D)
    ]
    VARIANT_BOOL onbeforecut( void );
    [
    id(0x8001001A)
    ]
    VARIANT_BOOL oncut( void );
    [
    id(0x8001001E)
    ]
    VARIANT_BOOL onbeforecopy( void );
    [
    id(0x8001001B)
    ]
    VARIANT_BOOL oncopy( void );
    [
    id(0x8001001F)
    ]
    VARIANT_BOOL onbeforepaste( void );
    [
    id(0x8001001C)
    ]
    VARIANT_BOOL onpaste( void );
    [
    id(0x000003FF)
    ]
    VARIANT_BOOL oncontextmenu( void );
    [
    id(0x80010020)
    ]
    void onrowsdelete( void );
    [
    id(0x80010021)
    ]
    void onrowsinserted( void );
    [
    id(0x80010022)
    ]
    void oncellchange( void );
    [
    id(0xFFFFFD9F)
    ]
    void onreadystatechange( void );
    [
    id(0x00000403)
    ]
    void onbeforeeditfocus( void );
    [
    id(0x00000406)
    ]
    void onlayoutcomplete( void );
    [
    id(0x00000407)
    ]
    void onpage( void );
    [
    id(0x0000040A)
    ]
    VARIANT_BOOL onbeforedeactivate( void );
    [
    id(0x00000417)
    ]
    VARIANT_BOOL onbeforeactivate( void );
    [
    id(0x0000040B)
    ]
    void onmove( void );
    [
    id(0x0000040C)
    ]
    VARIANT_BOOL oncontrolselect( void );
    [
    id(0x0000040E)
    ]
    VARIANT_BOOL onmovestart( void );
    [
    id(0x0000040F)
    ]
    void onmoveend( void );
    [
    id(0x00000410)
    ]
    VARIANT_BOOL onresizestart( void );
    [
    id(0x00000411)
    ]
    void onresizeend( void );
    [
    id(0x00000412)
    ]
    void onmouseenter( void );
    [
    id(0x00000413)
    ]
    void onmouseleave( void );
    [
    id(0x00000409)
    ]
    VARIANT_BOOL onmousewheel( void );
    [
    id(0x00000414)
    ]
    void onactivate( void );
    [
    id(0x00000415)
    ]
    void ondeactivate( void );
    [
    id(0x00000418)
    ]
    void onfocusin( void );
    [
    id(0x00000419)
    ]
    void onfocusout( void );
    [
    id(0x000003EB)
    ]
    void onload( void );
    [
    id(0x000003EA)
    ]
    void onerror( void );
    [
    id(0x000003E8)
    ]
    void onabort( void );
  };

  [
    uuid(3050F240-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLImgElement: IDispatch
  {
    [
    propput, 
    id(0x000007D2), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall isMap([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x000007D2), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall isMap([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x000007D8), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall useMap([in] BSTR p );
    [
    propget, 
    id(0x000007D8), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall useMap([out, retval] BSTR * p );
    [
    propget, 
    id(0x000007DA)
    ]
    HRESULT _stdcall mimeType([out, retval] BSTR * p );
    [
    propget, 
    id(0x000007DB)
    ]
    HRESULT _stdcall fileSize([out, retval] BSTR * p );
    [
    propget, 
    id(0x000007DC)
    ]
    HRESULT _stdcall fileCreatedDate([out, retval] BSTR * p );
    [
    propget, 
    id(0x000007DD)
    ]
    HRESULT _stdcall fileModifiedDate([out, retval] BSTR * p );
    [
    propget, 
    id(0x000007DE)
    ]
    HRESULT _stdcall fileUpdatedDate([out, retval] BSTR * p );
    [
    propget, 
    id(0x000007DF)
    ]
    HRESULT _stdcall protocol([out, retval] BSTR * p );
    [
    propget, 
    id(0x000007E0)
    ]
    HRESULT _stdcall href([out, retval] BSTR * p );
    [
    propget, 
    id(0x000007E1)
    ]
    HRESULT _stdcall nameProp([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003EC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall border([in] VARIANT p );
    [
    propget, 
    id(0x000003EC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall border([out, retval] VARIANT * p );
    [
    propput, 
    id(0x000003ED), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall vspace([in] long p );
    [
    propget, 
    id(0x000003ED), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall vspace([out, retval] long * p );
    [
    propput, 
    id(0x000003EE), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall hspace([in] long p );
    [
    propget, 
    id(0x000003EE), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall hspace([out, retval] long * p );
    [
    propput, 
    id(0x000003EA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall alt([in] BSTR p );
    [
    propget, 
    id(0x000003EA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall alt([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003EB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall src([in] BSTR p );
    [
    propget, 
    id(0x000003EB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall src([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003EF), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall lowsrc([in] BSTR p );
    [
    propget, 
    id(0x000003EF), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall lowsrc([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003F0), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall vrml([in] BSTR p );
    [
    propget, 
    id(0x000003F0), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall vrml([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003F1), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall dynsrc([in] BSTR p );
    [
    propget, 
    id(0x000003F1), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall dynsrc([out, retval] BSTR * p );
    [
    propget, 
    id(0x800113FC)
    ]
    HRESULT _stdcall readyState([out, retval] BSTR * p );
    [
    propget, 
    id(0x000003F2)
    ]
    HRESULT _stdcall complete([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x000003F3), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall loop([in] VARIANT p );
    [
    propget, 
    id(0x000003F3), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall loop([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80010049), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall align([in] BSTR p );
    [
    propget, 
    id(0x80010049), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall align([out, retval] BSTR * p );
    [
    propput, 
    id(0x80011790), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onload([in] VARIANT p );
    [
    propget, 
    id(0x80011790), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onload([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001178D), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onerror([in] VARIANT p );
    [
    propget, 
    id(0x8001178D), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onerror([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001178C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onabort([in] VARIANT p );
    [
    propget, 
    id(0x8001178C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onabort([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall name([in] BSTR p );
    [
    propget, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall name([out, retval] BSTR * p );
    [
    propput, 
    id(0x80010005)
    ]
    HRESULT _stdcall width([in] long p );
    [
    propget, 
    id(0x80010005)
    ]
    HRESULT _stdcall width([out, retval] long * p );
    [
    propput, 
    id(0x80010006)
    ]
    HRESULT _stdcall height([in] long p );
    [
    propget, 
    id(0x80010006)
    ]
    HRESULT _stdcall height([out, retval] long * p );
    [
    propput, 
    id(0x000003F5), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall Start([in] BSTR p );
    [
    propget, 
    id(0x000003F5), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall Start([out, retval] BSTR * p );
  };

  [
    uuid(3050F826-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLImgElement2: IDispatch
  {
    [
    propput, 
    id(0x000007E3), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall longDesc([in] BSTR p );
    [
    propget, 
    id(0x000007E3), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall longDesc([out, retval] BSTR * p );
  };

  [
    uuid(3050F241-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLImg
  {
    [default] dispinterface DispHTMLImg;
    [default, source] dispinterface HTMLImgEvents;
    [source] dispinterface HTMLImgEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLDatabinding;
    interface IHTMLControlElement;
    interface IHTMLImgElement;
    interface IHTMLImgElement2;
  };

  [
    uuid(3050F38F-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLImageElementFactory
  {
    [default] interface IHTMLImageElementFactory;
  };

  
  typedef enum tag_bodyScroll
  {
    bodyScrollyes = 1, 
    bodyScrollno = 2, 
    bodyScrollauto = 4, 
    bodyScrolldefault = 3, 
    bodyScroll_Max = 2147483647
  } _bodyScroll;

  [
    uuid(3050F5C5-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLBodyElement2: IDispatch
  {
    [
    propput, 
    id(0x800117B2), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onbeforeprint([in] VARIANT p );
    [
    propget, 
    id(0x800117B2), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onbeforeprint([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800117B3), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onafterprint([in] VARIANT p );
    [
    propget, 
    id(0x800117B3), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onafterprint([out, retval] VARIANT * p );
  };

  [
    uuid(3050F24A-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLBody
  {
    [default] dispinterface DispHTMLBody;
    [default, source] dispinterface HTMLTextContainerEvents;
    [source] dispinterface HTMLTextContainerEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLControlElement;
    interface IHTMLTextContainer;
    interface IHTMLBodyElement;
    interface IHTMLBodyElement2;
  };

  [
    uuid(3050F1D9-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLFontElement: IDispatch
  {
    [
    propput, 
    id(0x8001138A), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall color([in] VARIANT p );
    [
    propget, 
    id(0x8001138A), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall color([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001139A), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall face([in] BSTR p );
    [
    propget, 
    id(0x8001139A), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall face([out, retval] BSTR * p );
    [
    propput, 
    id(0x8001139B), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall size([in] VARIANT p );
    [
    propget, 
    id(0x8001139B), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall size([out, retval] VARIANT * p );
  };

  [
    uuid(3050F27B-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLFontElement
  {
    [default] dispinterface DispHTMLFontElement;
    [default, source] dispinterface HTMLElementEvents;
    [source] dispinterface HTMLElementEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLFontElement;
  };

  [
    uuid(3050F29D-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface HTMLAnchorEvents
  {
    properties:
    methods:
    [
    id(0x8001000A)
    ]
    VARIANT_BOOL onhelp( void );
    [
    id(0xFFFFFDA8)
    ]
    VARIANT_BOOL onclick( void );
    [
    id(0xFFFFFDA7)
    ]
    VARIANT_BOOL ondblclick( void );
    [
    id(0xFFFFFDA5)
    ]
    VARIANT_BOOL onkeypress( void );
    [
    id(0xFFFFFDA6)
    ]
    void onkeydown( void );
    [
    id(0xFFFFFDA4)
    ]
    void onkeyup( void );
    [
    id(0x80010009)
    ]
    void onmouseout( void );
    [
    id(0x80010008)
    ]
    void onmouseover( void );
    [
    id(0xFFFFFDA2)
    ]
    void onmousemove( void );
    [
    id(0xFFFFFDA3)
    ]
    void onmousedown( void );
    [
    id(0xFFFFFDA1)
    ]
    void onmouseup( void );
    [
    id(0x8001000C)
    ]
    VARIANT_BOOL onselectstart( void );
    [
    id(0x80010011)
    ]
    void onfilterchange( void );
    [
    id(0x8001000B)
    ]
    VARIANT_BOOL ondragstart( void );
    [
    id(0x80010004)
    ]
    VARIANT_BOOL onbeforeupdate( void );
    [
    id(0x80010005)
    ]
    void onafterupdate( void );
    [
    id(0x8001000D)
    ]
    VARIANT_BOOL onerrorupdate( void );
    [
    id(0x80010006)
    ]
    VARIANT_BOOL onrowexit( void );
    [
    id(0x80010007)
    ]
    void onrowenter( void );
    [
    id(0x8001000E)
    ]
    void ondatasetchanged( void );
    [
    id(0x8001000F)
    ]
    void ondataavailable( void );
    [
    id(0x80010010)
    ]
    void ondatasetcomplete( void );
    [
    id(0x80010012)
    ]
    void onlosecapture( void );
    [
    id(0x80010013)
    ]
    void onpropertychange( void );
    [
    id(0x000003F6)
    ]
    void onscroll( void );
    [
    id(0x80010001)
    ]
    void onfocus( void );
    [
    id(0x80010000)
    ]
    void onblur( void );
    [
    id(0x000003F8)
    ]
    void onresize( void );
    [
    id(0x80010014)
    ]
    VARIANT_BOOL ondrag( void );
    [
    id(0x80010015)
    ]
    void ondragend( void );
    [
    id(0x80010016)
    ]
    VARIANT_BOOL ondragenter( void );
    [
    id(0x80010017)
    ]
    VARIANT_BOOL ondragover( void );
    [
    id(0x80010018)
    ]
    void ondragleave( void );
    [
    id(0x80010019)
    ]
    VARIANT_BOOL ondrop( void );
    [
    id(0x8001001D)
    ]
    VARIANT_BOOL onbeforecut( void );
    [
    id(0x8001001A)
    ]
    VARIANT_BOOL oncut( void );
    [
    id(0x8001001E)
    ]
    VARIANT_BOOL onbeforecopy( void );
    [
    id(0x8001001B)
    ]
    VARIANT_BOOL oncopy( void );
    [
    id(0x8001001F)
    ]
    VARIANT_BOOL onbeforepaste( void );
    [
    id(0x8001001C)
    ]
    VARIANT_BOOL onpaste( void );
    [
    id(0x000003FF)
    ]
    VARIANT_BOOL oncontextmenu( void );
    [
    id(0x80010020)
    ]
    void onrowsdelete( void );
    [
    id(0x80010021)
    ]
    void onrowsinserted( void );
    [
    id(0x80010022)
    ]
    void oncellchange( void );
    [
    id(0xFFFFFD9F)
    ]
    void onreadystatechange( void );
    [
    id(0x00000403)
    ]
    void onbeforeeditfocus( void );
    [
    id(0x00000406)
    ]
    void onlayoutcomplete( void );
    [
    id(0x00000407)
    ]
    void onpage( void );
    [
    id(0x0000040A)
    ]
    VARIANT_BOOL onbeforedeactivate( void );
    [
    id(0x00000417)
    ]
    VARIANT_BOOL onbeforeactivate( void );
    [
    id(0x0000040B)
    ]
    void onmove( void );
    [
    id(0x0000040C)
    ]
    VARIANT_BOOL oncontrolselect( void );
    [
    id(0x0000040E)
    ]
    VARIANT_BOOL onmovestart( void );
    [
    id(0x0000040F)
    ]
    void onmoveend( void );
    [
    id(0x00000410)
    ]
    VARIANT_BOOL onresizestart( void );
    [
    id(0x00000411)
    ]
    void onresizeend( void );
    [
    id(0x00000412)
    ]
    void onmouseenter( void );
    [
    id(0x00000413)
    ]
    void onmouseleave( void );
    [
    id(0x00000409)
    ]
    VARIANT_BOOL onmousewheel( void );
    [
    id(0x00000414)
    ]
    void onactivate( void );
    [
    id(0x00000415)
    ]
    void ondeactivate( void );
    [
    id(0x00000418)
    ]
    void onfocusin( void );
    [
    id(0x00000419)
    ]
    void onfocusout( void );
  };

  [
    uuid(3050F1DA-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLAnchorElement: IDispatch
  {
    [
    propput, 
    id(0x00000000), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall href([in] BSTR p );
    [
    propget, 
    id(0x00000000), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall href([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003EB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall target([in] BSTR p );
    [
    propget, 
    id(0x000003EB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall target([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003ED), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall rel([in] BSTR p );
    [
    propget, 
    id(0x000003ED), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall rel([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003EE), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall rev([in] BSTR p );
    [
    propget, 
    id(0x000003EE), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall rev([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003EF), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall urn([in] BSTR p );
    [
    propget, 
    id(0x000003EF), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall urn([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003F0), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall Methods([in] BSTR p );
    [
    propget, 
    id(0x000003F0), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall Methods([out, retval] BSTR * p );
    [
    propput, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall name([in] BSTR p );
    [
    propget, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall name([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003F4)
    ]
    HRESULT _stdcall host([in] BSTR p );
    [
    propget, 
    id(0x000003F4)
    ]
    HRESULT _stdcall host([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003F5)
    ]
    HRESULT _stdcall hostname([in] BSTR p );
    [
    propget, 
    id(0x000003F5)
    ]
    HRESULT _stdcall hostname([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003F6)
    ]
    HRESULT _stdcall pathname([in] BSTR p );
    [
    propget, 
    id(0x000003F6)
    ]
    HRESULT _stdcall pathname([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003F7)
    ]
    HRESULT _stdcall port([in] BSTR p );
    [
    propget, 
    id(0x000003F7)
    ]
    HRESULT _stdcall port([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003F8)
    ]
    HRESULT _stdcall protocol([in] BSTR p );
    [
    propget, 
    id(0x000003F8)
    ]
    HRESULT _stdcall protocol([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003F9)
    ]
    HRESULT _stdcall search([in] BSTR p );
    [
    propget, 
    id(0x000003F9)
    ]
    HRESULT _stdcall search([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003FA)
    ]
    HRESULT _stdcall hash([in] BSTR p );
    [
    propget, 
    id(0x000003FA)
    ]
    HRESULT _stdcall hash([out, retval] BSTR * p );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onblur([in] VARIANT p );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onblur([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onfocus([in] VARIANT p );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onfocus([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall accessKey([in] BSTR p );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall accessKey([out, retval] BSTR * p );
    [
    propget, 
    id(0x00000407)
    ]
    HRESULT _stdcall protocolLong([out, retval] BSTR * p );
    [
    propget, 
    id(0x00000406)
    ]
    HRESULT _stdcall mimeType([out, retval] BSTR * p );
    [
    propget, 
    id(0x00000408)
    ]
    HRESULT _stdcall nameProp([out, retval] BSTR * p );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall tabIndex([in] short p );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall tabIndex([out, retval] short * p );
    [
    id(0x800107D0)
    ]
    HRESULT _stdcall focus( void );
    [
    id(0x800107D2)
    ]
    HRESULT _stdcall blur( void );
  };

  [
    uuid(3050F825-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLAnchorElement2: IDispatch
  {
    [
    propput, 
    id(0x000003FF), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall charset([in] BSTR p );
    [
    propget, 
    id(0x000003FF), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall charset([out, retval] BSTR * p );
    [
    propput, 
    id(0x00000400), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall coords([in] BSTR p );
    [
    propget, 
    id(0x00000400), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall coords([out, retval] BSTR * p );
    [
    propput, 
    id(0x00000401), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall hreflang([in] BSTR p );
    [
    propget, 
    id(0x00000401), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall hreflang([out, retval] BSTR * p );
    [
    propput, 
    id(0x00000402), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall shape([in] BSTR p );
    [
    propget, 
    id(0x00000402), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall shape([out, retval] BSTR * p );
    [
    propput, 
    id(0x00000403), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall type([in] BSTR p );
    [
    propget, 
    id(0x00000403), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall type([out, retval] BSTR * p );
  };

  [
    uuid(3050F248-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLAnchorElement
  {
    [default] dispinterface DispHTMLAnchorElement;
    [default, source] dispinterface HTMLAnchorEvents;
    [source] dispinterface HTMLAnchorEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLDatabinding;
    interface IHTMLAnchorElement;
    interface IHTMLAnchorElement2;
  };

  [
    uuid(3050F329-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface HTMLLabelEvents
  {
    properties:
    methods:
    [
    id(0x8001000A)
    ]
    VARIANT_BOOL onhelp( void );
    [
    id(0xFFFFFDA8)
    ]
    VARIANT_BOOL onclick( void );
    [
    id(0xFFFFFDA7)
    ]
    VARIANT_BOOL ondblclick( void );
    [
    id(0xFFFFFDA5)
    ]
    VARIANT_BOOL onkeypress( void );
    [
    id(0xFFFFFDA6)
    ]
    void onkeydown( void );
    [
    id(0xFFFFFDA4)
    ]
    void onkeyup( void );
    [
    id(0x80010009)
    ]
    void onmouseout( void );
    [
    id(0x80010008)
    ]
    void onmouseover( void );
    [
    id(0xFFFFFDA2)
    ]
    void onmousemove( void );
    [
    id(0xFFFFFDA3)
    ]
    void onmousedown( void );
    [
    id(0xFFFFFDA1)
    ]
    void onmouseup( void );
    [
    id(0x8001000C)
    ]
    VARIANT_BOOL onselectstart( void );
    [
    id(0x80010011)
    ]
    void onfilterchange( void );
    [
    id(0x8001000B)
    ]
    VARIANT_BOOL ondragstart( void );
    [
    id(0x80010004)
    ]
    VARIANT_BOOL onbeforeupdate( void );
    [
    id(0x80010005)
    ]
    void onafterupdate( void );
    [
    id(0x8001000D)
    ]
    VARIANT_BOOL onerrorupdate( void );
    [
    id(0x80010006)
    ]
    VARIANT_BOOL onrowexit( void );
    [
    id(0x80010007)
    ]
    void onrowenter( void );
    [
    id(0x8001000E)
    ]
    void ondatasetchanged( void );
    [
    id(0x8001000F)
    ]
    void ondataavailable( void );
    [
    id(0x80010010)
    ]
    void ondatasetcomplete( void );
    [
    id(0x80010012)
    ]
    void onlosecapture( void );
    [
    id(0x80010013)
    ]
    void onpropertychange( void );
    [
    id(0x000003F6)
    ]
    void onscroll( void );
    [
    id(0x80010001)
    ]
    void onfocus( void );
    [
    id(0x80010000)
    ]
    void onblur( void );
    [
    id(0x000003F8)
    ]
    void onresize( void );
    [
    id(0x80010014)
    ]
    VARIANT_BOOL ondrag( void );
    [
    id(0x80010015)
    ]
    void ondragend( void );
    [
    id(0x80010016)
    ]
    VARIANT_BOOL ondragenter( void );
    [
    id(0x80010017)
    ]
    VARIANT_BOOL ondragover( void );
    [
    id(0x80010018)
    ]
    void ondragleave( void );
    [
    id(0x80010019)
    ]
    VARIANT_BOOL ondrop( void );
    [
    id(0x8001001D)
    ]
    VARIANT_BOOL onbeforecut( void );
    [
    id(0x8001001A)
    ]
    VARIANT_BOOL oncut( void );
    [
    id(0x8001001E)
    ]
    VARIANT_BOOL onbeforecopy( void );
    [
    id(0x8001001B)
    ]
    VARIANT_BOOL oncopy( void );
    [
    id(0x8001001F)
    ]
    VARIANT_BOOL onbeforepaste( void );
    [
    id(0x8001001C)
    ]
    VARIANT_BOOL onpaste( void );
    [
    id(0x000003FF)
    ]
    VARIANT_BOOL oncontextmenu( void );
    [
    id(0x80010020)
    ]
    void onrowsdelete( void );
    [
    id(0x80010021)
    ]
    void onrowsinserted( void );
    [
    id(0x80010022)
    ]
    void oncellchange( void );
    [
    id(0xFFFFFD9F)
    ]
    void onreadystatechange( void );
    [
    id(0x00000403)
    ]
    void onbeforeeditfocus( void );
    [
    id(0x00000406)
    ]
    void onlayoutcomplete( void );
    [
    id(0x00000407)
    ]
    void onpage( void );
    [
    id(0x0000040A)
    ]
    VARIANT_BOOL onbeforedeactivate( void );
    [
    id(0x00000417)
    ]
    VARIANT_BOOL onbeforeactivate( void );
    [
    id(0x0000040B)
    ]
    void onmove( void );
    [
    id(0x0000040C)
    ]
    VARIANT_BOOL oncontrolselect( void );
    [
    id(0x0000040E)
    ]
    VARIANT_BOOL onmovestart( void );
    [
    id(0x0000040F)
    ]
    void onmoveend( void );
    [
    id(0x00000410)
    ]
    VARIANT_BOOL onresizestart( void );
    [
    id(0x00000411)
    ]
    void onresizeend( void );
    [
    id(0x00000412)
    ]
    void onmouseenter( void );
    [
    id(0x00000413)
    ]
    void onmouseleave( void );
    [
    id(0x00000409)
    ]
    VARIANT_BOOL onmousewheel( void );
    [
    id(0x00000414)
    ]
    void onactivate( void );
    [
    id(0x00000415)
    ]
    void ondeactivate( void );
    [
    id(0x00000418)
    ]
    void onfocusin( void );
    [
    id(0x00000419)
    ]
    void onfocusout( void );
  };

  [
    uuid(3050F32A-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLLabelElement: IDispatch
  {
    [
    propput, 
    id(0x000003E8), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall htmlFor([in] BSTR p );
    [
    propget, 
    id(0x000003E8), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall htmlFor([out, retval] BSTR * p );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall accessKey([in] BSTR p );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall accessKey([out, retval] BSTR * p );
  };

  [
    uuid(3050F32B-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLLabelElement
  {
    [default] dispinterface DispHTMLLabelElement;
    [default, source] dispinterface HTMLLabelEvents;
    [source] dispinterface HTMLLabelEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLDatabinding;
    interface IHTMLLabelElement;
    interface IHTMLLabelElement2;
  };

  [
    uuid(3050F20E-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLListElement: IDispatch
  {
  };

  [
    uuid(3050F822-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLListElement2: IDispatch
  {
    [
    propput, 
    id(0x000003E9), 
    bindable
    ]
    HRESULT _stdcall compact([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x000003E9), 
    bindable
    ]
    HRESULT _stdcall compact([out, retval] VARIANT_BOOL * p );
  };

  [
    uuid(3050F272-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLListElement
  {
    [default] dispinterface DispHTMLListElement;
    [default, source] dispinterface HTMLElementEvents;
    [source] dispinterface HTMLElementEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLListElement;
    interface IHTMLListElement2;
  };

  [
    uuid(3050F1DD-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLUListElement: IDispatch
  {
    [
    propput, 
    id(0x000003E9), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall compact([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x000003E9), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall compact([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x80011399), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall type([in] BSTR p );
    [
    propget, 
    id(0x80011399), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall type([out, retval] BSTR * p );
  };

  [
    uuid(3050F269-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLUListElement
  {
    [default] dispinterface DispHTMLUListElement;
    [default, source] dispinterface HTMLElementEvents;
    [source] dispinterface HTMLElementEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLListElement;
    interface IHTMLListElement2;
    interface IHTMLUListElement;
  };

  [
    uuid(3050F1DE-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLOListElement: IDispatch
  {
    [
    propput, 
    id(0x000003E9), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall compact([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x000003E9), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall compact([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x000003EB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall Start([in] long p );
    [
    propget, 
    id(0x000003EB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall Start([out, retval] long * p );
    [
    propput, 
    id(0x80011399), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall type([in] BSTR p );
    [
    propget, 
    id(0x80011399), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall type([out, retval] BSTR * p );
  };

  [
    uuid(3050F270-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLOListElement
  {
    [default] dispinterface DispHTMLOListElement;
    [default, source] dispinterface HTMLElementEvents;
    [source] dispinterface HTMLElementEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLListElement;
    interface IHTMLListElement2;
    interface IHTMLOListElement;
  };

  [
    uuid(3050F1E0-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLLIElement: IDispatch
  {
    [
    propput, 
    id(0x80011399), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall type([in] BSTR p );
    [
    propget, 
    id(0x80011399), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall type([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003E9), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall value([in] long p );
    [
    propget, 
    id(0x000003E9), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall value([out, retval] long * p );
  };

  [
    uuid(3050F273-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLLIElement
  {
    [default] dispinterface DispHTMLLIElement;
    [default, source] dispinterface HTMLElementEvents;
    [source] dispinterface HTMLElementEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLLIElement;
  };

  [
    uuid(3050F208-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLBlockElement: IDispatch
  {
    [
    propput, 
    id(0x80011398), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall clear([in] BSTR p );
    [
    propget, 
    id(0x80011398), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall clear([out, retval] BSTR * p );
  };

  [
    uuid(3050F823-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLBlockElement2: IDispatch
  {
    [
    propput, 
    id(0x000003E9), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall cite([in] BSTR p );
    [
    propget, 
    id(0x000003E9), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall cite([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003EA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall width([in] BSTR p );
    [
    propget, 
    id(0x000003EA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall width([out, retval] BSTR * p );
  };

  [
    uuid(3050F281-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLBlockElement
  {
    [default] dispinterface DispHTMLBlockElement;
    [default, source] dispinterface HTMLElementEvents;
    [source] dispinterface HTMLElementEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLBlockElement;
    interface IHTMLBlockElement2;
  };

  [
    uuid(3050F200-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLDivElement: IDispatch
  {
    [
    propput, 
    id(0x80010048), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall align([in] BSTR p );
    [
    propget, 
    id(0x80010048), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall align([out, retval] BSTR * p );
    [
    propput, 
    id(0x8001138D), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall noWrap([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x8001138D), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall noWrap([out, retval] VARIANT_BOOL * p );
  };

  [
    uuid(3050F27E-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLDivElement
  {
    [default] dispinterface DispHTMLDivElement;
    [default, source] dispinterface HTMLElementEvents;
    [source] dispinterface HTMLTextContainerEvents;
    [source] dispinterface HTMLElementEvents2;
    [source] dispinterface HTMLTextContainerEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLDatabinding;
    interface IHTMLDivElement;
    interface IHTMLControlElement;
    interface IHTMLTextContainer;
  };

  [
    uuid(3050F1F2-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLDDElement: IDispatch
  {
    [
    propput, 
    id(0x8001138D), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall noWrap([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x8001138D), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall noWrap([out, retval] VARIANT_BOOL * p );
  };

  [
    uuid(3050F27F-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLDDElement
  {
    [default] dispinterface DispHTMLDDElement;
    [default, source] dispinterface HTMLElementEvents;
    [source] dispinterface HTMLElementEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLDDElement;
  };

  [
    uuid(3050F1F3-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLDTElement: IDispatch
  {
    [
    propput, 
    id(0x8001138D), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall noWrap([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x8001138D), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall noWrap([out, retval] VARIANT_BOOL * p );
  };

  [
    uuid(3050F27C-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLDTElement
  {
    [default] dispinterface DispHTMLDTElement;
    [default, source] dispinterface HTMLElementEvents;
    [source] dispinterface HTMLElementEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLDTElement;
  };

  [
    uuid(3050F1F0-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLBRElement: IDispatch
  {
    [
    propput, 
    id(0x80011398), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall clear([in] BSTR p );
    [
    propget, 
    id(0x80011398), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall clear([out, retval] BSTR * p );
  };

  [
    uuid(3050F280-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLBRElement
  {
    [default] dispinterface DispHTMLBRElement;
    [default, source] dispinterface HTMLElementEvents;
    [source] dispinterface HTMLElementEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLBRElement;
  };

  [
    uuid(3050F1F1-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLDListElement: IDispatch
  {
    [
    propput, 
    id(0x000003E9), 
    bindable
    ]
    HRESULT _stdcall compact([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x000003E9), 
    bindable
    ]
    HRESULT _stdcall compact([out, retval] VARIANT_BOOL * p );
  };

  [
    uuid(3050F27D-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLDListElement
  {
    [default] dispinterface DispHTMLDListElement;
    [default, source] dispinterface HTMLElementEvents;
    [source] dispinterface HTMLElementEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLListElement;
    interface IHTMLListElement2;
    interface IHTMLDListElement;
  };

  [
    uuid(3050F1F4-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLHRElement: IDispatch
  {
    [
    propput, 
    id(0x80010048), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall align([in] BSTR p );
    [
    propget, 
    id(0x80010048), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall align([out, retval] BSTR * p );
    [
    propput, 
    id(0x8001138A), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall color([in] VARIANT p );
    [
    propget, 
    id(0x8001138A), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall color([out, retval] VARIANT * p );
    [
    propput, 
    id(0x000003E9), 
    bindable
    ]
    HRESULT _stdcall noShade([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x000003E9), 
    bindable
    ]
    HRESULT _stdcall noShade([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x80010005)
    ]
    HRESULT _stdcall width([in] VARIANT p );
    [
    propget, 
    id(0x80010005)
    ]
    HRESULT _stdcall width([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80010006)
    ]
    HRESULT _stdcall size([in] VARIANT p );
    [
    propget, 
    id(0x80010006)
    ]
    HRESULT _stdcall size([out, retval] VARIANT * p );
  };

  [
    uuid(3050F252-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLHRElement
  {
    [default] dispinterface DispHTMLHRElement;
    [default, source] dispinterface HTMLElementEvents;
    [source] dispinterface HTMLElementEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLHRElement;
  };

  [
    uuid(3050F1F5-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLParaElement: IDispatch
  {
    [
    propput, 
    id(0x80010048), 
    bindable
    ]
    HRESULT _stdcall align([in] BSTR p );
    [
    propget, 
    id(0x80010048), 
    bindable
    ]
    HRESULT _stdcall align([out, retval] BSTR * p );
  };

  [
    uuid(3050F26F-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLParaElement
  {
    [default] dispinterface DispHTMLParaElement;
    [default, source] dispinterface HTMLElementEvents;
    [source] dispinterface HTMLElementEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLBlockElement;
    interface IHTMLParaElement;
  };

  [
    uuid(3050F5EE-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLElementCollection2: IDispatch
  {
    [
    id(0x000005E1)
    ]
    HRESULT _stdcall urns([in] VARIANT urn, [out, retval]  IDispatch ** pdisp );
  };

  [
    uuid(3050F835-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLElementCollection3: IDispatch
  {
    [
    id(0x000005E2)
    ]
    HRESULT _stdcall namedItem([in] BSTR name, [out, retval]  IDispatch ** pdisp );
  };

  [
    uuid(3050F56B-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLElementCollection
  {
    properties:
    methods:
    [
    id(0x000005DD)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x000005DC)
    ]
    void length(long Param1 );
    [
    propget, 
    id(0x000005DC)
    ]
    long length( void );
    [
    propget, 
    id(0xFFFFFFFC), 
    restricted, 
    hidden
    ]
     IUnknown * _newEnum( void );
    [
    id(0x00000000)
    ]
     IDispatch * item([in, optional] VARIANT name, [in, optional] VARIANT index );
    [
    id(0x000005DE)
    ]
     IDispatch * tags([in] VARIANT tagName );
    [
    id(0x000005E1)
    ]
     IDispatch * urns([in] VARIANT urn );
    [
    id(0x000005E2)
    ]
     IDispatch * namedItem([in] BSTR name );
  };

  [
    uuid(3050F4CB-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLElementCollection
  {
    [default] dispinterface DispHTMLElementCollection;
    interface IHTMLElementCollection;
    interface IHTMLElementCollection2;
    interface IHTMLElementCollection3;
  };

  [
    uuid(3050F1F6-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLHeaderElement: IDispatch
  {
    [
    propput, 
    id(0x80010048), 
    bindable
    ]
    HRESULT _stdcall align([in] BSTR p );
    [
    propget, 
    id(0x80010048), 
    bindable
    ]
    HRESULT _stdcall align([out, retval] BSTR * p );
  };

  [
    uuid(3050F27A-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLHeaderElement
  {
    [default] dispinterface DispHTMLHeaderElement;
    [default, source] dispinterface HTMLElementEvents;
    [source] dispinterface HTMLElementEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLBlockElement;
    interface IHTMLHeaderElement;
  };

  [
    uuid(3050F302-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface HTMLSelectElementEvents
  {
    properties:
    methods:
    [
    id(0x8001000A)
    ]
    VARIANT_BOOL onhelp( void );
    [
    id(0xFFFFFDA8)
    ]
    VARIANT_BOOL onclick( void );
    [
    id(0xFFFFFDA7)
    ]
    VARIANT_BOOL ondblclick( void );
    [
    id(0xFFFFFDA5)
    ]
    VARIANT_BOOL onkeypress( void );
    [
    id(0xFFFFFDA6)
    ]
    void onkeydown( void );
    [
    id(0xFFFFFDA4)
    ]
    void onkeyup( void );
    [
    id(0x80010009)
    ]
    void onmouseout( void );
    [
    id(0x80010008)
    ]
    void onmouseover( void );
    [
    id(0xFFFFFDA2)
    ]
    void onmousemove( void );
    [
    id(0xFFFFFDA3)
    ]
    void onmousedown( void );
    [
    id(0xFFFFFDA1)
    ]
    void onmouseup( void );
    [
    id(0x8001000C)
    ]
    VARIANT_BOOL onselectstart( void );
    [
    id(0x80010011)
    ]
    void onfilterchange( void );
    [
    id(0x8001000B)
    ]
    VARIANT_BOOL ondragstart( void );
    [
    id(0x80010004)
    ]
    VARIANT_BOOL onbeforeupdate( void );
    [
    id(0x80010005)
    ]
    void onafterupdate( void );
    [
    id(0x8001000D)
    ]
    VARIANT_BOOL onerrorupdate( void );
    [
    id(0x80010006)
    ]
    VARIANT_BOOL onrowexit( void );
    [
    id(0x80010007)
    ]
    void onrowenter( void );
    [
    id(0x8001000E)
    ]
    void ondatasetchanged( void );
    [
    id(0x8001000F)
    ]
    void ondataavailable( void );
    [
    id(0x80010010)
    ]
    void ondatasetcomplete( void );
    [
    id(0x80010012)
    ]
    void onlosecapture( void );
    [
    id(0x80010013)
    ]
    void onpropertychange( void );
    [
    id(0x000003F6)
    ]
    void onscroll( void );
    [
    id(0x80010001)
    ]
    void onfocus( void );
    [
    id(0x80010000)
    ]
    void onblur( void );
    [
    id(0x000003F8)
    ]
    void onresize( void );
    [
    id(0x80010014)
    ]
    VARIANT_BOOL ondrag( void );
    [
    id(0x80010015)
    ]
    void ondragend( void );
    [
    id(0x80010016)
    ]
    VARIANT_BOOL ondragenter( void );
    [
    id(0x80010017)
    ]
    VARIANT_BOOL ondragover( void );
    [
    id(0x80010018)
    ]
    void ondragleave( void );
    [
    id(0x80010019)
    ]
    VARIANT_BOOL ondrop( void );
    [
    id(0x8001001D)
    ]
    VARIANT_BOOL onbeforecut( void );
    [
    id(0x8001001A)
    ]
    VARIANT_BOOL oncut( void );
    [
    id(0x8001001E)
    ]
    VARIANT_BOOL onbeforecopy( void );
    [
    id(0x8001001B)
    ]
    VARIANT_BOOL oncopy( void );
    [
    id(0x8001001F)
    ]
    VARIANT_BOOL onbeforepaste( void );
    [
    id(0x8001001C)
    ]
    VARIANT_BOOL onpaste( void );
    [
    id(0x000003FF)
    ]
    VARIANT_BOOL oncontextmenu( void );
    [
    id(0x80010020)
    ]
    void onrowsdelete( void );
    [
    id(0x80010021)
    ]
    void onrowsinserted( void );
    [
    id(0x80010022)
    ]
    void oncellchange( void );
    [
    id(0xFFFFFD9F)
    ]
    void onreadystatechange( void );
    [
    id(0x00000403)
    ]
    void onbeforeeditfocus( void );
    [
    id(0x00000406)
    ]
    void onlayoutcomplete( void );
    [
    id(0x00000407)
    ]
    void onpage( void );
    [
    id(0x0000040A)
    ]
    VARIANT_BOOL onbeforedeactivate( void );
    [
    id(0x00000417)
    ]
    VARIANT_BOOL onbeforeactivate( void );
    [
    id(0x0000040B)
    ]
    void onmove( void );
    [
    id(0x0000040C)
    ]
    VARIANT_BOOL oncontrolselect( void );
    [
    id(0x0000040E)
    ]
    VARIANT_BOOL onmovestart( void );
    [
    id(0x0000040F)
    ]
    void onmoveend( void );
    [
    id(0x00000410)
    ]
    VARIANT_BOOL onresizestart( void );
    [
    id(0x00000411)
    ]
    void onresizeend( void );
    [
    id(0x00000412)
    ]
    void onmouseenter( void );
    [
    id(0x00000413)
    ]
    void onmouseleave( void );
    [
    id(0x00000409)
    ]
    VARIANT_BOOL onmousewheel( void );
    [
    id(0x00000414)
    ]
    void onactivate( void );
    [
    id(0x00000415)
    ]
    void ondeactivate( void );
    [
    id(0x00000418)
    ]
    void onfocusin( void );
    [
    id(0x00000419)
    ]
    void onfocusout( void );
    [
    id(0x000003E9)
    ]
    void onchange( void );
  };

  
  typedef enum tag_htmlSelectType
  {
    htmlSelectTypeSelectOne = 1, 
    htmlSelectTypeSelectMultiple = 2, 
    htmlSelectType_Max = 2147483647
  } _htmlSelectType;

  [
    uuid(3050F5ED-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLSelectElement2: IDispatch
  {
    [
    id(0x000005E1)
    ]
    HRESULT _stdcall urns([in] VARIANT urn, [out, retval]  IDispatch ** pdisp );
  };

  [
    uuid(3050F838-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLSelectElement4: IDispatch
  {
    [
    id(0x000005E2)
    ]
    HRESULT _stdcall namedItem([in] BSTR name, [out, retval]  IDispatch ** pdisp );
  };

  [
    uuid(3050F245-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLSelectElement
  {
    [default] dispinterface DispHTMLSelectElement;
    [default, source] dispinterface HTMLSelectElementEvents;
    [source] dispinterface HTMLSelectElementEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLDatabinding;
    interface IHTMLControlElement;
    interface IHTMLSelectElement;
    interface IHTMLSelectElement2;
    interface IHTMLSelectElement4;
  };

  
  typedef enum tag_htmlSelection
  {
    htmlSelectionNone = 0, 
    htmlSelectionText = 1, 
    htmlSelectionControl = 2, 
    htmlSelectionTable = 3, 
    htmlSelection_Max = 2147483647
  } _htmlSelection;

  [
    uuid(3050F25A-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLSelectionObject: IDispatch
  {
    [
    id(0x000003E9)
    ]
    HRESULT _stdcall createRange([out, retval]  IDispatch ** range );
    [
    id(0x000003EA)
    ]
    HRESULT _stdcall empty( void );
    [
    id(0x000003EB)
    ]
    HRESULT _stdcall clear( void );
    [
    propget, 
    id(0x000003EC)
    ]
    HRESULT _stdcall type([out, retval] BSTR * p );
  };

  [
    uuid(3050F7EC-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLSelectionObject2: IDispatch
  {
    [
    id(0x000003ED)
    ]
    HRESULT _stdcall createRangeCollection([out, retval]  IDispatch ** rangeCollection );
    [
    propget, 
    id(0x000003EE)
    ]
    HRESULT _stdcall typeDetail([out, retval] BSTR * p );
  };

  [
    uuid(3050F820-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLOptionElement3: IDispatch
  {
    [
    propput, 
    id(0x000003EF), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall label([in] BSTR p );
    [
    propget, 
    id(0x000003EF), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall label([out, retval] BSTR * p );
  };

  [
    uuid(3050F24D-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLOptionElement
  {
    [default] dispinterface DispHTMLOptionElement;
    [default, source] dispinterface HTMLElementEvents;
    [source] dispinterface HTMLElementEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLDatabinding;
    interface IHTMLOptionElement;
    interface IHTMLOptionElement3;
  };

  [
    uuid(3050F38D-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLOptionElementFactory
  {
    [default] interface IHTMLOptionElementFactory;
  };

  [
    uuid(3050F2B3-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface HTMLButtonElementEvents
  {
    properties:
    methods:
    [
    id(0x8001000A)
    ]
    VARIANT_BOOL onhelp( void );
    [
    id(0xFFFFFDA8)
    ]
    VARIANT_BOOL onclick( void );
    [
    id(0xFFFFFDA7)
    ]
    VARIANT_BOOL ondblclick( void );
    [
    id(0xFFFFFDA5)
    ]
    VARIANT_BOOL onkeypress( void );
    [
    id(0xFFFFFDA6)
    ]
    void onkeydown( void );
    [
    id(0xFFFFFDA4)
    ]
    void onkeyup( void );
    [
    id(0x80010009)
    ]
    void onmouseout( void );
    [
    id(0x80010008)
    ]
    void onmouseover( void );
    [
    id(0xFFFFFDA2)
    ]
    void onmousemove( void );
    [
    id(0xFFFFFDA3)
    ]
    void onmousedown( void );
    [
    id(0xFFFFFDA1)
    ]
    void onmouseup( void );
    [
    id(0x8001000C)
    ]
    VARIANT_BOOL onselectstart( void );
    [
    id(0x80010011)
    ]
    void onfilterchange( void );
    [
    id(0x8001000B)
    ]
    VARIANT_BOOL ondragstart( void );
    [
    id(0x80010004)
    ]
    VARIANT_BOOL onbeforeupdate( void );
    [
    id(0x80010005)
    ]
    void onafterupdate( void );
    [
    id(0x8001000D)
    ]
    VARIANT_BOOL onerrorupdate( void );
    [
    id(0x80010006)
    ]
    VARIANT_BOOL onrowexit( void );
    [
    id(0x80010007)
    ]
    void onrowenter( void );
    [
    id(0x8001000E)
    ]
    void ondatasetchanged( void );
    [
    id(0x8001000F)
    ]
    void ondataavailable( void );
    [
    id(0x80010010)
    ]
    void ondatasetcomplete( void );
    [
    id(0x80010012)
    ]
    void onlosecapture( void );
    [
    id(0x80010013)
    ]
    void onpropertychange( void );
    [
    id(0x000003F6)
    ]
    void onscroll( void );
    [
    id(0x80010001)
    ]
    void onfocus( void );
    [
    id(0x80010000)
    ]
    void onblur( void );
    [
    id(0x000003F8)
    ]
    void onresize( void );
    [
    id(0x80010014)
    ]
    VARIANT_BOOL ondrag( void );
    [
    id(0x80010015)
    ]
    void ondragend( void );
    [
    id(0x80010016)
    ]
    VARIANT_BOOL ondragenter( void );
    [
    id(0x80010017)
    ]
    VARIANT_BOOL ondragover( void );
    [
    id(0x80010018)
    ]
    void ondragleave( void );
    [
    id(0x80010019)
    ]
    VARIANT_BOOL ondrop( void );
    [
    id(0x8001001D)
    ]
    VARIANT_BOOL onbeforecut( void );
    [
    id(0x8001001A)
    ]
    VARIANT_BOOL oncut( void );
    [
    id(0x8001001E)
    ]
    VARIANT_BOOL onbeforecopy( void );
    [
    id(0x8001001B)
    ]
    VARIANT_BOOL oncopy( void );
    [
    id(0x8001001F)
    ]
    VARIANT_BOOL onbeforepaste( void );
    [
    id(0x8001001C)
    ]
    VARIANT_BOOL onpaste( void );
    [
    id(0x000003FF)
    ]
    VARIANT_BOOL oncontextmenu( void );
    [
    id(0x80010020)
    ]
    void onrowsdelete( void );
    [
    id(0x80010021)
    ]
    void onrowsinserted( void );
    [
    id(0x80010022)
    ]
    void oncellchange( void );
    [
    id(0xFFFFFD9F)
    ]
    void onreadystatechange( void );
    [
    id(0x00000403)
    ]
    void onbeforeeditfocus( void );
    [
    id(0x00000406)
    ]
    void onlayoutcomplete( void );
    [
    id(0x00000407)
    ]
    void onpage( void );
    [
    id(0x0000040A)
    ]
    VARIANT_BOOL onbeforedeactivate( void );
    [
    id(0x00000417)
    ]
    VARIANT_BOOL onbeforeactivate( void );
    [
    id(0x0000040B)
    ]
    void onmove( void );
    [
    id(0x0000040C)
    ]
    VARIANT_BOOL oncontrolselect( void );
    [
    id(0x0000040E)
    ]
    VARIANT_BOOL onmovestart( void );
    [
    id(0x0000040F)
    ]
    void onmoveend( void );
    [
    id(0x00000410)
    ]
    VARIANT_BOOL onresizestart( void );
    [
    id(0x00000411)
    ]
    void onresizeend( void );
    [
    id(0x00000412)
    ]
    void onmouseenter( void );
    [
    id(0x00000413)
    ]
    void onmouseleave( void );
    [
    id(0x00000409)
    ]
    VARIANT_BOOL onmousewheel( void );
    [
    id(0x00000414)
    ]
    void onactivate( void );
    [
    id(0x00000415)
    ]
    void ondeactivate( void );
    [
    id(0x00000418)
    ]
    void onfocusin( void );
    [
    id(0x00000419)
    ]
    void onfocusout( void );
  };

  [
    uuid(3050F2A7-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface HTMLInputTextElementEvents
  {
    properties:
    methods:
    [
    id(0x8001000A)
    ]
    VARIANT_BOOL onhelp( void );
    [
    id(0xFFFFFDA8)
    ]
    VARIANT_BOOL onclick( void );
    [
    id(0xFFFFFDA7)
    ]
    VARIANT_BOOL ondblclick( void );
    [
    id(0xFFFFFDA5)
    ]
    VARIANT_BOOL onkeypress( void );
    [
    id(0xFFFFFDA6)
    ]
    void onkeydown( void );
    [
    id(0xFFFFFDA4)
    ]
    void onkeyup( void );
    [
    id(0x80010009)
    ]
    void onmouseout( void );
    [
    id(0x80010008)
    ]
    void onmouseover( void );
    [
    id(0xFFFFFDA2)
    ]
    void onmousemove( void );
    [
    id(0xFFFFFDA3)
    ]
    void onmousedown( void );
    [
    id(0xFFFFFDA1)
    ]
    void onmouseup( void );
    [
    id(0x8001000C)
    ]
    VARIANT_BOOL onselectstart( void );
    [
    id(0x80010011)
    ]
    void onfilterchange( void );
    [
    id(0x8001000B)
    ]
    VARIANT_BOOL ondragstart( void );
    [
    id(0x80010004)
    ]
    VARIANT_BOOL onbeforeupdate( void );
    [
    id(0x80010005)
    ]
    void onafterupdate( void );
    [
    id(0x8001000D)
    ]
    VARIANT_BOOL onerrorupdate( void );
    [
    id(0x80010006)
    ]
    VARIANT_BOOL onrowexit( void );
    [
    id(0x80010007)
    ]
    void onrowenter( void );
    [
    id(0x8001000E)
    ]
    void ondatasetchanged( void );
    [
    id(0x8001000F)
    ]
    void ondataavailable( void );
    [
    id(0x80010010)
    ]
    void ondatasetcomplete( void );
    [
    id(0x80010012)
    ]
    void onlosecapture( void );
    [
    id(0x80010013)
    ]
    void onpropertychange( void );
    [
    id(0x000003F6)
    ]
    void onscroll( void );
    [
    id(0x80010001)
    ]
    void onfocus( void );
    [
    id(0x80010000)
    ]
    void onblur( void );
    [
    id(0x000003F8)
    ]
    void onresize( void );
    [
    id(0x80010014)
    ]
    VARIANT_BOOL ondrag( void );
    [
    id(0x80010015)
    ]
    void ondragend( void );
    [
    id(0x80010016)
    ]
    VARIANT_BOOL ondragenter( void );
    [
    id(0x80010017)
    ]
    VARIANT_BOOL ondragover( void );
    [
    id(0x80010018)
    ]
    void ondragleave( void );
    [
    id(0x80010019)
    ]
    VARIANT_BOOL ondrop( void );
    [
    id(0x8001001D)
    ]
    VARIANT_BOOL onbeforecut( void );
    [
    id(0x8001001A)
    ]
    VARIANT_BOOL oncut( void );
    [
    id(0x8001001E)
    ]
    VARIANT_BOOL onbeforecopy( void );
    [
    id(0x8001001B)
    ]
    VARIANT_BOOL oncopy( void );
    [
    id(0x8001001F)
    ]
    VARIANT_BOOL onbeforepaste( void );
    [
    id(0x8001001C)
    ]
    VARIANT_BOOL onpaste( void );
    [
    id(0x000003FF)
    ]
    VARIANT_BOOL oncontextmenu( void );
    [
    id(0x80010020)
    ]
    void onrowsdelete( void );
    [
    id(0x80010021)
    ]
    void onrowsinserted( void );
    [
    id(0x80010022)
    ]
    void oncellchange( void );
    [
    id(0xFFFFFD9F)
    ]
    void onreadystatechange( void );
    [
    id(0x00000403)
    ]
    void onbeforeeditfocus( void );
    [
    id(0x00000406)
    ]
    void onlayoutcomplete( void );
    [
    id(0x00000407)
    ]
    void onpage( void );
    [
    id(0x0000040A)
    ]
    VARIANT_BOOL onbeforedeactivate( void );
    [
    id(0x00000417)
    ]
    VARIANT_BOOL onbeforeactivate( void );
    [
    id(0x0000040B)
    ]
    void onmove( void );
    [
    id(0x0000040C)
    ]
    VARIANT_BOOL oncontrolselect( void );
    [
    id(0x0000040E)
    ]
    VARIANT_BOOL onmovestart( void );
    [
    id(0x0000040F)
    ]
    void onmoveend( void );
    [
    id(0x00000410)
    ]
    VARIANT_BOOL onresizestart( void );
    [
    id(0x00000411)
    ]
    void onresizeend( void );
    [
    id(0x00000412)
    ]
    void onmouseenter( void );
    [
    id(0x00000413)
    ]
    void onmouseleave( void );
    [
    id(0x00000409)
    ]
    VARIANT_BOOL onmousewheel( void );
    [
    id(0x00000414)
    ]
    void onactivate( void );
    [
    id(0x00000415)
    ]
    void ondeactivate( void );
    [
    id(0x00000418)
    ]
    void onfocusin( void );
    [
    id(0x00000419)
    ]
    void onfocusout( void );
    [
    id(0x000003E9)
    ]
    VARIANT_BOOL onchange( void );
    [
    id(0x000003EE)
    ]
    void onselect( void );
    [
    id(0x000003EB)
    ]
    void onload( void );
    [
    id(0x000003EA)
    ]
    void onerror( void );
    [
    id(0x000003E8)
    ]
    void onabort( void );
  };

  [
    uuid(3050F2BD-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface HTMLOptionButtonElementEvents
  {
    properties:
    methods:
    [
    id(0x8001000A)
    ]
    VARIANT_BOOL onhelp( void );
    [
    id(0xFFFFFDA8)
    ]
    VARIANT_BOOL onclick( void );
    [
    id(0xFFFFFDA7)
    ]
    VARIANT_BOOL ondblclick( void );
    [
    id(0xFFFFFDA5)
    ]
    VARIANT_BOOL onkeypress( void );
    [
    id(0xFFFFFDA6)
    ]
    void onkeydown( void );
    [
    id(0xFFFFFDA4)
    ]
    void onkeyup( void );
    [
    id(0x80010009)
    ]
    void onmouseout( void );
    [
    id(0x80010008)
    ]
    void onmouseover( void );
    [
    id(0xFFFFFDA2)
    ]
    void onmousemove( void );
    [
    id(0xFFFFFDA3)
    ]
    void onmousedown( void );
    [
    id(0xFFFFFDA1)
    ]
    void onmouseup( void );
    [
    id(0x8001000C)
    ]
    VARIANT_BOOL onselectstart( void );
    [
    id(0x80010011)
    ]
    void onfilterchange( void );
    [
    id(0x8001000B)
    ]
    VARIANT_BOOL ondragstart( void );
    [
    id(0x80010004)
    ]
    VARIANT_BOOL onbeforeupdate( void );
    [
    id(0x80010005)
    ]
    void onafterupdate( void );
    [
    id(0x8001000D)
    ]
    VARIANT_BOOL onerrorupdate( void );
    [
    id(0x80010006)
    ]
    VARIANT_BOOL onrowexit( void );
    [
    id(0x80010007)
    ]
    void onrowenter( void );
    [
    id(0x8001000E)
    ]
    void ondatasetchanged( void );
    [
    id(0x8001000F)
    ]
    void ondataavailable( void );
    [
    id(0x80010010)
    ]
    void ondatasetcomplete( void );
    [
    id(0x80010012)
    ]
    void onlosecapture( void );
    [
    id(0x80010013)
    ]
    void onpropertychange( void );
    [
    id(0x000003F6)
    ]
    void onscroll( void );
    [
    id(0x80010001)
    ]
    void onfocus( void );
    [
    id(0x80010000)
    ]
    void onblur( void );
    [
    id(0x000003F8)
    ]
    void onresize( void );
    [
    id(0x80010014)
    ]
    VARIANT_BOOL ondrag( void );
    [
    id(0x80010015)
    ]
    void ondragend( void );
    [
    id(0x80010016)
    ]
    VARIANT_BOOL ondragenter( void );
    [
    id(0x80010017)
    ]
    VARIANT_BOOL ondragover( void );
    [
    id(0x80010018)
    ]
    void ondragleave( void );
    [
    id(0x80010019)
    ]
    VARIANT_BOOL ondrop( void );
    [
    id(0x8001001D)
    ]
    VARIANT_BOOL onbeforecut( void );
    [
    id(0x8001001A)
    ]
    VARIANT_BOOL oncut( void );
    [
    id(0x8001001E)
    ]
    VARIANT_BOOL onbeforecopy( void );
    [
    id(0x8001001B)
    ]
    VARIANT_BOOL oncopy( void );
    [
    id(0x8001001F)
    ]
    VARIANT_BOOL onbeforepaste( void );
    [
    id(0x8001001C)
    ]
    VARIANT_BOOL onpaste( void );
    [
    id(0x000003FF)
    ]
    VARIANT_BOOL oncontextmenu( void );
    [
    id(0x80010020)
    ]
    void onrowsdelete( void );
    [
    id(0x80010021)
    ]
    void onrowsinserted( void );
    [
    id(0x80010022)
    ]
    void oncellchange( void );
    [
    id(0xFFFFFD9F)
    ]
    void onreadystatechange( void );
    [
    id(0x00000403)
    ]
    void onbeforeeditfocus( void );
    [
    id(0x00000406)
    ]
    void onlayoutcomplete( void );
    [
    id(0x00000407)
    ]
    void onpage( void );
    [
    id(0x0000040A)
    ]
    VARIANT_BOOL onbeforedeactivate( void );
    [
    id(0x00000417)
    ]
    VARIANT_BOOL onbeforeactivate( void );
    [
    id(0x0000040B)
    ]
    void onmove( void );
    [
    id(0x0000040C)
    ]
    VARIANT_BOOL oncontrolselect( void );
    [
    id(0x0000040E)
    ]
    VARIANT_BOOL onmovestart( void );
    [
    id(0x0000040F)
    ]
    void onmoveend( void );
    [
    id(0x00000410)
    ]
    VARIANT_BOOL onresizestart( void );
    [
    id(0x00000411)
    ]
    void onresizeend( void );
    [
    id(0x00000412)
    ]
    void onmouseenter( void );
    [
    id(0x00000413)
    ]
    void onmouseleave( void );
    [
    id(0x00000409)
    ]
    VARIANT_BOOL onmousewheel( void );
    [
    id(0x00000414)
    ]
    void onactivate( void );
    [
    id(0x00000415)
    ]
    void ondeactivate( void );
    [
    id(0x00000418)
    ]
    void onfocusin( void );
    [
    id(0x00000419)
    ]
    void onfocusout( void );
    [
    id(0x000003E9)
    ]
    VARIANT_BOOL onchange( void );
    [
    id(0x000003EE)
    ]
    void onselect( void );
    [
    id(0x000003EB)
    ]
    void onload( void );
    [
    id(0x000003EA)
    ]
    void onerror( void );
    [
    id(0x000003E8)
    ]
    void onabort( void );
  };

  [
    uuid(3050F2AF-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface HTMLInputFileElementEvents
  {
    properties:
    methods:
    [
    id(0x8001000A)
    ]
    VARIANT_BOOL onhelp( void );
    [
    id(0xFFFFFDA8)
    ]
    VARIANT_BOOL onclick( void );
    [
    id(0xFFFFFDA7)
    ]
    VARIANT_BOOL ondblclick( void );
    [
    id(0xFFFFFDA5)
    ]
    VARIANT_BOOL onkeypress( void );
    [
    id(0xFFFFFDA6)
    ]
    void onkeydown( void );
    [
    id(0xFFFFFDA4)
    ]
    void onkeyup( void );
    [
    id(0x80010009)
    ]
    void onmouseout( void );
    [
    id(0x80010008)
    ]
    void onmouseover( void );
    [
    id(0xFFFFFDA2)
    ]
    void onmousemove( void );
    [
    id(0xFFFFFDA3)
    ]
    void onmousedown( void );
    [
    id(0xFFFFFDA1)
    ]
    void onmouseup( void );
    [
    id(0x8001000C)
    ]
    VARIANT_BOOL onselectstart( void );
    [
    id(0x80010011)
    ]
    void onfilterchange( void );
    [
    id(0x8001000B)
    ]
    VARIANT_BOOL ondragstart( void );
    [
    id(0x80010004)
    ]
    VARIANT_BOOL onbeforeupdate( void );
    [
    id(0x80010005)
    ]
    void onafterupdate( void );
    [
    id(0x8001000D)
    ]
    VARIANT_BOOL onerrorupdate( void );
    [
    id(0x80010006)
    ]
    VARIANT_BOOL onrowexit( void );
    [
    id(0x80010007)
    ]
    void onrowenter( void );
    [
    id(0x8001000E)
    ]
    void ondatasetchanged( void );
    [
    id(0x8001000F)
    ]
    void ondataavailable( void );
    [
    id(0x80010010)
    ]
    void ondatasetcomplete( void );
    [
    id(0x80010012)
    ]
    void onlosecapture( void );
    [
    id(0x80010013)
    ]
    void onpropertychange( void );
    [
    id(0x000003F6)
    ]
    void onscroll( void );
    [
    id(0x80010001)
    ]
    void onfocus( void );
    [
    id(0x80010000)
    ]
    void onblur( void );
    [
    id(0x000003F8)
    ]
    void onresize( void );
    [
    id(0x80010014)
    ]
    VARIANT_BOOL ondrag( void );
    [
    id(0x80010015)
    ]
    void ondragend( void );
    [
    id(0x80010016)
    ]
    VARIANT_BOOL ondragenter( void );
    [
    id(0x80010017)
    ]
    VARIANT_BOOL ondragover( void );
    [
    id(0x80010018)
    ]
    void ondragleave( void );
    [
    id(0x80010019)
    ]
    VARIANT_BOOL ondrop( void );
    [
    id(0x8001001D)
    ]
    VARIANT_BOOL onbeforecut( void );
    [
    id(0x8001001A)
    ]
    VARIANT_BOOL oncut( void );
    [
    id(0x8001001E)
    ]
    VARIANT_BOOL onbeforecopy( void );
    [
    id(0x8001001B)
    ]
    VARIANT_BOOL oncopy( void );
    [
    id(0x8001001F)
    ]
    VARIANT_BOOL onbeforepaste( void );
    [
    id(0x8001001C)
    ]
    VARIANT_BOOL onpaste( void );
    [
    id(0x000003FF)
    ]
    VARIANT_BOOL oncontextmenu( void );
    [
    id(0x80010020)
    ]
    void onrowsdelete( void );
    [
    id(0x80010021)
    ]
    void onrowsinserted( void );
    [
    id(0x80010022)
    ]
    void oncellchange( void );
    [
    id(0xFFFFFD9F)
    ]
    void onreadystatechange( void );
    [
    id(0x00000403)
    ]
    void onbeforeeditfocus( void );
    [
    id(0x00000406)
    ]
    void onlayoutcomplete( void );
    [
    id(0x00000407)
    ]
    void onpage( void );
    [
    id(0x0000040A)
    ]
    VARIANT_BOOL onbeforedeactivate( void );
    [
    id(0x00000417)
    ]
    VARIANT_BOOL onbeforeactivate( void );
    [
    id(0x0000040B)
    ]
    void onmove( void );
    [
    id(0x0000040C)
    ]
    VARIANT_BOOL oncontrolselect( void );
    [
    id(0x0000040E)
    ]
    VARIANT_BOOL onmovestart( void );
    [
    id(0x0000040F)
    ]
    void onmoveend( void );
    [
    id(0x00000410)
    ]
    VARIANT_BOOL onresizestart( void );
    [
    id(0x00000411)
    ]
    void onresizeend( void );
    [
    id(0x00000412)
    ]
    void onmouseenter( void );
    [
    id(0x00000413)
    ]
    void onmouseleave( void );
    [
    id(0x00000409)
    ]
    VARIANT_BOOL onmousewheel( void );
    [
    id(0x00000414)
    ]
    void onactivate( void );
    [
    id(0x00000415)
    ]
    void ondeactivate( void );
    [
    id(0x00000418)
    ]
    void onfocusin( void );
    [
    id(0x00000419)
    ]
    void onfocusout( void );
    [
    id(0x000003E9)
    ]
    VARIANT_BOOL onchange( void );
    [
    id(0x000003EE)
    ]
    void onselect( void );
    [
    id(0x000003EB)
    ]
    void onload( void );
    [
    id(0x000003EA)
    ]
    void onerror( void );
    [
    id(0x000003E8)
    ]
    void onabort( void );
  };

  [
    uuid(3050F2C3-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface HTMLInputImageEvents
  {
    properties:
    methods:
    [
    id(0x8001000A)
    ]
    VARIANT_BOOL onhelp( void );
    [
    id(0xFFFFFDA8)
    ]
    VARIANT_BOOL onclick( void );
    [
    id(0xFFFFFDA7)
    ]
    VARIANT_BOOL ondblclick( void );
    [
    id(0xFFFFFDA5)
    ]
    VARIANT_BOOL onkeypress( void );
    [
    id(0xFFFFFDA6)
    ]
    void onkeydown( void );
    [
    id(0xFFFFFDA4)
    ]
    void onkeyup( void );
    [
    id(0x80010009)
    ]
    void onmouseout( void );
    [
    id(0x80010008)
    ]
    void onmouseover( void );
    [
    id(0xFFFFFDA2)
    ]
    void onmousemove( void );
    [
    id(0xFFFFFDA3)
    ]
    void onmousedown( void );
    [
    id(0xFFFFFDA1)
    ]
    void onmouseup( void );
    [
    id(0x8001000C)
    ]
    VARIANT_BOOL onselectstart( void );
    [
    id(0x80010011)
    ]
    void onfilterchange( void );
    [
    id(0x8001000B)
    ]
    VARIANT_BOOL ondragstart( void );
    [
    id(0x80010004)
    ]
    VARIANT_BOOL onbeforeupdate( void );
    [
    id(0x80010005)
    ]
    void onafterupdate( void );
    [
    id(0x8001000D)
    ]
    VARIANT_BOOL onerrorupdate( void );
    [
    id(0x80010006)
    ]
    VARIANT_BOOL onrowexit( void );
    [
    id(0x80010007)
    ]
    void onrowenter( void );
    [
    id(0x8001000E)
    ]
    void ondatasetchanged( void );
    [
    id(0x8001000F)
    ]
    void ondataavailable( void );
    [
    id(0x80010010)
    ]
    void ondatasetcomplete( void );
    [
    id(0x80010012)
    ]
    void onlosecapture( void );
    [
    id(0x80010013)
    ]
    void onpropertychange( void );
    [
    id(0x000003F6)
    ]
    void onscroll( void );
    [
    id(0x80010001)
    ]
    void onfocus( void );
    [
    id(0x80010000)
    ]
    void onblur( void );
    [
    id(0x000003F8)
    ]
    void onresize( void );
    [
    id(0x80010014)
    ]
    VARIANT_BOOL ondrag( void );
    [
    id(0x80010015)
    ]
    void ondragend( void );
    [
    id(0x80010016)
    ]
    VARIANT_BOOL ondragenter( void );
    [
    id(0x80010017)
    ]
    VARIANT_BOOL ondragover( void );
    [
    id(0x80010018)
    ]
    void ondragleave( void );
    [
    id(0x80010019)
    ]
    VARIANT_BOOL ondrop( void );
    [
    id(0x8001001D)
    ]
    VARIANT_BOOL onbeforecut( void );
    [
    id(0x8001001A)
    ]
    VARIANT_BOOL oncut( void );
    [
    id(0x8001001E)
    ]
    VARIANT_BOOL onbeforecopy( void );
    [
    id(0x8001001B)
    ]
    VARIANT_BOOL oncopy( void );
    [
    id(0x8001001F)
    ]
    VARIANT_BOOL onbeforepaste( void );
    [
    id(0x8001001C)
    ]
    VARIANT_BOOL onpaste( void );
    [
    id(0x000003FF)
    ]
    VARIANT_BOOL oncontextmenu( void );
    [
    id(0x80010020)
    ]
    void onrowsdelete( void );
    [
    id(0x80010021)
    ]
    void onrowsinserted( void );
    [
    id(0x80010022)
    ]
    void oncellchange( void );
    [
    id(0xFFFFFD9F)
    ]
    void onreadystatechange( void );
    [
    id(0x00000403)
    ]
    void onbeforeeditfocus( void );
    [
    id(0x00000406)
    ]
    void onlayoutcomplete( void );
    [
    id(0x00000407)
    ]
    void onpage( void );
    [
    id(0x0000040A)
    ]
    VARIANT_BOOL onbeforedeactivate( void );
    [
    id(0x00000417)
    ]
    VARIANT_BOOL onbeforeactivate( void );
    [
    id(0x0000040B)
    ]
    void onmove( void );
    [
    id(0x0000040C)
    ]
    VARIANT_BOOL oncontrolselect( void );
    [
    id(0x0000040E)
    ]
    VARIANT_BOOL onmovestart( void );
    [
    id(0x0000040F)
    ]
    void onmoveend( void );
    [
    id(0x00000410)
    ]
    VARIANT_BOOL onresizestart( void );
    [
    id(0x00000411)
    ]
    void onresizeend( void );
    [
    id(0x00000412)
    ]
    void onmouseenter( void );
    [
    id(0x00000413)
    ]
    void onmouseleave( void );
    [
    id(0x00000409)
    ]
    VARIANT_BOOL onmousewheel( void );
    [
    id(0x00000414)
    ]
    void onactivate( void );
    [
    id(0x00000415)
    ]
    void ondeactivate( void );
    [
    id(0x00000418)
    ]
    void onfocusin( void );
    [
    id(0x00000419)
    ]
    void onfocusout( void );
    [
    id(0x000003EB)
    ]
    void onload( void );
    [
    id(0x000003EA)
    ]
    void onerror( void );
    [
    id(0x000003E8)
    ]
    void onabort( void );
  };

  [
    uuid(3050F821-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLInputElement2: IDispatch
  {
    [
    propput, 
    id(0x000007E6), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall accept([in] BSTR p );
    [
    propget, 
    id(0x000007E6), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall accept([out, retval] BSTR * p );
    [
    propput, 
    id(0x000007E7), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall useMap([in] BSTR p );
    [
    propget, 
    id(0x000007E7), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall useMap([out, retval] BSTR * p );
  };

  [
    uuid(3050F2C2-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLInputImage: IDispatch
  {
    [
    propget, 
    id(0x000007D0)
    ]
    HRESULT _stdcall type([out, retval] BSTR * p );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall disabled([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall disabled([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x000007DC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall border([in] VARIANT p );
    [
    propget, 
    id(0x000007DC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall border([out, retval] VARIANT * p );
    [
    propput, 
    id(0x000007DD), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall vspace([in] long p );
    [
    propget, 
    id(0x000007DD), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall vspace([out, retval] long * p );
    [
    propput, 
    id(0x000007DE), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall hspace([in] long p );
    [
    propget, 
    id(0x000007DE), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall hspace([out, retval] long * p );
    [
    propput, 
    id(0x000007DA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall alt([in] BSTR p );
    [
    propget, 
    id(0x000007DA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall alt([out, retval] BSTR * p );
    [
    propput, 
    id(0x000007DB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall src([in] BSTR p );
    [
    propget, 
    id(0x000007DB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall src([out, retval] BSTR * p );
    [
    propput, 
    id(0x000007DF), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall lowsrc([in] BSTR p );
    [
    propget, 
    id(0x000007DF), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall lowsrc([out, retval] BSTR * p );
    [
    propput, 
    id(0x000007E0), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall vrml([in] BSTR p );
    [
    propget, 
    id(0x000007E0), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall vrml([out, retval] BSTR * p );
    [
    propput, 
    id(0x000007E1), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall dynsrc([in] BSTR p );
    [
    propget, 
    id(0x000007E1), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall dynsrc([out, retval] BSTR * p );
    [
    propget, 
    id(0x800113FC)
    ]
    HRESULT _stdcall readyState([out, retval] BSTR * p );
    [
    propget, 
    id(0x000007E2)
    ]
    HRESULT _stdcall complete([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x000007E3), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall loop([in] VARIANT p );
    [
    propget, 
    id(0x000007E3), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall loop([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80010049), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall align([in] BSTR p );
    [
    propget, 
    id(0x80010049), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall align([out, retval] BSTR * p );
    [
    propput, 
    id(0x80011790), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onload([in] VARIANT p );
    [
    propget, 
    id(0x80011790), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onload([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001178D), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onerror([in] VARIANT p );
    [
    propget, 
    id(0x8001178D), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onerror([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001178C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onabort([in] VARIANT p );
    [
    propget, 
    id(0x8001178C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onabort([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall name([in] BSTR p );
    [
    propget, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall name([out, retval] BSTR * p );
    [
    propput, 
    id(0x80010005)
    ]
    HRESULT _stdcall width([in] long p );
    [
    propget, 
    id(0x80010005)
    ]
    HRESULT _stdcall width([out, retval] long * p );
    [
    propput, 
    id(0x80010006)
    ]
    HRESULT _stdcall height([in] long p );
    [
    propget, 
    id(0x80010006)
    ]
    HRESULT _stdcall height([out, retval] long * p );
    [
    propput, 
    id(0x000007E4), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall Start([in] BSTR p );
    [
    propget, 
    id(0x000007E4), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall Start([out, retval] BSTR * p );
  };

  [
    uuid(3050F5D8-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLInputElement
  {
    [default] dispinterface DispHTMLInputElement;
    [default, source] dispinterface HTMLInputTextElementEvents;
    [source] dispinterface HTMLInputTextElementEvents2;
    [source] dispinterface HTMLOptionButtonElementEvents;
    [source] dispinterface HTMLButtonElementEvents;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLDatabinding;
    interface IHTMLControlElement;
    interface IHTMLInputElement;
    interface IHTMLInputElement2;
    interface IHTMLInputTextElement;
    interface IHTMLInputHiddenElement;
    interface IHTMLInputButtonElement;
    interface IHTMLInputFileElement;
    interface IHTMLOptionButtonElement;
    interface IHTMLInputImage;
  };

  [
    uuid(3050F2AC-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLTextAreaElement
  {
    [default] dispinterface DispHTMLTextAreaElement;
    [default, source] dispinterface HTMLInputTextElementEvents;
    [source] dispinterface HTMLInputTextElementEvents2;
    [source] dispinterface HTMLTextContainerEvents;
    [source] dispinterface HTMLTextContainerEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLDatabinding;
    interface IHTMLControlElement;
    interface IHTMLTextContainer;
    interface IHTMLTextAreaElement;
  };

  [
    uuid(3050F2DF-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLRichtextElement
  {
    [default] dispinterface DispHTMLRichtextElement;
    [default, source] dispinterface HTMLInputTextElementEvents;
    [source] dispinterface HTMLInputTextElementEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLDatabinding;
    interface IHTMLControlElement;
    interface IHTMLTextContainer;
    interface IHTMLTextAreaElement;
  };

  [
    uuid(3050F2C6-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLButtonElement
  {
    [default] dispinterface DispHTMLButtonElement;
    [default, source] dispinterface HTMLButtonElementEvents;
    [source] dispinterface HTMLButtonElementEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLDatabinding;
    interface IHTMLControlElement;
    interface IHTMLTextContainer;
    interface IHTMLButtonElement;
  };

  [
    uuid(3050F2B8-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface HTMLMarqueeElementEvents
  {
    properties:
    methods:
    [
    id(0x8001000A)
    ]
    VARIANT_BOOL onhelp( void );
    [
    id(0xFFFFFDA8)
    ]
    VARIANT_BOOL onclick( void );
    [
    id(0xFFFFFDA7)
    ]
    VARIANT_BOOL ondblclick( void );
    [
    id(0xFFFFFDA5)
    ]
    VARIANT_BOOL onkeypress( void );
    [
    id(0xFFFFFDA6)
    ]
    void onkeydown( void );
    [
    id(0xFFFFFDA4)
    ]
    void onkeyup( void );
    [
    id(0x80010009)
    ]
    void onmouseout( void );
    [
    id(0x80010008)
    ]
    void onmouseover( void );
    [
    id(0xFFFFFDA2)
    ]
    void onmousemove( void );
    [
    id(0xFFFFFDA3)
    ]
    void onmousedown( void );
    [
    id(0xFFFFFDA1)
    ]
    void onmouseup( void );
    [
    id(0x8001000C)
    ]
    VARIANT_BOOL onselectstart( void );
    [
    id(0x80010011)
    ]
    void onfilterchange( void );
    [
    id(0x8001000B)
    ]
    VARIANT_BOOL ondragstart( void );
    [
    id(0x80010004)
    ]
    VARIANT_BOOL onbeforeupdate( void );
    [
    id(0x80010005)
    ]
    void onafterupdate( void );
    [
    id(0x8001000D)
    ]
    VARIANT_BOOL onerrorupdate( void );
    [
    id(0x80010006)
    ]
    VARIANT_BOOL onrowexit( void );
    [
    id(0x80010007)
    ]
    void onrowenter( void );
    [
    id(0x8001000E)
    ]
    void ondatasetchanged( void );
    [
    id(0x8001000F)
    ]
    void ondataavailable( void );
    [
    id(0x80010010)
    ]
    void ondatasetcomplete( void );
    [
    id(0x80010012)
    ]
    void onlosecapture( void );
    [
    id(0x80010013)
    ]
    void onpropertychange( void );
    [
    id(0x000003F6)
    ]
    void onscroll( void );
    [
    id(0x80010001)
    ]
    void onfocus( void );
    [
    id(0x80010000)
    ]
    void onblur( void );
    [
    id(0x000003F8)
    ]
    void onresize( void );
    [
    id(0x80010014)
    ]
    VARIANT_BOOL ondrag( void );
    [
    id(0x80010015)
    ]
    void ondragend( void );
    [
    id(0x80010016)
    ]
    VARIANT_BOOL ondragenter( void );
    [
    id(0x80010017)
    ]
    VARIANT_BOOL ondragover( void );
    [
    id(0x80010018)
    ]
    void ondragleave( void );
    [
    id(0x80010019)
    ]
    VARIANT_BOOL ondrop( void );
    [
    id(0x8001001D)
    ]
    VARIANT_BOOL onbeforecut( void );
    [
    id(0x8001001A)
    ]
    VARIANT_BOOL oncut( void );
    [
    id(0x8001001E)
    ]
    VARIANT_BOOL onbeforecopy( void );
    [
    id(0x8001001B)
    ]
    VARIANT_BOOL oncopy( void );
    [
    id(0x8001001F)
    ]
    VARIANT_BOOL onbeforepaste( void );
    [
    id(0x8001001C)
    ]
    VARIANT_BOOL onpaste( void );
    [
    id(0x000003FF)
    ]
    VARIANT_BOOL oncontextmenu( void );
    [
    id(0x80010020)
    ]
    void onrowsdelete( void );
    [
    id(0x80010021)
    ]
    void onrowsinserted( void );
    [
    id(0x80010022)
    ]
    void oncellchange( void );
    [
    id(0xFFFFFD9F)
    ]
    void onreadystatechange( void );
    [
    id(0x00000403)
    ]
    void onbeforeeditfocus( void );
    [
    id(0x00000406)
    ]
    void onlayoutcomplete( void );
    [
    id(0x00000407)
    ]
    void onpage( void );
    [
    id(0x0000040A)
    ]
    VARIANT_BOOL onbeforedeactivate( void );
    [
    id(0x00000417)
    ]
    VARIANT_BOOL onbeforeactivate( void );
    [
    id(0x0000040B)
    ]
    void onmove( void );
    [
    id(0x0000040C)
    ]
    VARIANT_BOOL oncontrolselect( void );
    [
    id(0x0000040E)
    ]
    VARIANT_BOOL onmovestart( void );
    [
    id(0x0000040F)
    ]
    void onmoveend( void );
    [
    id(0x00000410)
    ]
    VARIANT_BOOL onresizestart( void );
    [
    id(0x00000411)
    ]
    void onresizeend( void );
    [
    id(0x00000412)
    ]
    void onmouseenter( void );
    [
    id(0x00000413)
    ]
    void onmouseleave( void );
    [
    id(0x00000409)
    ]
    VARIANT_BOOL onmousewheel( void );
    [
    id(0x00000414)
    ]
    void onactivate( void );
    [
    id(0x00000415)
    ]
    void ondeactivate( void );
    [
    id(0x00000418)
    ]
    void onfocusin( void );
    [
    id(0x00000419)
    ]
    void onfocusout( void );
    [
    id(0x000003E9)
    ]
    void onchange( void );
    [
    id(0x000003EE)
    ]
    void onselect( void );
    [
    id(0x000003F1)
    ]
    void onbounce( void );
    [
    id(0x000003F2)
    ]
    void onfinish( void );
    [
    id(0x000003F3)
    ]
    void onstart( void );
  };

  
  typedef enum tag_htmlMarqueeBehavior
  {
    htmlMarqueeBehaviorscroll = 1, 
    htmlMarqueeBehaviorslide = 2, 
    htmlMarqueeBehavioralternate = 3, 
    htmlMarqueeBehavior_Max = 2147483647
  } _htmlMarqueeBehavior;

  
  typedef enum tag_htmlMarqueeDirection
  {
    htmlMarqueeDirectionleft = 1, 
    htmlMarqueeDirectionright = 3, 
    htmlMarqueeDirectionup = 5, 
    htmlMarqueeDirectiondown = 7, 
    htmlMarqueeDirection_Max = 2147483647
  } _htmlMarqueeDirection;

  [
    uuid(3050F2B5-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLMarqueeElement: IDispatch
  {
    [
    propput, 
    id(0xFFFFFE0B)
    ]
    HRESULT _stdcall bgColor([in] VARIANT p );
    [
    propget, 
    id(0xFFFFFE0B)
    ]
    HRESULT _stdcall bgColor([out, retval] VARIANT * p );
    [
    propput, 
    id(0x00001770)
    ]
    HRESULT _stdcall scrollDelay([in] long p );
    [
    propget, 
    id(0x00001770)
    ]
    HRESULT _stdcall scrollDelay([out, retval] long * p );
    [
    propput, 
    id(0x00001771)
    ]
    HRESULT _stdcall direction([in] BSTR p );
    [
    propget, 
    id(0x00001771)
    ]
    HRESULT _stdcall direction([out, retval] BSTR * p );
    [
    propput, 
    id(0x00001772)
    ]
    HRESULT _stdcall behavior([in] BSTR p );
    [
    propget, 
    id(0x00001772)
    ]
    HRESULT _stdcall behavior([out, retval] BSTR * p );
    [
    propput, 
    id(0x00001773)
    ]
    HRESULT _stdcall scrollAmount([in] long p );
    [
    propget, 
    id(0x00001773)
    ]
    HRESULT _stdcall scrollAmount([out, retval] long * p );
    [
    propput, 
    id(0x00001774)
    ]
    HRESULT _stdcall loop([in] long p );
    [
    propget, 
    id(0x00001774)
    ]
    HRESULT _stdcall loop([out, retval] long * p );
    [
    propput, 
    id(0x00001775)
    ]
    HRESULT _stdcall vspace([in] long p );
    [
    propget, 
    id(0x00001775)
    ]
    HRESULT _stdcall vspace([out, retval] long * p );
    [
    propput, 
    id(0x00001776)
    ]
    HRESULT _stdcall hspace([in] long p );
    [
    propget, 
    id(0x00001776)
    ]
    HRESULT _stdcall hspace([out, retval] long * p );
    [
    propput, 
    id(0x8001178A), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onfinish([in] VARIANT p );
    [
    propget, 
    id(0x8001178A), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onfinish([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001178B), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onstart([in] VARIANT p );
    [
    propget, 
    id(0x8001178B), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onstart([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011784), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onbounce([in] VARIANT p );
    [
    propget, 
    id(0x80011784), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onbounce([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80010005)
    ]
    HRESULT _stdcall width([in] VARIANT p );
    [
    propget, 
    id(0x80010005)
    ]
    HRESULT _stdcall width([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80010006)
    ]
    HRESULT _stdcall height([in] VARIANT p );
    [
    propget, 
    id(0x80010006)
    ]
    HRESULT _stdcall height([out, retval] VARIANT * p );
    [
    propput, 
    id(0x00001777), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall trueSpeed([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x00001777), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall trueSpeed([out, retval] VARIANT_BOOL * p );
    [
    id(0x0000177A)
    ]
    HRESULT _stdcall Start( void );
    [
    id(0x0000177B)
    ]
    HRESULT _stdcall stop( void );
  };

  [
    uuid(3050F2B9-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLMarqueeElement
  {
    [default] dispinterface DispHTMLMarqueeElement;
    [default, source] dispinterface HTMLMarqueeElementEvents;
    [source] dispinterface HTMLMarqueeElementEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLDatabinding;
    interface IHTMLControlElement;
    interface IHTMLTextContainer;
    interface IHTMLMarqueeElement;
  };

  [
    uuid(3050F81C-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLHtmlElement: IDispatch
  {
    [
    propput, 
    id(0x000003E9), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall version([in] BSTR p );
    [
    propget, 
    id(0x000003E9), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall version([out, retval] BSTR * p );
  };

  [
    uuid(3050F81D-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLHeadElement: IDispatch
  {
    [
    propput, 
    id(0x000003E9), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall profile([in] BSTR p );
    [
    propget, 
    id(0x000003E9), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall profile([out, retval] BSTR * p );
  };

  [
    uuid(3050F322-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLTitleElement: IDispatch
  {
    [
    propput, 
    id(0x800113ED), 
    bindable
    ]
    HRESULT _stdcall text([in] BSTR p );
    [
    propget, 
    id(0x800113ED), 
    bindable
    ]
    HRESULT _stdcall text([out, retval] BSTR * p );
  };

  [
    uuid(3050F203-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLMetaElement: IDispatch
  {
    [
    propput, 
    id(0x000003E9), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall httpEquiv([in] BSTR p );
    [
    propget, 
    id(0x000003E9), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall httpEquiv([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003EA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall content([in] BSTR p );
    [
    propget, 
    id(0x000003EA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall content([out, retval] BSTR * p );
    [
    propput, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall name([in] BSTR p );
    [
    propget, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall name([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003EB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall url([in] BSTR p );
    [
    propget, 
    id(0x000003EB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall url([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003F5), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall charset([in] BSTR p );
    [
    propget, 
    id(0x000003F5), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall charset([out, retval] BSTR * p );
  };

  [
    uuid(3050F81F-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLMetaElement2: IDispatch
  {
    [
    propput, 
    id(0x000003FC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scheme([in] BSTR p );
    [
    propget, 
    id(0x000003FC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scheme([out, retval] BSTR * p );
  };

  [
    uuid(3050F204-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLBaseElement: IDispatch
  {
    [
    propput, 
    id(0x000003EB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall href([in] BSTR p );
    [
    propget, 
    id(0x000003EB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall href([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003EC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall target([in] BSTR p );
    [
    propget, 
    id(0x000003EC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall target([out, retval] BSTR * p );
  };

  [
    uuid(3050F206-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLIsIndexElement: IDispatch
  {
    [
    propput, 
    id(0x000003F2), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall prompt([in] BSTR p );
    [
    propget, 
    id(0x000003F2), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall prompt([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003F3), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall action([in] BSTR p );
    [
    propget, 
    id(0x000003F3), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall action([out, retval] BSTR * p );
  };

  [
    uuid(3050F207-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLNextIdElement: IDispatch
  {
    [
    propput, 
    id(0x000003F4), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall n([in] BSTR p );
    [
    propget, 
    id(0x000003F4), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall n([out, retval] BSTR * p );
  };

  [
    uuid(3050F491-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLHtmlElement
  {
    [default] dispinterface DispHTMLHtmlElement;
    [default, source] dispinterface HTMLElementEvents;
    [source] dispinterface HTMLElementEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLHtmlElement;
  };

  [
    uuid(3050F493-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLHeadElement
  {
    [default] dispinterface DispHTMLHeadElement;
    [default, source] dispinterface HTMLElementEvents;
    [source] dispinterface HTMLElementEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLHeadElement;
  };

  [
    uuid(3050F284-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLTitleElement
  {
    [default] dispinterface DispHTMLTitleElement;
    [default, source] dispinterface HTMLElementEvents;
    [source] dispinterface HTMLElementEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLTitleElement;
  };

  [
    uuid(3050F275-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLMetaElement
  {
    [default] dispinterface DispHTMLMetaElement;
    [default, source] dispinterface HTMLElementEvents;
    [source] dispinterface HTMLElementEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLMetaElement;
    interface IHTMLMetaElement2;
  };

  [
    uuid(3050F276-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLBaseElement
  {
    [default] dispinterface DispHTMLBaseElement;
    [default, source] dispinterface HTMLElementEvents;
    [source] dispinterface HTMLElementEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLBaseElement;
  };

  [
    uuid(3050F278-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLIsIndexElement
  {
    [default] dispinterface DispHTMLIsIndexElement;
    [default, source] dispinterface HTMLElementEvents;
    [source] dispinterface HTMLElementEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLIsIndexElement;
    interface IHTMLIsIndexElement2;
  };

  [
    uuid(3050F279-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLNextIdElement
  {
    [default] dispinterface DispHTMLNextIdElement;
    [default, source] dispinterface HTMLElementEvents;
    [source] dispinterface HTMLElementEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLNextIdElement;
  };

  [
    uuid(3050F202-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLBaseFontElement: IDispatch
  {
    [
    propput, 
    id(0x8001138A), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall color([in] VARIANT p );
    [
    propget, 
    id(0x8001138A), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall color([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001139A), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall face([in] BSTR p );
    [
    propget, 
    id(0x8001139A), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall face([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113A2), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall size([in] long p );
    [
    propget, 
    id(0x800113A2), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall size([out, retval] long * p );
  };

  [
    uuid(3050F282-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLBaseFontElement
  {
    [default] dispinterface DispHTMLBaseFontElement;
    [default, source] dispinterface HTMLElementEvents;
    [source] dispinterface HTMLElementEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLBaseFontElement;
  };

  [
    uuid(3050F209-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLUnknownElement: IDispatch
  {
  };

  [
    uuid(3050F268-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLUnknownElement
  {
    [default] dispinterface DispHTMLUnknownElement;
    [default, source] dispinterface HTMLElementEvents;
    [source] dispinterface HTMLElementEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLUnknownElement;
  };

  [
    uuid(3050F3FC-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLMimeTypesCollection: IDispatch
  {
    [
    propget, 
    id(0x00000001)
    ]
    HRESULT _stdcall length([out, retval] long * p );
  };

  [
    uuid(3050F3FD-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLPluginsCollection: IDispatch
  {
    [
    propget, 
    id(0x00000001)
    ]
    HRESULT _stdcall length([out, retval] long * p );
    [
    id(0x00000002)
    ]
    HRESULT _stdcall refresh([in, optional, defaultvalue(False)] VARIANT_BOOL reload );
  };

  [
    uuid(3050F401-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLOpsProfile: IDispatch
  {
    [
    id(0x00000001)
    ]
    HRESULT _stdcall addRequest([in] BSTR name, [in, optional] VARIANT reserved, [out, retval] VARIANT_BOOL * Success );
    [
    id(0x00000002)
    ]
    HRESULT _stdcall clearRequest( void );
    [
    id(0x00000003)
    ]
    HRESULT _stdcall doRequest([in] VARIANT usage, [in, optional] VARIANT fname, [in, optional] VARIANT domain, [in, optional] VARIANT path, [in, optional] VARIANT expire, [in, optional] VARIANT reserved );
    [
    id(0x00000004)
    ]
    HRESULT _stdcall getAttribute([in] BSTR name, [out, retval] BSTR * value );
    [
    id(0x00000005)
    ]
    HRESULT _stdcall setAttribute([in] BSTR name, [in] BSTR value, [in, optional] VARIANT prefs, [out, retval] VARIANT_BOOL * Success );
    [
    id(0x00000006)
    ]
    HRESULT _stdcall commitChanges([out, retval] VARIANT_BOOL * Success );
    [
    id(0x00000007)
    ]
    HRESULT _stdcall addReadRequest([in] BSTR name, [in, optional] VARIANT reserved, [out, retval] VARIANT_BOOL * Success );
    [
    id(0x00000008)
    ]
    HRESULT _stdcall doReadRequest([in] VARIANT usage, [in, optional] VARIANT fname, [in, optional] VARIANT domain, [in, optional] VARIANT path, [in, optional] VARIANT expire, [in, optional] VARIANT reserved );
    [
    id(0x00000009)
    ]
    HRESULT _stdcall doWriteRequest([out, retval] VARIANT_BOOL * Success );
  };

  [
    uuid(163BB1E0-6E00-11CF-837A-48DC04C10000), 
    dual, 
    oleautomation
  ]
   interface IHTMLLocation: IDispatch
  {
    [
    propput, 
    id(0x00000000)
    ]
    HRESULT _stdcall href([in] BSTR p );
    [
    propget, 
    id(0x00000000)
    ]
    HRESULT _stdcall href([out, retval] BSTR * p );
    [
    propput, 
    id(0x00000001)
    ]
    HRESULT _stdcall protocol([in] BSTR p );
    [
    propget, 
    id(0x00000001)
    ]
    HRESULT _stdcall protocol([out, retval] BSTR * p );
    [
    propput, 
    id(0x00000002)
    ]
    HRESULT _stdcall host([in] BSTR p );
    [
    propget, 
    id(0x00000002)
    ]
    HRESULT _stdcall host([out, retval] BSTR * p );
    [
    propput, 
    id(0x00000003)
    ]
    HRESULT _stdcall hostname([in] BSTR p );
    [
    propget, 
    id(0x00000003)
    ]
    HRESULT _stdcall hostname([out, retval] BSTR * p );
    [
    propput, 
    id(0x00000004)
    ]
    HRESULT _stdcall port([in] BSTR p );
    [
    propget, 
    id(0x00000004)
    ]
    HRESULT _stdcall port([out, retval] BSTR * p );
    [
    propput, 
    id(0x00000005)
    ]
    HRESULT _stdcall pathname([in] BSTR p );
    [
    propget, 
    id(0x00000005)
    ]
    HRESULT _stdcall pathname([out, retval] BSTR * p );
    [
    propput, 
    id(0x00000006)
    ]
    HRESULT _stdcall search([in] BSTR p );
    [
    propget, 
    id(0x00000006)
    ]
    HRESULT _stdcall search([out, retval] BSTR * p );
    [
    propput, 
    id(0x00000007)
    ]
    HRESULT _stdcall hash([in] BSTR p );
    [
    propget, 
    id(0x00000007)
    ]
    HRESULT _stdcall hash([out, retval] BSTR * p );
    [
    id(0x00000008)
    ]
    HRESULT _stdcall reload([in, optional, defaultvalue(False)] VARIANT_BOOL flag );
    [
    id(0x00000009)
    ]
    HRESULT _stdcall replace([in] BSTR bstr );
    [
    id(0x0000000A)
    ]
    HRESULT _stdcall assign([in] BSTR bstr );
    [
    id(0x0000000B)
    ]
    HRESULT _stdcall toString([out, retval] BSTR * String );
  };

  [
    uuid(FECEAAA3-8405-11CF-8BA1-00AA00476DA6)
  ]
  coclass HTMLHistory
  {
    [default] interface IOmHistory;
  };

  [
    uuid(3050F3FE-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass CMimeTypes
  {
    [default] interface IHTMLMimeTypesCollection;
  };

  [
    uuid(3050F3FF-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass CPlugins
  {
    [default] interface IHTMLPluginsCollection;
  };

  [
    uuid(3050F402-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass COpsProfile
  {
    [default] interface IHTMLOpsProfile;
  };

  [
    uuid(FECEAAA6-8405-11CF-8BA1-00AA00476DA6)
  ]
  coclass HTMLNavigator
  {
    [default] interface IOmNavigator;
  };

  [
    uuid(163BB1E1-6E00-11CF-837A-48DC04C10000)
  ]
  coclass HTMLLocation
  {
    [default] interface IHTMLLocation;
  };

  [
    uuid(3050F4CE-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLBookmarkCollection: IDispatch
  {
    [
    propget, 
    id(0x000005DD), 
    hidden
    ]
    HRESULT _stdcall length([out, retval] long * p );
    [
    propget, 
    id(0xFFFFFFFC), 
    restricted, 
    hidden
    ]
    HRESULT _stdcall _newEnum([out, retval]  IUnknown ** p );
    [
    id(0x00000000)
    ]
    HRESULT _stdcall item([in] long index, [out, retval] VARIANT * pVarBookmark );
  };

  
  typedef enum tag_htmlPersistState
  {
    htmlPersistStateNormal = 0, 
    htmlPersistStateFavorite = 1, 
    htmlPersistStateHistory = 2, 
    htmlPersistStateSnapshot = 3, 
    htmlPersistStateUserData = 4, 
    htmlPersistState_Max = 2147483647
  } _htmlPersistState;

  
  typedef enum tag_htmlDropEffect
  {
    htmlDropEffectCopy = 0, 
    htmlDropEffectLink = 1, 
    htmlDropEffectMove = 2, 
    htmlDropEffectNone = 3, 
    htmlDropEffect_Max = 2147483647
  } _htmlDropEffect;

  
  typedef enum tag_htmlEffectAllowed
  {
    htmlEffectAllowedCopy = 0, 
    htmlEffectAllowedLink = 1, 
    htmlEffectAllowedMove = 2, 
    htmlEffectAllowedCopyLink = 3, 
    htmlEffectAllowedCopyMove = 4, 
    htmlEffectAllowedLinkMove = 5, 
    htmlEffectAllowedAll = 6, 
    htmlEffectAllowedNone = 7, 
    htmlEffectAllowedUninitialized = 8, 
    htmlEffectAllowed_Max = 2147483647
  } _htmlEffectAllowed;

  [
    public
  ]
  typedef long LONG_PTR;

  [
    uuid(3050F814-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLEventObj4: IDispatch
  {
    [
    propget, 
    id(0x0000041B)
    ]
    HRESULT _stdcall wheelDelta([out, retval] long * p );
  };

  [
    uuid(3050F48A-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass CEventObj
  {
    [default] dispinterface DispCEventObj;
    interface IHTMLEventObj;
    interface IHTMLEventObj2;
    interface IHTMLEventObj3;
    interface IHTMLEventObj4;
  };

  [
    uuid(96A0A4E0-D062-11CF-94B6-00AA0060275C), 
    hidden
  ]
   dispinterface HTMLWindowEvents
  {
    properties:
    methods:
    [
    id(0x000003EB)
    ]
    void onload( void );
    [
    id(0x000003F0)
    ]
    void onunload( void );
    [
    id(0x8001000A)
    ]
    VARIANT_BOOL onhelp( void );
    [
    id(0x80010001)
    ]
    void onfocus( void );
    [
    id(0x80010000)
    ]
    void onblur( void );
    [
    id(0x000003EA)
    ]
    void onerror([in] BSTR description, [in] BSTR url, [in] long line );
    [
    id(0x000003F8)
    ]
    void onresize( void );
    [
    id(0x000003F6)
    ]
    void onscroll( void );
    [
    id(0x000003F9)
    ]
    void onbeforeunload( void );
    [
    id(0x00000400)
    ]
    void onbeforeprint( void );
    [
    id(0x00000401)
    ]
    void onafterprint( void );
  };

  [
    uuid(3050F35C-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLScreen: IDispatch
  {
    [
    propget, 
    id(0x000003E9)
    ]
    HRESULT _stdcall colorDepth([out, retval] long * p );
    [
    propput, 
    id(0x000003EA)
    ]
    HRESULT _stdcall bufferDepth([in] long p );
    [
    propget, 
    id(0x000003EA)
    ]
    HRESULT _stdcall bufferDepth([out, retval] long * p );
    [
    propget, 
    id(0x000003EB)
    ]
    HRESULT _stdcall width([out, retval] long * p );
    [
    propget, 
    id(0x000003EC)
    ]
    HRESULT _stdcall height([out, retval] long * p );
    [
    propput, 
    id(0x000003ED)
    ]
    HRESULT _stdcall updateInterval([in] long p );
    [
    propget, 
    id(0x000003ED)
    ]
    HRESULT _stdcall updateInterval([out, retval] long * p );
    [
    propget, 
    id(0x000003EE)
    ]
    HRESULT _stdcall availHeight([out, retval] long * p );
    [
    propget, 
    id(0x000003EF)
    ]
    HRESULT _stdcall availWidth([out, retval] long * p );
    [
    propget, 
    id(0x000003F0)
    ]
    HRESULT _stdcall fontSmoothingEnabled([out, retval] VARIANT_BOOL * p );
  };

  [
    uuid(3050F311-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLFrameBase: IDispatch
  {
    [
    propput, 
    id(0x80010BB8)
    ]
    HRESULT _stdcall src([in] BSTR p );
    [
    propget, 
    id(0x80010BB8)
    ]
    HRESULT _stdcall src([out, retval] BSTR * p );
    [
    propput, 
    id(0x80010000)
    ]
    HRESULT _stdcall name([in] BSTR p );
    [
    propget, 
    id(0x80010000)
    ]
    HRESULT _stdcall name([out, retval] BSTR * p );
    [
    propput, 
    id(0x80010BBA)
    ]
    HRESULT _stdcall border([in] VARIANT p );
    [
    propget, 
    id(0x80010BBA)
    ]
    HRESULT _stdcall border([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80010BBB)
    ]
    HRESULT _stdcall frameBorder([in] BSTR p );
    [
    propget, 
    id(0x80010BBB)
    ]
    HRESULT _stdcall frameBorder([out, retval] BSTR * p );
    [
    propput, 
    id(0x80010BBC)
    ]
    HRESULT _stdcall frameSpacing([in] VARIANT p );
    [
    propget, 
    id(0x80010BBC)
    ]
    HRESULT _stdcall frameSpacing([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80010BBD)
    ]
    HRESULT _stdcall marginWidth([in] VARIANT p );
    [
    propget, 
    id(0x80010BBD)
    ]
    HRESULT _stdcall marginWidth([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80010BBE)
    ]
    HRESULT _stdcall marginHeight([in] VARIANT p );
    [
    propget, 
    id(0x80010BBE)
    ]
    HRESULT _stdcall marginHeight([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80010BBF)
    ]
    HRESULT _stdcall noResize([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x80010BBF)
    ]
    HRESULT _stdcall noResize([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x80010BC0)
    ]
    HRESULT _stdcall scrolling([in] BSTR p );
    [
    propget, 
    id(0x80010BC0)
    ]
    HRESULT _stdcall scrolling([out, retval] BSTR * p );
  };

  [
    uuid(3050F84A-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLScreen2: IDispatch
  {
    [
    propget, 
    id(0x000003F1)
    ]
    HRESULT _stdcall logicalXDPI([out, retval] long * p );
    [
    propget, 
    id(0x000003F2)
    ]
    HRESULT _stdcall logicalYDPI([out, retval] long * p );
    [
    propget, 
    id(0x000003F3)
    ]
    HRESULT _stdcall deviceXDPI([out, retval] long * p );
    [
    propget, 
    id(0x000003F4)
    ]
    HRESULT _stdcall deviceYDPI([out, retval] long * p );
  };

  [
    uuid(3050F7F6-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass FramesCollection
  {
    [default] interface IHTMLFramesCollection2;
  };

  [
    uuid(3050F591-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLScreen
  {
    properties:
    methods:
    [
    propget, 
    id(0x000003E9)
    ]
    long colorDepth( void );
    [
    propput, 
    id(0x000003EA)
    ]
    void bufferDepth(long Param1 );
    [
    propget, 
    id(0x000003EA)
    ]
    long bufferDepth( void );
    [
    propget, 
    id(0x000003EB)
    ]
    long width( void );
    [
    propget, 
    id(0x000003EC)
    ]
    long height( void );
    [
    propput, 
    id(0x000003ED)
    ]
    void updateInterval(long Param1 );
    [
    propget, 
    id(0x000003ED)
    ]
    long updateInterval( void );
    [
    propget, 
    id(0x000003EE)
    ]
    long availHeight( void );
    [
    propget, 
    id(0x000003EF)
    ]
    long availWidth( void );
    [
    propget, 
    id(0x000003F0)
    ]
    VARIANT_BOOL fontSmoothingEnabled( void );
    [
    propget, 
    id(0x000003F1)
    ]
    long logicalXDPI( void );
    [
    propget, 
    id(0x000003F2)
    ]
    long logicalYDPI( void );
    [
    propget, 
    id(0x000003F3)
    ]
    long deviceXDPI( void );
    [
    propget, 
    id(0x000003F4)
    ]
    long deviceYDPI( void );
  };

  [
    uuid(3050F35D-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLScreen
  {
    [default] dispinterface DispHTMLScreen;
    interface IHTMLScreen;
    interface IHTMLScreen2;
  };

  [
    uuid(D48A6EC6-6A4A-11CF-94A7-444553540000)
  ]
  coclass HTMLWindow2
  {
    [default] dispinterface DispHTMLWindow2;
    [default, source] dispinterface HTMLWindowEvents;
    [source] dispinterface HTMLWindowEvents2;
    interface IHTMLWindow2;
    interface IHTMLWindow3;
    interface IHTMLWindow4;
  };

  [
    uuid(3050F391-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLWindowProxy
  {
    [default] dispinterface DispHTMLWindowProxy;
    [default, source] dispinterface HTMLWindowEvents;
    [source] dispinterface HTMLWindowEvents2;
    interface IHTMLWindow2;
    interface IHTMLWindow3;
    interface IHTMLWindow4;
  };

  [
    uuid(3050F260-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface HTMLDocumentEvents
  {
    properties:
    methods:
    [
    id(0x8001000A)
    ]
    VARIANT_BOOL onhelp( void );
    [
    id(0xFFFFFDA8)
    ]
    VARIANT_BOOL onclick( void );
    [
    id(0xFFFFFDA7)
    ]
    VARIANT_BOOL ondblclick( void );
    [
    id(0xFFFFFDA6)
    ]
    void onkeydown( void );
    [
    id(0xFFFFFDA4)
    ]
    void onkeyup( void );
    [
    id(0xFFFFFDA5)
    ]
    VARIANT_BOOL onkeypress( void );
    [
    id(0xFFFFFDA3)
    ]
    void onmousedown( void );
    [
    id(0xFFFFFDA2)
    ]
    void onmousemove( void );
    [
    id(0xFFFFFDA1)
    ]
    void onmouseup( void );
    [
    id(0x80010009)
    ]
    void onmouseout( void );
    [
    id(0x80010008)
    ]
    void onmouseover( void );
    [
    id(0xFFFFFD9F)
    ]
    void onreadystatechange( void );
    [
    id(0x80010004)
    ]
    VARIANT_BOOL onbeforeupdate( void );
    [
    id(0x80010005)
    ]
    void onafterupdate( void );
    [
    id(0x80010006)
    ]
    VARIANT_BOOL onrowexit( void );
    [
    id(0x80010007)
    ]
    void onrowenter( void );
    [
    id(0x8001000B)
    ]
    VARIANT_BOOL ondragstart( void );
    [
    id(0x8001000C)
    ]
    VARIANT_BOOL onselectstart( void );
    [
    id(0x8001000D)
    ]
    VARIANT_BOOL onerrorupdate( void );
    [
    id(0x000003FF)
    ]
    VARIANT_BOOL oncontextmenu( void );
    [
    id(0x00000402)
    ]
    VARIANT_BOOL onstop( void );
    [
    id(0x80010020)
    ]
    void onrowsdelete( void );
    [
    id(0x80010021)
    ]
    void onrowsinserted( void );
    [
    id(0x80010022)
    ]
    void oncellchange( void );
    [
    id(0x80010013)
    ]
    void onpropertychange( void );
    [
    id(0x8001000E)
    ]
    void ondatasetchanged( void );
    [
    id(0x8001000F)
    ]
    void ondataavailable( void );
    [
    id(0x80010010)
    ]
    void ondatasetcomplete( void );
    [
    id(0x00000403)
    ]
    void onbeforeeditfocus( void );
    [
    id(0x0000040D)
    ]
    void onselectionchange( void );
    [
    id(0x0000040C)
    ]
    VARIANT_BOOL oncontrolselect( void );
    [
    id(0x00000409)
    ]
    VARIANT_BOOL onmousewheel( void );
    [
    id(0x00000418)
    ]
    void onfocusin( void );
    [
    id(0x00000419)
    ]
    void onfocusout( void );
    [
    id(0x00000414)
    ]
    void onactivate( void );
    [
    id(0x00000415)
    ]
    void ondeactivate( void );
    [
    id(0x00000417)
    ]
    VARIANT_BOOL onbeforeactivate( void );
    [
    id(0x0000040A)
    ]
    VARIANT_BOOL onbeforedeactivate( void );
  };

  
  typedef enum tag_htmlCompatMode
  {
    htmlCompatModeBackCompat = 0, 
    htmlCompatModeCSS1Compat = 1, 
    htmlCompatMode_Max = 2147483647
  } _htmlCompatMode;

  [
    uuid(25336920-03F9-11CF-8FD0-00AA00686F13)
  ]
  coclass HTMLDocument
  {
    [default] dispinterface DispHTMLDocument;
    [default, source] dispinterface HTMLDocumentEvents;
    [source] dispinterface HTMLDocumentEvents2;
    interface IHTMLDocument2;
    interface IHTMLDocument3;
    interface IHTMLDocument4;
    interface IHTMLDocument5;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
  };

  [
    uuid(A6D897FF-0A95-11D1-B0BA-006008166E11), 
    hidden
  ]
   dispinterface DWebBridgeEvents
  {
    properties:
    methods:
    [
    id(0x00000001)
    ]
    void onscriptletevent([in] BSTR name, [in] VARIANT eventData );
    [
    id(0xFFFFFD9F)
    ]
    void onreadystatechange( void );
    [
    id(0xFFFFFDA8)
    ]
    VARIANT_BOOL onclick( void );
    [
    id(0xFFFFFDA7)
    ]
    VARIANT_BOOL ondblclick( void );
    [
    id(0xFFFFFDA6)
    ]
    void onkeydown( void );
    [
    id(0xFFFFFDA4)
    ]
    void onkeyup( void );
    [
    id(0xFFFFFDA5)
    ]
    VARIANT_BOOL onkeypress( void );
    [
    id(0xFFFFFDA3)
    ]
    void onmousedown( void );
    [
    id(0xFFFFFDA2)
    ]
    void onmousemove( void );
    [
    id(0xFFFFFDA1)
    ]
    void onmouseup( void );
  };

  [
    uuid(AE24FDAD-03C6-11D1-8B76-0080C744F389), 
    dual, 
    oleautomation
  ]
   interface IWebBridge: IDispatch
  {
    [
    propput, 
    id(0x00000001)
    ]
    HRESULT _stdcall url([in] BSTR p );
    [
    propget, 
    id(0x00000001)
    ]
    HRESULT _stdcall url([out, retval] BSTR * p );
    [
    propput, 
    id(0x00000002)
    ]
    HRESULT _stdcall Scrollbar([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x00000002)
    ]
    HRESULT _stdcall Scrollbar([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x00000003)
    ]
    HRESULT _stdcall embed([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x00000003)
    ]
    HRESULT _stdcall embed([out, retval] VARIANT_BOOL * p );
    [
    propget, 
    id(0x00000480)
    ]
    HRESULT _stdcall event([out, retval]  IDispatch ** p );
    [
    propget, 
    id(0xFFFFFDF3)
    ]
    HRESULT _stdcall readyState([out, retval] long * p );
    [
    id(0xFFFFFDD8)
    ]
    HRESULT _stdcall AboutBox( void );
  };

  [
    uuid(A5170870-0CF8-11D1-8B91-0080C744F389), 
    dual, 
    oleautomation
  ]
   interface IWBScriptControl: IDispatch
  {
    [
    id(0x00000001)
    ]
    HRESULT _stdcall raiseEvent([in] BSTR name, [in] VARIANT eventData );
    [
    id(0x00000002)
    ]
    HRESULT _stdcall bubbleEvent( void );
    [
    id(0x00000003)
    ]
    HRESULT _stdcall setContextMenu([in] VARIANT menuItemPairs );
    [
    propput, 
    id(0x00000004)
    ]
    HRESULT _stdcall selectableContent([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x00000004)
    ]
    HRESULT _stdcall selectableContent([out, retval] VARIANT_BOOL * p );
    [
    propget, 
    id(0x00000005)
    ]
    HRESULT _stdcall frozen([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x00000007)
    ]
    HRESULT _stdcall Scrollbar([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x00000007)
    ]
    HRESULT _stdcall Scrollbar([out, retval] VARIANT_BOOL * p );
    [
    propget, 
    id(0x00000008)
    ]
    HRESULT _stdcall version([out, retval] BSTR * p );
    [
    propget, 
    id(0x00000009)
    ]
    HRESULT _stdcall visibility([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x0000000A)
    ]
    HRESULT _stdcall onvisibilitychange([in] VARIANT p );
    [
    propget, 
    id(0x0000000A)
    ]
    HRESULT _stdcall onvisibilitychange([out, retval] VARIANT * p );
  };

  [
    uuid(AE24FDAE-03C6-11D1-8B76-0080C744F389), 
    control
  ]
  coclass Scriptlet
  {
    [default] interface IWebBridge;
    [default, source] dispinterface DWebBridgeEvents;
  };

  
  typedef enum tag_BoolValue
  {
    True = 1, 
    False = 0, 
    BoolValue_Max = 2147483647
  } _BoolValue;

  [
    uuid(3050F25F-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLEmbedElement: IDispatch
  {
    [
    propput, 
    id(0x80010BC2)
    ]
    HRESULT _stdcall hidden([in] BSTR p );
    [
    propget, 
    id(0x80010BC2)
    ]
    HRESULT _stdcall hidden([out, retval] BSTR * p );
    [
    propget, 
    id(0x80010BBC)
    ]
    HRESULT _stdcall palette([out, retval] BSTR * p );
    [
    propget, 
    id(0x80010BBD)
    ]
    HRESULT _stdcall pluginspage([out, retval] BSTR * p );
    [
    propput, 
    id(0x80010BBE)
    ]
    HRESULT _stdcall src([in] BSTR p );
    [
    propget, 
    id(0x80010BBE)
    ]
    HRESULT _stdcall src([out, retval] BSTR * p );
    [
    propput, 
    id(0x80010BC0)
    ]
    HRESULT _stdcall units([in] BSTR p );
    [
    propget, 
    id(0x80010BC0)
    ]
    HRESULT _stdcall units([out, retval] BSTR * p );
    [
    propput, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall name([in] BSTR p );
    [
    propget, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall name([out, retval] BSTR * p );
    [
    propput, 
    id(0x80010005)
    ]
    HRESULT _stdcall width([in] VARIANT p );
    [
    propget, 
    id(0x80010005)
    ]
    HRESULT _stdcall width([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80010006)
    ]
    HRESULT _stdcall height([in] VARIANT p );
    [
    propget, 
    id(0x80010006)
    ]
    HRESULT _stdcall height([out, retval] VARIANT * p );
  };

  [
    uuid(3050F25D-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLEmbed
  {
    [default] dispinterface DispHTMLEmbed;
    [default, source] dispinterface HTMLControlElementEvents;
    [source] dispinterface HTMLControlElementEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLControlElement;
    interface IHTMLEmbedElement;
  };

  [
    uuid(3050F3BA-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface HTMLMapEvents
  {
    properties:
    methods:
    [
    id(0x8001000A)
    ]
    VARIANT_BOOL onhelp( void );
    [
    id(0xFFFFFDA8)
    ]
    VARIANT_BOOL onclick( void );
    [
    id(0xFFFFFDA7)
    ]
    VARIANT_BOOL ondblclick( void );
    [
    id(0xFFFFFDA5)
    ]
    VARIANT_BOOL onkeypress( void );
    [
    id(0xFFFFFDA6)
    ]
    void onkeydown( void );
    [
    id(0xFFFFFDA4)
    ]
    void onkeyup( void );
    [
    id(0x80010009)
    ]
    void onmouseout( void );
    [
    id(0x80010008)
    ]
    void onmouseover( void );
    [
    id(0xFFFFFDA2)
    ]
    void onmousemove( void );
    [
    id(0xFFFFFDA3)
    ]
    void onmousedown( void );
    [
    id(0xFFFFFDA1)
    ]
    void onmouseup( void );
    [
    id(0x8001000C)
    ]
    VARIANT_BOOL onselectstart( void );
    [
    id(0x80010011)
    ]
    void onfilterchange( void );
    [
    id(0x8001000B)
    ]
    VARIANT_BOOL ondragstart( void );
    [
    id(0x80010004)
    ]
    VARIANT_BOOL onbeforeupdate( void );
    [
    id(0x80010005)
    ]
    void onafterupdate( void );
    [
    id(0x8001000D)
    ]
    VARIANT_BOOL onerrorupdate( void );
    [
    id(0x80010006)
    ]
    VARIANT_BOOL onrowexit( void );
    [
    id(0x80010007)
    ]
    void onrowenter( void );
    [
    id(0x8001000E)
    ]
    void ondatasetchanged( void );
    [
    id(0x8001000F)
    ]
    void ondataavailable( void );
    [
    id(0x80010010)
    ]
    void ondatasetcomplete( void );
    [
    id(0x80010012)
    ]
    void onlosecapture( void );
    [
    id(0x80010013)
    ]
    void onpropertychange( void );
    [
    id(0x000003F6)
    ]
    void onscroll( void );
    [
    id(0x80010001)
    ]
    void onfocus( void );
    [
    id(0x80010000)
    ]
    void onblur( void );
    [
    id(0x000003F8)
    ]
    void onresize( void );
    [
    id(0x80010014)
    ]
    VARIANT_BOOL ondrag( void );
    [
    id(0x80010015)
    ]
    void ondragend( void );
    [
    id(0x80010016)
    ]
    VARIANT_BOOL ondragenter( void );
    [
    id(0x80010017)
    ]
    VARIANT_BOOL ondragover( void );
    [
    id(0x80010018)
    ]
    void ondragleave( void );
    [
    id(0x80010019)
    ]
    VARIANT_BOOL ondrop( void );
    [
    id(0x8001001D)
    ]
    VARIANT_BOOL onbeforecut( void );
    [
    id(0x8001001A)
    ]
    VARIANT_BOOL oncut( void );
    [
    id(0x8001001E)
    ]
    VARIANT_BOOL onbeforecopy( void );
    [
    id(0x8001001B)
    ]
    VARIANT_BOOL oncopy( void );
    [
    id(0x8001001F)
    ]
    VARIANT_BOOL onbeforepaste( void );
    [
    id(0x8001001C)
    ]
    VARIANT_BOOL onpaste( void );
    [
    id(0x000003FF)
    ]
    VARIANT_BOOL oncontextmenu( void );
    [
    id(0x80010020)
    ]
    void onrowsdelete( void );
    [
    id(0x80010021)
    ]
    void onrowsinserted( void );
    [
    id(0x80010022)
    ]
    void oncellchange( void );
    [
    id(0xFFFFFD9F)
    ]
    void onreadystatechange( void );
    [
    id(0x00000403)
    ]
    void onbeforeeditfocus( void );
    [
    id(0x00000406)
    ]
    void onlayoutcomplete( void );
    [
    id(0x00000407)
    ]
    void onpage( void );
    [
    id(0x0000040A)
    ]
    VARIANT_BOOL onbeforedeactivate( void );
    [
    id(0x00000417)
    ]
    VARIANT_BOOL onbeforeactivate( void );
    [
    id(0x0000040B)
    ]
    void onmove( void );
    [
    id(0x0000040C)
    ]
    VARIANT_BOOL oncontrolselect( void );
    [
    id(0x0000040E)
    ]
    VARIANT_BOOL onmovestart( void );
    [
    id(0x0000040F)
    ]
    void onmoveend( void );
    [
    id(0x00000410)
    ]
    VARIANT_BOOL onresizestart( void );
    [
    id(0x00000411)
    ]
    void onresizeend( void );
    [
    id(0x00000412)
    ]
    void onmouseenter( void );
    [
    id(0x00000413)
    ]
    void onmouseleave( void );
    [
    id(0x00000409)
    ]
    VARIANT_BOOL onmousewheel( void );
    [
    id(0x00000414)
    ]
    void onactivate( void );
    [
    id(0x00000415)
    ]
    void ondeactivate( void );
    [
    id(0x00000418)
    ]
    void onfocusin( void );
    [
    id(0x00000419)
    ]
    void onfocusout( void );
  };

  [
    uuid(3050F5EC-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLAreasCollection2: IDispatch
  {
    [
    id(0x000005E1)
    ]
    HRESULT _stdcall urns([in] VARIANT urn, [out, retval]  IDispatch ** pdisp );
  };

  [
    uuid(3050F837-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLAreasCollection3: IDispatch
  {
    [
    id(0x000005E2)
    ]
    HRESULT _stdcall namedItem([in] BSTR name, [out, retval]  IDispatch ** pdisp );
  };

  [
    uuid(3050F4CA-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLAreasCollection
  {
    [default] dispinterface DispHTMLAreasCollection;
    interface IHTMLAreasCollection;
    interface IHTMLAreasCollection2;
    interface IHTMLAreasCollection3;
  };

  [
    uuid(3050F271-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLMapElement
  {
    [default] dispinterface DispHTMLMapElement;
    [default, source] dispinterface HTMLMapEvents;
    [source] dispinterface HTMLMapEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLMapElement;
  };

  [
    uuid(3050F366-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface HTMLAreaEvents
  {
    properties:
    methods:
    [
    id(0x8001000A)
    ]
    VARIANT_BOOL onhelp( void );
    [
    id(0xFFFFFDA8)
    ]
    VARIANT_BOOL onclick( void );
    [
    id(0xFFFFFDA7)
    ]
    VARIANT_BOOL ondblclick( void );
    [
    id(0xFFFFFDA5)
    ]
    VARIANT_BOOL onkeypress( void );
    [
    id(0xFFFFFDA6)
    ]
    void onkeydown( void );
    [
    id(0xFFFFFDA4)
    ]
    void onkeyup( void );
    [
    id(0x80010009)
    ]
    void onmouseout( void );
    [
    id(0x80010008)
    ]
    void onmouseover( void );
    [
    id(0xFFFFFDA2)
    ]
    void onmousemove( void );
    [
    id(0xFFFFFDA3)
    ]
    void onmousedown( void );
    [
    id(0xFFFFFDA1)
    ]
    void onmouseup( void );
    [
    id(0x8001000C)
    ]
    VARIANT_BOOL onselectstart( void );
    [
    id(0x80010011)
    ]
    void onfilterchange( void );
    [
    id(0x8001000B)
    ]
    VARIANT_BOOL ondragstart( void );
    [
    id(0x80010004)
    ]
    VARIANT_BOOL onbeforeupdate( void );
    [
    id(0x80010005)
    ]
    void onafterupdate( void );
    [
    id(0x8001000D)
    ]
    VARIANT_BOOL onerrorupdate( void );
    [
    id(0x80010006)
    ]
    VARIANT_BOOL onrowexit( void );
    [
    id(0x80010007)
    ]
    void onrowenter( void );
    [
    id(0x8001000E)
    ]
    void ondatasetchanged( void );
    [
    id(0x8001000F)
    ]
    void ondataavailable( void );
    [
    id(0x80010010)
    ]
    void ondatasetcomplete( void );
    [
    id(0x80010012)
    ]
    void onlosecapture( void );
    [
    id(0x80010013)
    ]
    void onpropertychange( void );
    [
    id(0x000003F6)
    ]
    void onscroll( void );
    [
    id(0x80010001)
    ]
    void onfocus( void );
    [
    id(0x80010000)
    ]
    void onblur( void );
    [
    id(0x000003F8)
    ]
    void onresize( void );
    [
    id(0x80010014)
    ]
    VARIANT_BOOL ondrag( void );
    [
    id(0x80010015)
    ]
    void ondragend( void );
    [
    id(0x80010016)
    ]
    VARIANT_BOOL ondragenter( void );
    [
    id(0x80010017)
    ]
    VARIANT_BOOL ondragover( void );
    [
    id(0x80010018)
    ]
    void ondragleave( void );
    [
    id(0x80010019)
    ]
    VARIANT_BOOL ondrop( void );
    [
    id(0x8001001D)
    ]
    VARIANT_BOOL onbeforecut( void );
    [
    id(0x8001001A)
    ]
    VARIANT_BOOL oncut( void );
    [
    id(0x8001001E)
    ]
    VARIANT_BOOL onbeforecopy( void );
    [
    id(0x8001001B)
    ]
    VARIANT_BOOL oncopy( void );
    [
    id(0x8001001F)
    ]
    VARIANT_BOOL onbeforepaste( void );
    [
    id(0x8001001C)
    ]
    VARIANT_BOOL onpaste( void );
    [
    id(0x000003FF)
    ]
    VARIANT_BOOL oncontextmenu( void );
    [
    id(0x80010020)
    ]
    void onrowsdelete( void );
    [
    id(0x80010021)
    ]
    void onrowsinserted( void );
    [
    id(0x80010022)
    ]
    void oncellchange( void );
    [
    id(0xFFFFFD9F)
    ]
    void onreadystatechange( void );
    [
    id(0x00000403)
    ]
    void onbeforeeditfocus( void );
    [
    id(0x00000406)
    ]
    void onlayoutcomplete( void );
    [
    id(0x00000407)
    ]
    void onpage( void );
    [
    id(0x0000040A)
    ]
    VARIANT_BOOL onbeforedeactivate( void );
    [
    id(0x00000417)
    ]
    VARIANT_BOOL onbeforeactivate( void );
    [
    id(0x0000040B)
    ]
    void onmove( void );
    [
    id(0x0000040C)
    ]
    VARIANT_BOOL oncontrolselect( void );
    [
    id(0x0000040E)
    ]
    VARIANT_BOOL onmovestart( void );
    [
    id(0x0000040F)
    ]
    void onmoveend( void );
    [
    id(0x00000410)
    ]
    VARIANT_BOOL onresizestart( void );
    [
    id(0x00000411)
    ]
    void onresizeend( void );
    [
    id(0x00000412)
    ]
    void onmouseenter( void );
    [
    id(0x00000413)
    ]
    void onmouseleave( void );
    [
    id(0x00000409)
    ]
    VARIANT_BOOL onmousewheel( void );
    [
    id(0x00000414)
    ]
    void onactivate( void );
    [
    id(0x00000415)
    ]
    void ondeactivate( void );
    [
    id(0x00000418)
    ]
    void onfocusin( void );
    [
    id(0x00000419)
    ]
    void onfocusout( void );
  };

  [
    uuid(3050F265-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLAreaElement: IDispatch
  {
    [
    propput, 
    id(0x000003E9)
    ]
    HRESULT _stdcall shape([in] BSTR p );
    [
    propget, 
    id(0x000003E9)
    ]
    HRESULT _stdcall shape([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003EA)
    ]
    HRESULT _stdcall coords([in] BSTR p );
    [
    propget, 
    id(0x000003EA)
    ]
    HRESULT _stdcall coords([out, retval] BSTR * p );
    [
    propput, 
    id(0x00000000)
    ]
    HRESULT _stdcall href([in] BSTR p );
    [
    propget, 
    id(0x00000000)
    ]
    HRESULT _stdcall href([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003EC)
    ]
    HRESULT _stdcall target([in] BSTR p );
    [
    propget, 
    id(0x000003EC)
    ]
    HRESULT _stdcall target([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003ED)
    ]
    HRESULT _stdcall alt([in] BSTR p );
    [
    propget, 
    id(0x000003ED)
    ]
    HRESULT _stdcall alt([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003EE)
    ]
    HRESULT _stdcall noHref([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x000003EE)
    ]
    HRESULT _stdcall noHref([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x000003EF)
    ]
    HRESULT _stdcall host([in] BSTR p );
    [
    propget, 
    id(0x000003EF)
    ]
    HRESULT _stdcall host([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003F0)
    ]
    HRESULT _stdcall hostname([in] BSTR p );
    [
    propget, 
    id(0x000003F0)
    ]
    HRESULT _stdcall hostname([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003F1)
    ]
    HRESULT _stdcall pathname([in] BSTR p );
    [
    propget, 
    id(0x000003F1)
    ]
    HRESULT _stdcall pathname([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003F2)
    ]
    HRESULT _stdcall port([in] BSTR p );
    [
    propget, 
    id(0x000003F2)
    ]
    HRESULT _stdcall port([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003F3)
    ]
    HRESULT _stdcall protocol([in] BSTR p );
    [
    propget, 
    id(0x000003F3)
    ]
    HRESULT _stdcall protocol([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003F4)
    ]
    HRESULT _stdcall search([in] BSTR p );
    [
    propget, 
    id(0x000003F4)
    ]
    HRESULT _stdcall search([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003F5)
    ]
    HRESULT _stdcall hash([in] BSTR p );
    [
    propget, 
    id(0x000003F5)
    ]
    HRESULT _stdcall hash([out, retval] BSTR * p );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onblur([in] VARIANT p );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onblur([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onfocus([in] VARIANT p );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onfocus([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall tabIndex([in] short p );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall tabIndex([out, retval] short * p );
    [
    id(0x800107D0)
    ]
    HRESULT _stdcall focus( void );
    [
    id(0x800107D2)
    ]
    HRESULT _stdcall blur( void );
  };

  [
    uuid(3050F283-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLAreaElement
  {
    [default] dispinterface DispHTMLAreaElement;
    [default, source] dispinterface HTMLAreaEvents;
    [source] dispinterface HTMLAreaEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLAreaElement;
  };

  
  typedef enum tag_htmlCaptionAlign
  {
    htmlCaptionAlignNotSet = 0, 
    htmlCaptionAlignLeft = 1, 
    htmlCaptionAlignCenter = 2, 
    htmlCaptionAlignRight = 3, 
    htmlCaptionAlignJustify = 4, 
    htmlCaptionAlignTop = 5, 
    htmlCaptionAlignBottom = 6, 
    htmlCaptionAlign_Max = 2147483647
  } _htmlCaptionAlign;

  
  typedef enum tag_htmlCaptionVAlign
  {
    htmlCaptionVAlignNotSet = 0, 
    htmlCaptionVAlignTop = 1, 
    htmlCaptionVAlignBottom = 2, 
    htmlCaptionVAlign_Max = 2147483647
  } _htmlCaptionVAlign;

  [
    uuid(3050F2EB-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLTableCaption: IDispatch
  {
    [
    propput, 
    id(0x80010048)
    ]
    HRESULT _stdcall align([in] BSTR p );
    [
    propget, 
    id(0x80010048)
    ]
    HRESULT _stdcall align([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113A7)
    ]
    HRESULT _stdcall vAlign([in] BSTR p );
    [
    propget, 
    id(0x800113A7)
    ]
    HRESULT _stdcall vAlign([out, retval] BSTR * p );
  };

  [
    uuid(3050F2EC-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLTableCaption
  {
    [default] dispinterface DispHTMLTableCaption;
    [default, source] dispinterface HTMLTextContainerEvents;
    [source] dispinterface HTMLTextContainerEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLControlElement;
    interface IHTMLTextContainer;
    interface IHTMLTableCaption;
  };

  [
    uuid(3050F20C-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLCommentElement: IDispatch
  {
    [
    propput, 
    id(0x000003E9), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall text([in] BSTR p );
    [
    propget, 
    id(0x000003E9), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall text([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003EA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall atomic([in] long p );
    [
    propget, 
    id(0x000003EA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall atomic([out, retval] long * p );
  };

  [
    uuid(3050F813-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLCommentElement2: IDispatch
  {
    [
    propput, 
    id(0x000003EB)
    ]
    HRESULT _stdcall data([in] BSTR p );
    [
    propget, 
    id(0x000003EB)
    ]
    HRESULT _stdcall data([out, retval] BSTR * p );
    [
    propget, 
    id(0x000003EC)
    ]
    HRESULT _stdcall length([out, retval] long * p );
    [
    id(0x000003ED)
    ]
    HRESULT _stdcall substringData([in] long offset, [in] long Count, [out, retval] BSTR * pbstrsubString );
    [
    id(0x000003EE)
    ]
    HRESULT _stdcall appendData([in] BSTR bstrstring );
    [
    id(0x000003EF)
    ]
    HRESULT _stdcall insertData([in] long offset, [in] BSTR bstrstring );
    [
    id(0x000003F0)
    ]
    HRESULT _stdcall deleteData([in] long offset, [in] long Count );
    [
    id(0x000003F1)
    ]
    HRESULT _stdcall replaceData([in] long offset, [in] long Count, [in] BSTR bstrstring );
  };

  [
    uuid(3050F317-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLCommentElement
  {
    [default] dispinterface DispHTMLCommentElement;
    [default, source] dispinterface HTMLElementEvents;
    [source] dispinterface HTMLElementEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLCommentElement;
    interface IHTMLCommentElement2;
  };

  [
    uuid(3050F20A-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLPhraseElement: IDispatch
  {
  };

  [
    uuid(3050F824-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLPhraseElement2: IDispatch
  {
    [
    propput, 
    id(0x000003E9), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall cite([in] BSTR p );
    [
    propget, 
    id(0x000003E9), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall cite([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003EA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall dateTime([in] BSTR p );
    [
    propget, 
    id(0x000003EA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall dateTime([out, retval] BSTR * p );
  };

  [
    uuid(3050F3F3-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLSpanElement: IDispatch
  {
  };

  [
    uuid(3050F26E-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLPhraseElement
  {
    [default] dispinterface DispHTMLPhraseElement;
    [default, source] dispinterface HTMLElementEvents;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLPhraseElement;
    interface IHTMLPhraseElement2;
  };

  [
    uuid(3050F3F5-98B4-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLSpanElement
  {
    [default] dispinterface DispHTMLSpanElement;
    [default, source] dispinterface HTMLElementEvents;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLDatabinding;
    interface IHTMLPhraseElement;
    interface IHTMLSpanElement;
    interface IHTMLControlElement;
  };

  [
    uuid(3050F407-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface HTMLTableEvents
  {
    properties:
    methods:
    [
    id(0x8001000A)
    ]
    VARIANT_BOOL onhelp( void );
    [
    id(0xFFFFFDA8)
    ]
    VARIANT_BOOL onclick( void );
    [
    id(0xFFFFFDA7)
    ]
    VARIANT_BOOL ondblclick( void );
    [
    id(0xFFFFFDA5)
    ]
    VARIANT_BOOL onkeypress( void );
    [
    id(0xFFFFFDA6)
    ]
    void onkeydown( void );
    [
    id(0xFFFFFDA4)
    ]
    void onkeyup( void );
    [
    id(0x80010009)
    ]
    void onmouseout( void );
    [
    id(0x80010008)
    ]
    void onmouseover( void );
    [
    id(0xFFFFFDA2)
    ]
    void onmousemove( void );
    [
    id(0xFFFFFDA3)
    ]
    void onmousedown( void );
    [
    id(0xFFFFFDA1)
    ]
    void onmouseup( void );
    [
    id(0x8001000C)
    ]
    VARIANT_BOOL onselectstart( void );
    [
    id(0x80010011)
    ]
    void onfilterchange( void );
    [
    id(0x8001000B)
    ]
    VARIANT_BOOL ondragstart( void );
    [
    id(0x80010004)
    ]
    VARIANT_BOOL onbeforeupdate( void );
    [
    id(0x80010005)
    ]
    void onafterupdate( void );
    [
    id(0x8001000D)
    ]
    VARIANT_BOOL onerrorupdate( void );
    [
    id(0x80010006)
    ]
    VARIANT_BOOL onrowexit( void );
    [
    id(0x80010007)
    ]
    void onrowenter( void );
    [
    id(0x8001000E)
    ]
    void ondatasetchanged( void );
    [
    id(0x8001000F)
    ]
    void ondataavailable( void );
    [
    id(0x80010010)
    ]
    void ondatasetcomplete( void );
    [
    id(0x80010012)
    ]
    void onlosecapture( void );
    [
    id(0x80010013)
    ]
    void onpropertychange( void );
    [
    id(0x000003F6)
    ]
    void onscroll( void );
    [
    id(0x80010001)
    ]
    void onfocus( void );
    [
    id(0x80010000)
    ]
    void onblur( void );
    [
    id(0x000003F8)
    ]
    void onresize( void );
    [
    id(0x80010014)
    ]
    VARIANT_BOOL ondrag( void );
    [
    id(0x80010015)
    ]
    void ondragend( void );
    [
    id(0x80010016)
    ]
    VARIANT_BOOL ondragenter( void );
    [
    id(0x80010017)
    ]
    VARIANT_BOOL ondragover( void );
    [
    id(0x80010018)
    ]
    void ondragleave( void );
    [
    id(0x80010019)
    ]
    VARIANT_BOOL ondrop( void );
    [
    id(0x8001001D)
    ]
    VARIANT_BOOL onbeforecut( void );
    [
    id(0x8001001A)
    ]
    VARIANT_BOOL oncut( void );
    [
    id(0x8001001E)
    ]
    VARIANT_BOOL onbeforecopy( void );
    [
    id(0x8001001B)
    ]
    VARIANT_BOOL oncopy( void );
    [
    id(0x8001001F)
    ]
    VARIANT_BOOL onbeforepaste( void );
    [
    id(0x8001001C)
    ]
    VARIANT_BOOL onpaste( void );
    [
    id(0x000003FF)
    ]
    VARIANT_BOOL oncontextmenu( void );
    [
    id(0x80010020)
    ]
    void onrowsdelete( void );
    [
    id(0x80010021)
    ]
    void onrowsinserted( void );
    [
    id(0x80010022)
    ]
    void oncellchange( void );
    [
    id(0xFFFFFD9F)
    ]
    void onreadystatechange( void );
    [
    id(0x00000403)
    ]
    void onbeforeeditfocus( void );
    [
    id(0x00000406)
    ]
    void onlayoutcomplete( void );
    [
    id(0x00000407)
    ]
    void onpage( void );
    [
    id(0x0000040A)
    ]
    VARIANT_BOOL onbeforedeactivate( void );
    [
    id(0x00000417)
    ]
    VARIANT_BOOL onbeforeactivate( void );
    [
    id(0x0000040B)
    ]
    void onmove( void );
    [
    id(0x0000040C)
    ]
    VARIANT_BOOL oncontrolselect( void );
    [
    id(0x0000040E)
    ]
    VARIANT_BOOL onmovestart( void );
    [
    id(0x0000040F)
    ]
    void onmoveend( void );
    [
    id(0x00000410)
    ]
    VARIANT_BOOL onresizestart( void );
    [
    id(0x00000411)
    ]
    void onresizeend( void );
    [
    id(0x00000412)
    ]
    void onmouseenter( void );
    [
    id(0x00000413)
    ]
    void onmouseleave( void );
    [
    id(0x00000409)
    ]
    VARIANT_BOOL onmousewheel( void );
    [
    id(0x00000414)
    ]
    void onactivate( void );
    [
    id(0x00000415)
    ]
    void ondeactivate( void );
    [
    id(0x00000418)
    ]
    void onfocusin( void );
    [
    id(0x00000419)
    ]
    void onfocusout( void );
  };

  
  typedef enum tag_htmlFrame
  {
    htmlFrameNotSet = 0, 
    htmlFramevoid = 1, 
    htmlFrameabove = 2, 
    htmlFramebelow = 3, 
    htmlFramehsides = 4, 
    htmlFramelhs = 5, 
    htmlFramerhs = 6, 
    htmlFramevsides = 7, 
    htmlFramebox = 8, 
    htmlFrameborder = 9, 
    htmlFrame_Max = 2147483647
  } _htmlFrame;

  
  typedef enum tag_htmlRules
  {
    htmlRulesNotSet = 0, 
    htmlRulesnone = 1, 
    htmlRulesgroups = 2, 
    htmlRulesrows = 3, 
    htmlRulescols = 4, 
    htmlRulesall = 5, 
    htmlRules_Max = 2147483647
  } _htmlRules;

  
  typedef enum tag_htmlCellAlign
  {
    htmlCellAlignNotSet = 0, 
    htmlCellAlignLeft = 1, 
    htmlCellAlignCenter = 2, 
    htmlCellAlignRight = 3, 
    htmlCellAlignMiddle = 2, 
    htmlCellAlign_Max = 2147483647
  } _htmlCellAlign;

  
  typedef enum tag_htmlCellVAlign
  {
    htmlCellVAlignNotSet = 0, 
    htmlCellVAlignTop = 1, 
    htmlCellVAlignMiddle = 2, 
    htmlCellVAlignBottom = 3, 
    htmlCellVAlignBaseline = 4, 
    htmlCellVAlignCenter = 2, 
    htmlCellVAlign_Max = 2147483647
  } _htmlCellVAlign;

  [
    uuid(3050F829-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLTable3: IDispatch
  {
    [
    propput, 
    id(0x0000040F), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall summary([in] BSTR p );
    [
    propget, 
    id(0x0000040F), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall summary([out, retval] BSTR * p );
  };

  [
    uuid(3050F23A-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLTableCol: IDispatch
  {
    [
    propput, 
    id(0x000003E9)
    ]
    HRESULT _stdcall span([in] long p );
    [
    propget, 
    id(0x000003E9)
    ]
    HRESULT _stdcall span([out, retval] long * p );
    [
    propput, 
    id(0x80010005)
    ]
    HRESULT _stdcall width([in] VARIANT p );
    [
    propget, 
    id(0x80010005)
    ]
    HRESULT _stdcall width([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80010048)
    ]
    HRESULT _stdcall align([in] BSTR p );
    [
    propget, 
    id(0x80010048)
    ]
    HRESULT _stdcall align([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113A7)
    ]
    HRESULT _stdcall vAlign([in] BSTR p );
    [
    propget, 
    id(0x800113A7)
    ]
    HRESULT _stdcall vAlign([out, retval] BSTR * p );
  };

  [
    uuid(3050F82A-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLTableCol2: IDispatch
  {
    [
    propput, 
    id(0x000003EA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall ch([in] BSTR p );
    [
    propget, 
    id(0x000003EA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall ch([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003EB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall chOff([in] BSTR p );
    [
    propget, 
    id(0x000003EB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall chOff([out, retval] BSTR * p );
  };

  [
    uuid(3050F5C7-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLTableSection2: IDispatch
  {
    [
    id(0x000003EB)
    ]
    HRESULT _stdcall moveRow([in, optional, defaultvalue(-1)] long indexFrom, [in, optional, defaultvalue(-1)] long indexTo, [out, retval]  IDispatch ** row );
  };

  [
    uuid(3050F82B-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLTableSection3: IDispatch
  {
    [
    propput, 
    id(0x000003EC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall ch([in] BSTR p );
    [
    propget, 
    id(0x000003EC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall ch([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003ED), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall chOff([in] BSTR p );
    [
    propget, 
    id(0x000003ED), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall chOff([out, retval] BSTR * p );
  };

  [
    uuid(3050F4A1-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLTableRow2: IDispatch
  {
    [
    propput, 
    id(0x80010006)
    ]
    HRESULT _stdcall height([in] VARIANT p );
    [
    propget, 
    id(0x80010006)
    ]
    HRESULT _stdcall height([out, retval] VARIANT * p );
  };

  [
    uuid(3050F82C-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLTableRow3: IDispatch
  {
    [
    propput, 
    id(0x000003F1), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall ch([in] BSTR p );
    [
    propget, 
    id(0x000003F1), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall ch([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003F2), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall chOff([in] BSTR p );
    [
    propget, 
    id(0x000003F2), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall chOff([out, retval] BSTR * p );
  };

  [
    uuid(3050F413-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLTableRowMetrics: IDispatch
  {
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall clientHeight([out, retval] long * p );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall clientWidth([out, retval] long * p );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall clientTop([out, retval] long * p );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall clientLeft([out, retval] long * p );
  };

  [
    uuid(3050F23D-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLTableCell: IDispatch
  {
    [
    propput, 
    id(0x000007D1)
    ]
    HRESULT _stdcall rowSpan([in] long p );
    [
    propget, 
    id(0x000007D1)
    ]
    HRESULT _stdcall rowSpan([out, retval] long * p );
    [
    propput, 
    id(0x000007D2)
    ]
    HRESULT _stdcall colSpan([in] long p );
    [
    propget, 
    id(0x000007D2)
    ]
    HRESULT _stdcall colSpan([out, retval] long * p );
    [
    propput, 
    id(0x80010048)
    ]
    HRESULT _stdcall align([in] BSTR p );
    [
    propget, 
    id(0x80010048)
    ]
    HRESULT _stdcall align([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113A7)
    ]
    HRESULT _stdcall vAlign([in] BSTR p );
    [
    propget, 
    id(0x800113A7)
    ]
    HRESULT _stdcall vAlign([out, retval] BSTR * p );
    [
    propput, 
    id(0xFFFFFE0B)
    ]
    HRESULT _stdcall bgColor([in] VARIANT p );
    [
    propget, 
    id(0xFFFFFE0B)
    ]
    HRESULT _stdcall bgColor([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001138D)
    ]
    HRESULT _stdcall noWrap([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x8001138D)
    ]
    HRESULT _stdcall noWrap([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x80011389)
    ]
    HRESULT _stdcall background([in] BSTR p );
    [
    propget, 
    id(0x80011389)
    ]
    HRESULT _stdcall background([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113A4)
    ]
    HRESULT _stdcall borderColor([in] VARIANT p );
    [
    propget, 
    id(0x800113A4)
    ]
    HRESULT _stdcall borderColor([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113A5)
    ]
    HRESULT _stdcall borderColorLight([in] VARIANT p );
    [
    propget, 
    id(0x800113A5)
    ]
    HRESULT _stdcall borderColorLight([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113A6)
    ]
    HRESULT _stdcall borderColorDark([in] VARIANT p );
    [
    propget, 
    id(0x800113A6)
    ]
    HRESULT _stdcall borderColorDark([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80010005)
    ]
    HRESULT _stdcall width([in] VARIANT p );
    [
    propget, 
    id(0x80010005)
    ]
    HRESULT _stdcall width([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80010006)
    ]
    HRESULT _stdcall height([in] VARIANT p );
    [
    propget, 
    id(0x80010006)
    ]
    HRESULT _stdcall height([out, retval] VARIANT * p );
    [
    propget, 
    id(0x000007D3)
    ]
    HRESULT _stdcall cellIndex([out, retval] long * p );
  };

  [
    uuid(3050F82D-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLTableCell2: IDispatch
  {
    [
    propput, 
    id(0x000007D4), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall abbr([in] BSTR p );
    [
    propget, 
    id(0x000007D4), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall abbr([out, retval] BSTR * p );
    [
    propput, 
    id(0x000007D5), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall axis([in] BSTR p );
    [
    propget, 
    id(0x000007D5), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall axis([out, retval] BSTR * p );
    [
    propput, 
    id(0x000007D6), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall ch([in] BSTR p );
    [
    propget, 
    id(0x000007D6), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall ch([out, retval] BSTR * p );
    [
    propput, 
    id(0x000007D7), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall chOff([in] BSTR p );
    [
    propget, 
    id(0x000007D7), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall chOff([out, retval] BSTR * p );
    [
    propput, 
    id(0x000007D8), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall headers([in] BSTR p );
    [
    propget, 
    id(0x000007D8), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall headers([out, retval] BSTR * p );
    [
    propput, 
    id(0x000007D9), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scope([in] BSTR p );
    [
    propget, 
    id(0x000007D9), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scope([out, retval] BSTR * p );
  };

  [
    uuid(3050F26B-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLTable
  {
    [default] dispinterface DispHTMLTable;
    [default, source] dispinterface HTMLTableEvents;
    [source] dispinterface HTMLTableEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLDatabinding;
    interface IHTMLControlElement;
    interface IHTMLTable;
    interface IHTMLTable2;
    interface IHTMLTable3;
  };

  [
    uuid(3050F26C-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLTableCol
  {
    [default] dispinterface DispHTMLTableCol;
    [default, source] dispinterface HTMLElementEvents;
    [source] dispinterface HTMLElementEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLTableCol;
    interface IHTMLTableCol2;
  };

  [
    uuid(3050F2E9-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLTableSection
  {
    [default] dispinterface DispHTMLTableSection;
    [default, source] dispinterface HTMLElementEvents;
    [source] dispinterface HTMLElementEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLTableSection;
    interface IHTMLTableSection2;
    interface IHTMLTableSection3;
  };

  [
    uuid(3050F26D-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLTableRow
  {
    [default] dispinterface DispHTMLTableRow;
    [default, source] dispinterface HTMLControlElementEvents;
    [source] dispinterface HTMLControlElementEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLTableRow;
    interface IHTMLTableRowMetrics;
    interface IHTMLTableRow2;
    interface IHTMLTableRow3;
  };

  [
    uuid(3050F246-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLTableCell
  {
    [default] dispinterface DispHTMLTableCell;
    [default, source] dispinterface HTMLTextContainerEvents;
    [source] dispinterface HTMLTextContainerEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLControlElement;
    interface IHTMLTextContainer;
    interface IHTMLTableCell;
    interface IHTMLTableCell2;
  };

  [
    uuid(3050F3E2-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface HTMLScriptEvents
  {
    properties:
    methods:
    [
    id(0x8001000A)
    ]
    VARIANT_BOOL onhelp( void );
    [
    id(0xFFFFFDA8)
    ]
    VARIANT_BOOL onclick( void );
    [
    id(0xFFFFFDA7)
    ]
    VARIANT_BOOL ondblclick( void );
    [
    id(0xFFFFFDA5)
    ]
    VARIANT_BOOL onkeypress( void );
    [
    id(0xFFFFFDA6)
    ]
    void onkeydown( void );
    [
    id(0xFFFFFDA4)
    ]
    void onkeyup( void );
    [
    id(0x80010009)
    ]
    void onmouseout( void );
    [
    id(0x80010008)
    ]
    void onmouseover( void );
    [
    id(0xFFFFFDA2)
    ]
    void onmousemove( void );
    [
    id(0xFFFFFDA3)
    ]
    void onmousedown( void );
    [
    id(0xFFFFFDA1)
    ]
    void onmouseup( void );
    [
    id(0x8001000C)
    ]
    VARIANT_BOOL onselectstart( void );
    [
    id(0x80010011)
    ]
    void onfilterchange( void );
    [
    id(0x8001000B)
    ]
    VARIANT_BOOL ondragstart( void );
    [
    id(0x80010004)
    ]
    VARIANT_BOOL onbeforeupdate( void );
    [
    id(0x80010005)
    ]
    void onafterupdate( void );
    [
    id(0x8001000D)
    ]
    VARIANT_BOOL onerrorupdate( void );
    [
    id(0x80010006)
    ]
    VARIANT_BOOL onrowexit( void );
    [
    id(0x80010007)
    ]
    void onrowenter( void );
    [
    id(0x8001000E)
    ]
    void ondatasetchanged( void );
    [
    id(0x8001000F)
    ]
    void ondataavailable( void );
    [
    id(0x80010010)
    ]
    void ondatasetcomplete( void );
    [
    id(0x80010012)
    ]
    void onlosecapture( void );
    [
    id(0x80010013)
    ]
    void onpropertychange( void );
    [
    id(0x000003F6)
    ]
    void onscroll( void );
    [
    id(0x80010001)
    ]
    void onfocus( void );
    [
    id(0x80010000)
    ]
    void onblur( void );
    [
    id(0x000003F8)
    ]
    void onresize( void );
    [
    id(0x80010014)
    ]
    VARIANT_BOOL ondrag( void );
    [
    id(0x80010015)
    ]
    void ondragend( void );
    [
    id(0x80010016)
    ]
    VARIANT_BOOL ondragenter( void );
    [
    id(0x80010017)
    ]
    VARIANT_BOOL ondragover( void );
    [
    id(0x80010018)
    ]
    void ondragleave( void );
    [
    id(0x80010019)
    ]
    VARIANT_BOOL ondrop( void );
    [
    id(0x8001001D)
    ]
    VARIANT_BOOL onbeforecut( void );
    [
    id(0x8001001A)
    ]
    VARIANT_BOOL oncut( void );
    [
    id(0x8001001E)
    ]
    VARIANT_BOOL onbeforecopy( void );
    [
    id(0x8001001B)
    ]
    VARIANT_BOOL oncopy( void );
    [
    id(0x8001001F)
    ]
    VARIANT_BOOL onbeforepaste( void );
    [
    id(0x8001001C)
    ]
    VARIANT_BOOL onpaste( void );
    [
    id(0x000003FF)
    ]
    VARIANT_BOOL oncontextmenu( void );
    [
    id(0x80010020)
    ]
    void onrowsdelete( void );
    [
    id(0x80010021)
    ]
    void onrowsinserted( void );
    [
    id(0x80010022)
    ]
    void oncellchange( void );
    [
    id(0xFFFFFD9F)
    ]
    void onreadystatechange( void );
    [
    id(0x00000403)
    ]
    void onbeforeeditfocus( void );
    [
    id(0x00000406)
    ]
    void onlayoutcomplete( void );
    [
    id(0x00000407)
    ]
    void onpage( void );
    [
    id(0x0000040A)
    ]
    VARIANT_BOOL onbeforedeactivate( void );
    [
    id(0x00000417)
    ]
    VARIANT_BOOL onbeforeactivate( void );
    [
    id(0x0000040B)
    ]
    void onmove( void );
    [
    id(0x0000040C)
    ]
    VARIANT_BOOL oncontrolselect( void );
    [
    id(0x0000040E)
    ]
    VARIANT_BOOL onmovestart( void );
    [
    id(0x0000040F)
    ]
    void onmoveend( void );
    [
    id(0x00000410)
    ]
    VARIANT_BOOL onresizestart( void );
    [
    id(0x00000411)
    ]
    void onresizeend( void );
    [
    id(0x00000412)
    ]
    void onmouseenter( void );
    [
    id(0x00000413)
    ]
    void onmouseleave( void );
    [
    id(0x00000409)
    ]
    VARIANT_BOOL onmousewheel( void );
    [
    id(0x00000414)
    ]
    void onactivate( void );
    [
    id(0x00000415)
    ]
    void ondeactivate( void );
    [
    id(0x00000418)
    ]
    void onfocusin( void );
    [
    id(0x00000419)
    ]
    void onfocusout( void );
    [
    id(0x000003EA)
    ]
    void onerror( void );
  };

  [
    uuid(3050F28B-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLScriptElement: IDispatch
  {
    [
    propput, 
    id(0x000003E9), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall src([in] BSTR p );
    [
    propget, 
    id(0x000003E9), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall src([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003EC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall htmlFor([in] BSTR p );
    [
    propget, 
    id(0x000003EC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall htmlFor([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003ED), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall event([in] BSTR p );
    [
    propget, 
    id(0x000003ED), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall event([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003EE), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall text([in] BSTR p );
    [
    propget, 
    id(0x000003EE), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall text([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003EF), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall defer([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x000003EF), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall defer([out, retval] VARIANT_BOOL * p );
    [
    propget, 
    id(0x800113FC)
    ]
    HRESULT _stdcall readyState([out, retval] BSTR * p );
    [
    propput, 
    id(0x8001178D), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onerror([in] VARIANT p );
    [
    propget, 
    id(0x8001178D), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onerror([out, retval] VARIANT * p );
    [
    propput, 
    id(0x000003F1), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall type([in] BSTR p );
    [
    propget, 
    id(0x000003F1), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall type([out, retval] BSTR * p );
  };

  [
    uuid(3050F828-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLScriptElement2: IDispatch
  {
    [
    propput, 
    id(0x000003F2), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall charset([in] BSTR p );
    [
    propget, 
    id(0x000003F2), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall charset([out, retval] BSTR * p );
  };

  [
    uuid(3050F28C-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLScriptElement
  {
    [default] dispinterface DispHTMLScriptElement;
    [default, source] dispinterface HTMLScriptEvents;
    [source] dispinterface HTMLScriptEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLScriptElement;
    interface IHTMLScriptElement2;
  };

  [
    uuid(3050F38A-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLNoShowElement: IDispatch
  {
  };

  [
    uuid(3050F38B-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLNoShowElement
  {
    [default] dispinterface DispHTMLNoShowElement;
    [default, source] dispinterface HTMLElementEvents;
    [source] dispinterface HTMLElementEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLNoShowElement;
  };

  [
    uuid(3050F3C4-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface HTMLObjectElementEvents
  {
    properties:
    methods:
    [
    id(0x80010004)
    ]
    VARIANT_BOOL onbeforeupdate( void );
    [
    id(0x80010005)
    ]
    void onafterupdate( void );
    [
    id(0x8001000D)
    ]
    VARIANT_BOOL onerrorupdate( void );
    [
    id(0x80010006)
    ]
    VARIANT_BOOL onrowexit( void );
    [
    id(0x80010007)
    ]
    void onrowenter( void );
    [
    id(0x8001000E)
    ]
    void ondatasetchanged( void );
    [
    id(0x8001000F)
    ]
    void ondataavailable( void );
    [
    id(0x80010010)
    ]
    void ondatasetcomplete( void );
    [
    id(0x80010013)
    ]
    VARIANT_BOOL onerror( void );
    [
    id(0x80010020)
    ]
    void onrowsdelete( void );
    [
    id(0x80010021)
    ]
    void onrowsinserted( void );
    [
    id(0x80010022)
    ]
    void oncellchange( void );
    [
    id(0x80010014)
    ]
    void onreadystatechange( void );
  };

  [
    uuid(3050F827-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLObjectElement3: IDispatch
  {
    [
    propput, 
    id(0x80010BC7), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall archive([in] BSTR p );
    [
    propget, 
    id(0x80010BC7), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall archive([out, retval] BSTR * p );
    [
    propput, 
    id(0x80010BC8), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall alt([in] BSTR p );
    [
    propget, 
    id(0x80010BC8), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall alt([out, retval] BSTR * p );
    [
    propput, 
    id(0x80010BC9), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall declare([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x80010BC9), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall declare([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x80010BCA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall standby([in] BSTR p );
    [
    propget, 
    id(0x80010BCA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall standby([out, retval] BSTR * p );
    [
    propput, 
    id(0x80010BCB)
    ]
    HRESULT _stdcall border([in] VARIANT p );
    [
    propget, 
    id(0x80010BCB)
    ]
    HRESULT _stdcall border([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80010BCC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall useMap([in] BSTR p );
    [
    propget, 
    id(0x80010BCC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall useMap([out, retval] BSTR * p );
  };

  [
    uuid(3050F83D-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLParamElement: IDispatch
  {
    [
    propput, 
    id(0x000003E9), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall name([in] BSTR p );
    [
    propget, 
    id(0x000003E9), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall name([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003EA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall value([in] BSTR p );
    [
    propget, 
    id(0x000003EA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall value([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003EB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall type([in] BSTR p );
    [
    propget, 
    id(0x000003EB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall type([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003EC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall valueType([in] BSTR p );
    [
    propget, 
    id(0x000003EC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall valueType([out, retval] BSTR * p );
  };

  [
    uuid(3050F24E-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLObjectElement
  {
    [default] dispinterface DispHTMLObjectElement;
    [default, source] dispinterface HTMLObjectElementEvents;
    [source] dispinterface HTMLObjectElementEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLDatabinding;
    interface IHTMLControlElement;
    interface IHTMLObjectElement;
    interface IHTMLObjectElement2;
    interface IHTMLObjectElement3;
  };

  [
    uuid(3050F83E-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLParamElement
  {
    [default] dispinterface DispHTMLParamElement;
    [default, source] dispinterface HTMLElementEvents;
    [source] dispinterface HTMLElementEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLParamElement;
  };

  [
    uuid(3050F800-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface HTMLFrameSiteEvents
  {
    properties:
    methods:
    [
    id(0x8001000A)
    ]
    VARIANT_BOOL onhelp( void );
    [
    id(0xFFFFFDA8)
    ]
    VARIANT_BOOL onclick( void );
    [
    id(0xFFFFFDA7)
    ]
    VARIANT_BOOL ondblclick( void );
    [
    id(0xFFFFFDA5)
    ]
    VARIANT_BOOL onkeypress( void );
    [
    id(0xFFFFFDA6)
    ]
    void onkeydown( void );
    [
    id(0xFFFFFDA4)
    ]
    void onkeyup( void );
    [
    id(0x80010009)
    ]
    void onmouseout( void );
    [
    id(0x80010008)
    ]
    void onmouseover( void );
    [
    id(0xFFFFFDA2)
    ]
    void onmousemove( void );
    [
    id(0xFFFFFDA3)
    ]
    void onmousedown( void );
    [
    id(0xFFFFFDA1)
    ]
    void onmouseup( void );
    [
    id(0x8001000C)
    ]
    VARIANT_BOOL onselectstart( void );
    [
    id(0x80010011)
    ]
    void onfilterchange( void );
    [
    id(0x8001000B)
    ]
    VARIANT_BOOL ondragstart( void );
    [
    id(0x80010004)
    ]
    VARIANT_BOOL onbeforeupdate( void );
    [
    id(0x80010005)
    ]
    void onafterupdate( void );
    [
    id(0x8001000D)
    ]
    VARIANT_BOOL onerrorupdate( void );
    [
    id(0x80010006)
    ]
    VARIANT_BOOL onrowexit( void );
    [
    id(0x80010007)
    ]
    void onrowenter( void );
    [
    id(0x8001000E)
    ]
    void ondatasetchanged( void );
    [
    id(0x8001000F)
    ]
    void ondataavailable( void );
    [
    id(0x80010010)
    ]
    void ondatasetcomplete( void );
    [
    id(0x80010012)
    ]
    void onlosecapture( void );
    [
    id(0x80010013)
    ]
    void onpropertychange( void );
    [
    id(0x000003F6)
    ]
    void onscroll( void );
    [
    id(0x80010001)
    ]
    void onfocus( void );
    [
    id(0x80010000)
    ]
    void onblur( void );
    [
    id(0x000003F8)
    ]
    void onresize( void );
    [
    id(0x80010014)
    ]
    VARIANT_BOOL ondrag( void );
    [
    id(0x80010015)
    ]
    void ondragend( void );
    [
    id(0x80010016)
    ]
    VARIANT_BOOL ondragenter( void );
    [
    id(0x80010017)
    ]
    VARIANT_BOOL ondragover( void );
    [
    id(0x80010018)
    ]
    void ondragleave( void );
    [
    id(0x80010019)
    ]
    VARIANT_BOOL ondrop( void );
    [
    id(0x8001001D)
    ]
    VARIANT_BOOL onbeforecut( void );
    [
    id(0x8001001A)
    ]
    VARIANT_BOOL oncut( void );
    [
    id(0x8001001E)
    ]
    VARIANT_BOOL onbeforecopy( void );
    [
    id(0x8001001B)
    ]
    VARIANT_BOOL oncopy( void );
    [
    id(0x8001001F)
    ]
    VARIANT_BOOL onbeforepaste( void );
    [
    id(0x8001001C)
    ]
    VARIANT_BOOL onpaste( void );
    [
    id(0x000003FF)
    ]
    VARIANT_BOOL oncontextmenu( void );
    [
    id(0x80010020)
    ]
    void onrowsdelete( void );
    [
    id(0x80010021)
    ]
    void onrowsinserted( void );
    [
    id(0x80010022)
    ]
    void oncellchange( void );
    [
    id(0xFFFFFD9F)
    ]
    void onreadystatechange( void );
    [
    id(0x00000403)
    ]
    void onbeforeeditfocus( void );
    [
    id(0x00000406)
    ]
    void onlayoutcomplete( void );
    [
    id(0x00000407)
    ]
    void onpage( void );
    [
    id(0x0000040A)
    ]
    VARIANT_BOOL onbeforedeactivate( void );
    [
    id(0x00000417)
    ]
    VARIANT_BOOL onbeforeactivate( void );
    [
    id(0x0000040B)
    ]
    void onmove( void );
    [
    id(0x0000040C)
    ]
    VARIANT_BOOL oncontrolselect( void );
    [
    id(0x0000040E)
    ]
    VARIANT_BOOL onmovestart( void );
    [
    id(0x0000040F)
    ]
    void onmoveend( void );
    [
    id(0x00000410)
    ]
    VARIANT_BOOL onresizestart( void );
    [
    id(0x00000411)
    ]
    void onresizeend( void );
    [
    id(0x00000412)
    ]
    void onmouseenter( void );
    [
    id(0x00000413)
    ]
    void onmouseleave( void );
    [
    id(0x00000409)
    ]
    VARIANT_BOOL onmousewheel( void );
    [
    id(0x00000414)
    ]
    void onactivate( void );
    [
    id(0x00000415)
    ]
    void ondeactivate( void );
    [
    id(0x00000418)
    ]
    void onfocusin( void );
    [
    id(0x00000419)
    ]
    void onfocusout( void );
    [
    id(0x000003EB)
    ]
    void onload( void );
  };

  
  typedef enum tag_frameScrolling
  {
    frameScrollingyes = 1, 
    frameScrollingno = 2, 
    frameScrollingauto = 4, 
    frameScrolling_Max = 2147483647
  } _frameScrolling;

  [
    uuid(3050F82E-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLFrameBase3: IDispatch
  {
    [
    propput, 
    id(0x80010BC2), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall longDesc([in] BSTR p );
    [
    propget, 
    id(0x80010BC2), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall longDesc([out, retval] BSTR * p );
  };

  [
    uuid(3050F312-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLFrameBase
  {
    [default] dispinterface DispHTMLFrameBase;
    [default, source] dispinterface HTMLControlElementEvents;
    [source] dispinterface HTMLControlElementEvents2;
    [source] dispinterface HTMLFrameSiteEvents;
    [source] dispinterface HTMLFrameSiteEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLControlElement;
    interface IHTMLFrameBase;
    interface IHTMLFrameBase2;
    interface IHTMLFrameBase3;
  };

  [
    uuid(3050F313-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLFrameElement: IDispatch
  {
    [
    propput, 
    id(0x80010FA1)
    ]
    HRESULT _stdcall borderColor([in] VARIANT p );
    [
    propget, 
    id(0x80010FA1)
    ]
    HRESULT _stdcall borderColor([out, retval] VARIANT * p );
  };

  [
    uuid(3050F7F5-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLFrameElement2: IDispatch
  {
    [
    propput, 
    id(0x80010006)
    ]
    HRESULT _stdcall height([in] VARIANT p );
    [
    propget, 
    id(0x80010006)
    ]
    HRESULT _stdcall height([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80010005)
    ]
    HRESULT _stdcall width([in] VARIANT p );
    [
    propget, 
    id(0x80010005)
    ]
    HRESULT _stdcall width([out, retval] VARIANT * p );
  };

  [
    uuid(3050F314-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLFrameElement
  {
    [default] dispinterface DispHTMLFrameElement;
    [default, source] dispinterface HTMLControlElementEvents;
    [source] dispinterface HTMLControlElementEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLDatabinding;
    interface IHTMLControlElement;
    interface IHTMLFrameBase;
    interface IHTMLFrameBase2;
    interface IHTMLFrameBase3;
    interface IHTMLFrameElement;
    interface IHTMLFrameElement2;
  };

  [
    uuid(3050F315-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLIFrameElement: IDispatch
  {
    [
    propput, 
    id(0x80010FA1)
    ]
    HRESULT _stdcall vspace([in] long p );
    [
    propget, 
    id(0x80010FA1)
    ]
    HRESULT _stdcall vspace([out, retval] long * p );
    [
    propput, 
    id(0x80010FA2)
    ]
    HRESULT _stdcall hspace([in] long p );
    [
    propget, 
    id(0x80010FA2)
    ]
    HRESULT _stdcall hspace([out, retval] long * p );
    [
    propput, 
    id(0x80010049), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall align([in] BSTR p );
    [
    propget, 
    id(0x80010049), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall align([out, retval] BSTR * p );
  };

  [
    uuid(3050F4E6-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLIFrameElement2: IDispatch
  {
    [
    propput, 
    id(0x80010006)
    ]
    HRESULT _stdcall height([in] VARIANT p );
    [
    propget, 
    id(0x80010006)
    ]
    HRESULT _stdcall height([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80010005)
    ]
    HRESULT _stdcall width([in] VARIANT p );
    [
    propget, 
    id(0x80010005)
    ]
    HRESULT _stdcall width([out, retval] VARIANT * p );
  };

  [
    uuid(3050F316-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLIFrame
  {
    [default] dispinterface DispHTMLIFrame;
    [default, source] dispinterface HTMLControlElementEvents;
    [source] dispinterface HTMLControlElementEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLDatabinding;
    interface IHTMLControlElement;
    interface IHTMLFrameBase;
    interface IHTMLFrameBase2;
    interface IHTMLFrameBase3;
    interface IHTMLIFrameElement;
    interface IHTMLIFrameElement2;
  };

  [
    uuid(3050F212-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLDivPosition: IDispatch
  {
    [
    propput, 
    id(0x80010049), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall align([in] BSTR p );
    [
    propget, 
    id(0x80010049), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall align([out, retval] BSTR * p );
  };

  [
    uuid(3050F3E7-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLFieldSetElement: IDispatch
  {
    [
    propput, 
    id(0x80010049), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall align([in] BSTR p );
    [
    propget, 
    id(0x80010049), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall align([out, retval] BSTR * p );
  };

  [
    uuid(3050F3EA-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLLegendElement: IDispatch
  {
    [
    propput, 
    id(0x80010049)
    ]
    HRESULT _stdcall align([in] BSTR p );
    [
    propget, 
    id(0x80010049)
    ]
    HRESULT _stdcall align([out, retval] BSTR * p );
  };

  [
    uuid(3050F249-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLDivPosition
  {
    [default] dispinterface DispHTMLDivPosition;
    [default, source] dispinterface HTMLTextContainerEvents;
    [source] dispinterface HTMLTextContainerEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLDatabinding;
    interface IHTMLControlElement;
    interface IHTMLTextContainer;
    interface IHTMLDivPosition;
  };

  [
    uuid(3050F3E8-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLFieldSetElement
  {
    [default] dispinterface DispHTMLFieldSetElement;
    [default, source] dispinterface HTMLTextContainerEvents;
    [source] dispinterface HTMLTextContainerEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLControlElement;
    interface IHTMLTextContainer;
    interface IHTMLFieldSetElement;
    interface IHTMLFieldSetElement2;
  };

  [
    uuid(3050F3E9-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLLegendElement
  {
    [default] dispinterface DispHTMLLegendElement;
    [default, source] dispinterface HTMLTextContainerEvents;
    [source] dispinterface HTMLTextContainerEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLDatabinding;
    interface IHTMLControlElement;
    interface IHTMLTextContainer;
    interface IHTMLLegendElement;
    interface IHTMLLegendElement2;
  };

  [
    uuid(3050F3E5-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLSpanFlow: IDispatch
  {
    [
    propput, 
    id(0x80010049), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall align([in] BSTR p );
    [
    propget, 
    id(0x80010049), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall align([out, retval] BSTR * p );
  };

  [
    uuid(3050F3E6-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLSpanFlow
  {
    [default] dispinterface DispHTMLSpanFlow;
    [default, source] dispinterface HTMLTextContainerEvents;
    [source] dispinterface HTMLTextContainerEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLDatabinding;
    interface IHTMLControlElement;
    interface IHTMLTextContainer;
    interface IHTMLSpanFlow;
  };

  [
    uuid(3050F319-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLFrameSetElement: IDispatch
  {
    [
    propput, 
    id(0x000003E8), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall rows([in] BSTR p );
    [
    propget, 
    id(0x000003E8), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall rows([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003E9), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall cols([in] BSTR p );
    [
    propget, 
    id(0x000003E9), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall cols([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003EA)
    ]
    HRESULT _stdcall border([in] VARIANT p );
    [
    propget, 
    id(0x000003EA)
    ]
    HRESULT _stdcall border([out, retval] VARIANT * p );
    [
    propput, 
    id(0x000003EB)
    ]
    HRESULT _stdcall borderColor([in] VARIANT p );
    [
    propget, 
    id(0x000003EB)
    ]
    HRESULT _stdcall borderColor([out, retval] VARIANT * p );
    [
    propput, 
    id(0x000003EC)
    ]
    HRESULT _stdcall frameBorder([in] BSTR p );
    [
    propget, 
    id(0x000003EC)
    ]
    HRESULT _stdcall frameBorder([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003ED)
    ]
    HRESULT _stdcall frameSpacing([in] VARIANT p );
    [
    propget, 
    id(0x000003ED)
    ]
    HRESULT _stdcall frameSpacing([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall name([in] BSTR p );
    [
    propget, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall name([out, retval] BSTR * p );
    [
    propput, 
    id(0x80011790), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onload([in] VARIANT p );
    [
    propget, 
    id(0x80011790), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onload([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011791), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onunload([in] VARIANT p );
    [
    propget, 
    id(0x80011791), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onunload([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011797), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onbeforeunload([in] VARIANT p );
    [
    propget, 
    id(0x80011797), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onbeforeunload([out, retval] VARIANT * p );
  };

  [
    uuid(3050F5C6-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLFrameSetElement2: IDispatch
  {
    [
    propput, 
    id(0x800117B2), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onbeforeprint([in] VARIANT p );
    [
    propget, 
    id(0x800117B2), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onbeforeprint([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800117B3), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onafterprint([in] VARIANT p );
    [
    propget, 
    id(0x800117B3), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onafterprint([out, retval] VARIANT * p );
  };

  [
    uuid(3050F31A-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLFrameSetSite
  {
    [default] dispinterface DispHTMLFrameSetSite;
    [default, source] dispinterface HTMLControlElementEvents;
    [source] dispinterface HTMLControlElementEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLControlElement;
    interface IHTMLFrameSetElement;
    interface IHTMLFrameSetElement2;
  };

  [
    uuid(3050F369-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLBGsound: IDispatch
  {
    [
    propput, 
    id(0x000003E9), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall src([in] BSTR p );
    [
    propget, 
    id(0x000003E9), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall src([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003EA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall loop([in] VARIANT p );
    [
    propget, 
    id(0x000003EA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall loop([out, retval] VARIANT * p );
    [
    propput, 
    id(0x000003EB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall volume([in] VARIANT p );
    [
    propget, 
    id(0x000003EB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall volume([out, retval] VARIANT * p );
    [
    propput, 
    id(0x000003EC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall balance([in] VARIANT p );
    [
    propget, 
    id(0x000003EC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall balance([out, retval] VARIANT * p );
  };

  [
    uuid(3050F370-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLBGsound
  {
    [default] dispinterface DispHTMLBGsound;
    [default, source] dispinterface HTMLElementEvents;
    [source] dispinterface HTMLElementEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLBGsound;
  };

  [
    uuid(3050F376-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLFontNamesCollection: IDispatch
  {
    [
    propget, 
    id(0x000005DD), 
    hidden
    ]
    HRESULT _stdcall length([out, retval] long * p );
    [
    propget, 
    id(0xFFFFFFFC), 
    restricted, 
    hidden
    ]
    HRESULT _stdcall _newEnum([out, retval]  IUnknown ** p );
    [
    id(0x00000000)
    ]
    HRESULT _stdcall item([in] long index, [out, retval] BSTR * pBstr );
  };

  [
    uuid(3050F377-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLFontSizesCollection: IDispatch
  {
    [
    propget, 
    id(0x000005DE), 
    hidden
    ]
    HRESULT _stdcall length([out, retval] long * p );
    [
    propget, 
    id(0xFFFFFFFC), 
    restricted, 
    hidden
    ]
    HRESULT _stdcall _newEnum([out, retval]  IUnknown ** p );
    [
    propget, 
    id(0x000005DF)
    ]
    HRESULT _stdcall forFont([out, retval] BSTR * p );
    [
    id(0x00000000)
    ]
    HRESULT _stdcall item([in] long index, [out, retval] long * plSize );
  };

  [
    uuid(3050F3CB-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface HTMLStyleElementEvents
  {
    properties:
    methods:
    [
    id(0x8001000A)
    ]
    VARIANT_BOOL onhelp( void );
    [
    id(0xFFFFFDA8)
    ]
    VARIANT_BOOL onclick( void );
    [
    id(0xFFFFFDA7)
    ]
    VARIANT_BOOL ondblclick( void );
    [
    id(0xFFFFFDA5)
    ]
    VARIANT_BOOL onkeypress( void );
    [
    id(0xFFFFFDA6)
    ]
    void onkeydown( void );
    [
    id(0xFFFFFDA4)
    ]
    void onkeyup( void );
    [
    id(0x80010009)
    ]
    void onmouseout( void );
    [
    id(0x80010008)
    ]
    void onmouseover( void );
    [
    id(0xFFFFFDA2)
    ]
    void onmousemove( void );
    [
    id(0xFFFFFDA3)
    ]
    void onmousedown( void );
    [
    id(0xFFFFFDA1)
    ]
    void onmouseup( void );
    [
    id(0x8001000C)
    ]
    VARIANT_BOOL onselectstart( void );
    [
    id(0x80010011)
    ]
    void onfilterchange( void );
    [
    id(0x8001000B)
    ]
    VARIANT_BOOL ondragstart( void );
    [
    id(0x80010004)
    ]
    VARIANT_BOOL onbeforeupdate( void );
    [
    id(0x80010005)
    ]
    void onafterupdate( void );
    [
    id(0x8001000D)
    ]
    VARIANT_BOOL onerrorupdate( void );
    [
    id(0x80010006)
    ]
    VARIANT_BOOL onrowexit( void );
    [
    id(0x80010007)
    ]
    void onrowenter( void );
    [
    id(0x8001000E)
    ]
    void ondatasetchanged( void );
    [
    id(0x8001000F)
    ]
    void ondataavailable( void );
    [
    id(0x80010010)
    ]
    void ondatasetcomplete( void );
    [
    id(0x80010012)
    ]
    void onlosecapture( void );
    [
    id(0x80010013)
    ]
    void onpropertychange( void );
    [
    id(0x000003F6)
    ]
    void onscroll( void );
    [
    id(0x80010001)
    ]
    void onfocus( void );
    [
    id(0x80010000)
    ]
    void onblur( void );
    [
    id(0x000003F8)
    ]
    void onresize( void );
    [
    id(0x80010014)
    ]
    VARIANT_BOOL ondrag( void );
    [
    id(0x80010015)
    ]
    void ondragend( void );
    [
    id(0x80010016)
    ]
    VARIANT_BOOL ondragenter( void );
    [
    id(0x80010017)
    ]
    VARIANT_BOOL ondragover( void );
    [
    id(0x80010018)
    ]
    void ondragleave( void );
    [
    id(0x80010019)
    ]
    VARIANT_BOOL ondrop( void );
    [
    id(0x8001001D)
    ]
    VARIANT_BOOL onbeforecut( void );
    [
    id(0x8001001A)
    ]
    VARIANT_BOOL oncut( void );
    [
    id(0x8001001E)
    ]
    VARIANT_BOOL onbeforecopy( void );
    [
    id(0x8001001B)
    ]
    VARIANT_BOOL oncopy( void );
    [
    id(0x8001001F)
    ]
    VARIANT_BOOL onbeforepaste( void );
    [
    id(0x8001001C)
    ]
    VARIANT_BOOL onpaste( void );
    [
    id(0x000003FF)
    ]
    VARIANT_BOOL oncontextmenu( void );
    [
    id(0x80010020)
    ]
    void onrowsdelete( void );
    [
    id(0x80010021)
    ]
    void onrowsinserted( void );
    [
    id(0x80010022)
    ]
    void oncellchange( void );
    [
    id(0xFFFFFD9F)
    ]
    void onreadystatechange( void );
    [
    id(0x00000403)
    ]
    void onbeforeeditfocus( void );
    [
    id(0x00000406)
    ]
    void onlayoutcomplete( void );
    [
    id(0x00000407)
    ]
    void onpage( void );
    [
    id(0x0000040A)
    ]
    VARIANT_BOOL onbeforedeactivate( void );
    [
    id(0x00000417)
    ]
    VARIANT_BOOL onbeforeactivate( void );
    [
    id(0x0000040B)
    ]
    void onmove( void );
    [
    id(0x0000040C)
    ]
    VARIANT_BOOL oncontrolselect( void );
    [
    id(0x0000040E)
    ]
    VARIANT_BOOL onmovestart( void );
    [
    id(0x0000040F)
    ]
    void onmoveend( void );
    [
    id(0x00000410)
    ]
    VARIANT_BOOL onresizestart( void );
    [
    id(0x00000411)
    ]
    void onresizeend( void );
    [
    id(0x00000412)
    ]
    void onmouseenter( void );
    [
    id(0x00000413)
    ]
    void onmouseleave( void );
    [
    id(0x00000409)
    ]
    VARIANT_BOOL onmousewheel( void );
    [
    id(0x00000414)
    ]
    void onactivate( void );
    [
    id(0x00000415)
    ]
    void ondeactivate( void );
    [
    id(0x00000418)
    ]
    void onfocusin( void );
    [
    id(0x00000419)
    ]
    void onfocusout( void );
    [
    id(0x000003EB)
    ]
    void onload( void );
    [
    id(0x000003EA)
    ]
    void onerror( void );
  };

  [
    uuid(3050F37D-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLStyleElement
  {
    [default] dispinterface DispHTMLStyleElement;
    [default, source] dispinterface HTMLStyleElementEvents;
    [source] dispinterface HTMLStyleElementEvents2;
    interface IHTMLElement;
    interface IHTMLElement2;
    interface IHTMLElement3;
    interface IHTMLElement4;
    interface IHTMLUniqueName;
    interface IHTMLDOMNode;
    interface IHTMLDOMNode2;
    interface IHTMLStyleElement;
  };

  [
    uuid(3050F3D5-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLStyleFontFace: IDispatch
  {
    [
    propput, 
    id(0x800113E9), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall fontsrc([in] BSTR p );
    [
    propget, 
    id(0x800113E9), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall fontsrc([out, retval] BSTR * p );
  };

  [
    uuid(3050F3D4-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLStyleFontFace
  {
    [default] interface IHTMLStyleFontFace;
  };

  
  typedef enum tag_ELEMENT_CORNER
  {
    ELEMENT_CORNER_NONE = 0, 
    ELEMENT_CORNER_TOP = 1, 
    ELEMENT_CORNER_LEFT = 2, 
    ELEMENT_CORNER_BOTTOM = 3, 
    ELEMENT_CORNER_RIGHT = 4, 
    ELEMENT_CORNER_TOPLEFT = 5, 
    ELEMENT_CORNER_TOPRIGHT = 6, 
    ELEMENT_CORNER_BOTTOMLEFT = 7, 
    ELEMENT_CORNER_BOTTOMRIGHT = 8, 
    ELEMENT_CORNER_Max = 2147483647
  } _ELEMENT_CORNER;

  
  typedef enum tag_SECUREURLHOSTVALIDATE_FLAGS
  {
    SUHV_PROMPTBEFORENO = 1, 
    SUHV_SILENTYES = 2, 
    SUHV_UNSECURESOURCE = 4, 
    SECUREURLHOSTVALIDATE_FLAGS_Max = 2147483647
  } _SECUREURLHOSTVALIDATE_FLAGS;

  
  typedef enum tag_POINTER_GRAVITY
  {
    POINTER_GRAVITY_Left = 0, 
    POINTER_GRAVITY_Right = 1, 
    POINTER_GRAVITY_Max = 2147483647
  } _POINTER_GRAVITY;

  
  typedef enum tag_ELEMENT_ADJACENCY
  {
    ELEM_ADJ_BeforeBegin = 0, 
    ELEM_ADJ_AfterBegin = 1, 
    ELEM_ADJ_BeforeEnd = 2, 
    ELEM_ADJ_AfterEnd = 3, 
    ELEMENT_ADJACENCY_Max = 2147483647
  } _ELEMENT_ADJACENCY;

  
  typedef enum tag_MARKUP_CONTEXT_TYPE
  {
    CONTEXT_TYPE_None = 0, 
    CONTEXT_TYPE_Text = 1, 
    CONTEXT_TYPE_EnterScope = 2, 
    CONTEXT_TYPE_ExitScope = 3, 
    CONTEXT_TYPE_NoScope = 4, 
    MARKUP_CONTEXT_TYPE_Max = 2147483647
  } _MARKUP_CONTEXT_TYPE;

  
  typedef enum tag_FINDTEXT_FLAGS
  {
    FINDTEXT_BACKWARDS = 1, 
    FINDTEXT_WHOLEWORD = 2, 
    FINDTEXT_MATCHCASE = 4, 
    FINDTEXT_RAW = 131072, 
    FINDTEXT_MATCHDIAC = 536870912, 
    FINDTEXT_MATCHKASHIDA = 1073741824, 
    FINDTEXT_MATCHALEFHAMZA = 2147483648, 
    FINDTEXT_FLAGS_Max = 2147483647
  } _FINDTEXT_FLAGS;

  
  typedef enum tag_MOVEUNIT_ACTION
  {
    MOVEUNIT_PREVCHAR = 0, 
    MOVEUNIT_NEXTCHAR = 1, 
    MOVEUNIT_PREVCLUSTERBEGIN = 2, 
    MOVEUNIT_NEXTCLUSTERBEGIN = 3, 
    MOVEUNIT_PREVCLUSTEREND = 4, 
    MOVEUNIT_NEXTCLUSTEREND = 5, 
    MOVEUNIT_PREVWORDBEGIN = 6, 
    MOVEUNIT_NEXTWORDBEGIN = 7, 
    MOVEUNIT_PREVWORDEND = 8, 
    MOVEUNIT_NEXTWORDEND = 9, 
    MOVEUNIT_PREVPROOFWORD = 10, 
    MOVEUNIT_NEXTPROOFWORD = 11, 
    MOVEUNIT_NEXTURLBEGIN = 12, 
    MOVEUNIT_PREVURLBEGIN = 13, 
    MOVEUNIT_NEXTURLEND = 14, 
    MOVEUNIT_PREVURLEND = 15, 
    MOVEUNIT_PREVSENTENCE = 16, 
    MOVEUNIT_NEXTSENTENCE = 17, 
    MOVEUNIT_PREVBLOCK = 18, 
    MOVEUNIT_NEXTBLOCK = 19, 
    MOVEUNIT_ACTION_Max = 2147483647
  } _MOVEUNIT_ACTION;

  
  typedef enum tag_PARSE_FLAGS
  {
    PARSE_ABSOLUTIFYIE40URLS = 1, 
    PARSE_FLAGS_Max = 2147483647
  } _PARSE_FLAGS;

  
  typedef enum tag_ELEMENT_TAG_ID
  {
    TAGID_NULL = 0, 
    TAGID_UNKNOWN = 1, 
    TAGID_A = 2, 
    TAGID_ACRONYM = 3, 
    TAGID_ADDRESS = 4, 
    TAGID_APPLET = 5, 
    TAGID_AREA = 6, 
    TAGID_B = 7, 
    TAGID_BASE = 8, 
    TAGID_BASEFONT = 9, 
    TAGID_BDO = 10, 
    TAGID_BGSOUND = 11, 
    TAGID_BIG = 12, 
    TAGID_BLINK = 13, 
    TAGID_BLOCKQUOTE = 14, 
    TAGID_BODY = 15, 
    TAGID_BR = 16, 
    TAGID_BUTTON = 17, 
    TAGID_CAPTION = 18, 
    TAGID_CENTER = 19, 
    TAGID_CITE = 20, 
    TAGID_CODE = 21, 
    TAGID_COL = 22, 
    TAGID_COLGROUP = 23, 
    TAGID_COMMENT = 24, 
    TAGID_COMMENT_RAW = 25, 
    TAGID_DD = 26, 
    TAGID_DEL = 27, 
    TAGID_DFN = 28, 
    TAGID_DIR = 29, 
    TAGID_DIV = 30, 
    TAGID_DL = 31, 
    TAGID_DT = 32, 
    TAGID_EM = 33, 
    TAGID_EMBED = 34, 
    TAGID_FIELDSET = 35, 
    TAGID_FONT = 36, 
    TAGID_FORM = 37, 
    TAGID_FRAME = 38, 
    TAGID_FRAMESET = 39, 
    TAGID_GENERIC = 40, 
    TAGID_H1 = 41, 
    TAGID_H2 = 42, 
    TAGID_H3 = 43, 
    TAGID_H4 = 44, 
    TAGID_H5 = 45, 
    TAGID_H6 = 46, 
    TAGID_HEAD = 47, 
    TAGID_HR = 48, 
    TAGID_HTML = 49, 
    TAGID_I = 50, 
    TAGID_IFRAME = 51, 
    TAGID_IMG = 52, 
    TAGID_INPUT = 53, 
    TAGID_INS = 54, 
    TAGID_KBD = 55, 
    TAGID_LABEL = 56, 
    TAGID_LEGEND = 57, 
    TAGID_LI = 58, 
    TAGID_LINK = 59, 
    TAGID_LISTING = 60, 
    TAGID_MAP = 61, 
    TAGID_MARQUEE = 62, 
    TAGID_MENU = 63, 
    TAGID_META = 64, 
    TAGID_NEXTID = 65, 
    TAGID_NOBR = 66, 
    TAGID_NOEMBED = 67, 
    TAGID_NOFRAMES = 68, 
    TAGID_NOSCRIPT = 69, 
    TAGID_OBJECT = 70, 
    TAGID_OL = 71, 
    TAGID_OPTION = 72, 
    TAGID_P = 73, 
    TAGID_PARAM = 74, 
    TAGID_PLAINTEXT = 75, 
    TAGID_PRE = 76, 
    TAGID_Q = 77, 
    TAGID_RP = 78, 
    TAGID_RT = 79, 
    TAGID_RUBY = 80, 
    TAGID_S = 81, 
    TAGID_SAMP = 82, 
    TAGID_SCRIPT = 83, 
    TAGID_SELECT = 84, 
    TAGID_SMALL = 85, 
    TAGID_SPAN = 86, 
    TAGID_STRIKE = 87, 
    TAGID_STRONG = 88, 
    TAGID_STYLE = 89, 
    TAGID_SUB = 90, 
    TAGID_SUP = 91, 
    TAGID_TABLE = 92, 
    TAGID_TBODY = 93, 
    TAGID_TC = 94, 
    TAGID_TD = 95, 
    TAGID_TEXTAREA = 96, 
    TAGID_TFOOT = 97, 
    TAGID_TH = 98, 
    TAGID_THEAD = 99, 
    TAGID_TITLE = 100, 
    TAGID_TR = 101, 
    TAGID_TT = 102, 
    TAGID_U = 103, 
    TAGID_UL = 104, 
    TAGID_VAR = 105, 
    TAGID_WBR = 106, 
    TAGID_XMP = 107, 
    TAGID_ROOT = 108, 
    TAGID_OPTGROUP = 109, 
    TAGID_COUNT = 110, 
    TAGID_LAST_PREDEFINED = 10000, 
    ELEMENT_TAG_ID_Max = 2147483647
  } _ELEMENT_TAG_ID;

  
  typedef enum tag_SELECTION_TYPE
  {
    SELECTION_TYPE_None = 0, 
    SELECTION_TYPE_Caret = 1, 
    SELECTION_TYPE_Text = 2, 
    SELECTION_TYPE_Control = 3, 
    SELECTION_TYPE_Max = 2147483647
  } _SELECTION_TYPE;

  
  typedef enum tag_SAVE_SEGMENTS_FLAGS
  {
    SAVE_SEGMENTS_NoIE4SelectionCompat = 1, 
    SAVE_SEGMENTS_FLAGS_Max = 2147483647
  } _SAVE_SEGMENTS_FLAGS;

  
  typedef enum tag_CARET_DIRECTION
  {
    CARET_DIRECTION_INDETERMINATE = 0, 
    CARET_DIRECTION_SAME = 1, 
    CARET_DIRECTION_BACKWARD = 2, 
    CARET_DIRECTION_FORWARD = 3, 
    CARET_DIRECTION_Max = 2147483647
  } _CARET_DIRECTION;

  
  typedef enum tag_LINE_DIRECTION
  {
    LINE_DIRECTION_RightToLeft = 1, 
    LINE_DIRECTION_LeftToRight = 2, 
    LINE_DIRECTION_Max = 2147483647
  } _LINE_DIRECTION;

  
  typedef enum tag_HT_OPTIONS
  {
    HT_OPT_AllowAfterEOL = 1, 
    HT_OPTIONS_Max = 2147483647
  } _HT_OPTIONS;

  
  typedef enum tag_HT_RESULTS
  {
    HT_RESULTS_Glyph = 1, 
    HT_RESULTS_Max = 2147483647
  } _HT_RESULTS;

  
  typedef enum tag_DISPLAY_MOVEUNIT
  {
    DISPLAY_MOVEUNIT_PreviousLine = 1, 
    DISPLAY_MOVEUNIT_NextLine = 2, 
    DISPLAY_MOVEUNIT_CurrentLineStart = 3, 
    DISPLAY_MOVEUNIT_CurrentLineEnd = 4, 
    DISPLAY_MOVEUNIT_TopOfWindow = 5, 
    DISPLAY_MOVEUNIT_BottomOfWindow = 6, 
    DISPLAY_MOVEUNIT_Max = 2147483647
  } _DISPLAY_MOVEUNIT;

  
  typedef enum tag_DISPLAY_GRAVITY
  {
    DISPLAY_GRAVITY_PreviousLine = 1, 
    DISPLAY_GRAVITY_NextLine = 2, 
    DISPLAY_GRAVITY_Max = 2147483647
  } _DISPLAY_GRAVITY;

  
  typedef enum tag_DISPLAY_BREAK
  {
    DISPLAY_BREAK_None = 0, 
    DISPLAY_BREAK_Block = 1, 
    DISPLAY_BREAK_Break = 2, 
    DISPLAY_BREAK_Max = 2147483647
  } _DISPLAY_BREAK;

  
  typedef enum tag_COORD_SYSTEM
  {
    COORD_SYSTEM_GLOBAL = 0, 
    COORD_SYSTEM_PARENT = 1, 
    COORD_SYSTEM_CONTAINER = 2, 
    COORD_SYSTEM_CONTENT = 3, 
    COORD_SYSTEM_FRAME = 4, 
    COORD_SYSTEM_Max = 2147483647
  } _COORD_SYSTEM;

  [
    uuid(3050F64A-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface IHTMLChangeSink: IUnknown
  {
    HRESULT _stdcall Notify( void );
  };

  [
    public
  ]
  typedef  struct tag__RemotableHandle * wireHWND ;

  
  typedef struct tag__MIDL___MIDL_itf_mshtml_0252_0001
  {
    LPSTR lpReading;
    LPSTR lpWord;
  } __MIDL___MIDL_itf_mshtml_0252_0001;

  
  typedef struct tag__MIDL___MIDL_itf_mshtml_0252_0002
  {
    LPWSTR lpReading;
    LPWSTR lpWord;
  } __MIDL___MIDL_itf_mshtml_0252_0002;

  
  typedef struct tag__MIDL___MIDL_itf_mshtml_0252_0007
  {
    unsigned long dwSize;
    unsigned long dwStyle;
    unsigned long dwCount;
    unsigned long dwSelection;
    unsigned long dwPageStart;
    unsigned long dwPageSize;
    unsigned long dwOffset[1];
  } __MIDL___MIDL_itf_mshtml_0252_0007;

  
  typedef struct tag__MIDL___MIDL_itf_mshtml_0252_0003
  {
    long lfHeight;
    long lfWidth;
    long lfEscapement;
    long lfOrientation;
    long lfWeight;
    unsigned char lfItalic;
    unsigned char lfUnderline;
    unsigned char lfStrikeOut;
    unsigned char lfCharSet;
    unsigned char lfOutPrecision;
    unsigned char lfClipPrecision;
    unsigned char lfQuality;
    unsigned char lfPitchAndFamily;
    unsigned char lfFaceName[32];
  } __MIDL___MIDL_itf_mshtml_0252_0003;

  
  typedef struct tag__MIDL___MIDL_itf_mshtml_0252_0004
  {
    long lfHeight;
    long lfWidth;
    long lfEscapement;
    long lfOrientation;
    long lfWeight;
    unsigned char lfItalic;
    unsigned char lfUnderline;
    unsigned char lfStrikeOut;
    unsigned char lfCharSet;
    unsigned char lfOutPrecision;
    unsigned char lfClipPrecision;
    unsigned char lfQuality;
    unsigned char lfPitchAndFamily;
    unsigned short lfFaceName[32];
  } __MIDL___MIDL_itf_mshtml_0252_0004;

  
  typedef struct tag__MIDL___MIDL_itf_mshtml_0252_0008
  {
    unsigned long dwStyle;
    unsigned char szDescription[32];
  } __MIDL___MIDL_itf_mshtml_0252_0008;

  
  typedef struct tag__MIDL___MIDL_itf_mshtml_0252_0009
  {
    unsigned long dwStyle;
    unsigned short szDescription[32];
  } __MIDL___MIDL_itf_mshtml_0252_0009;

  [
    public
  ]
  typedef unsigned long UINT_PTR;

  [
    public
  ]
  typedef  struct tag__userHBITMAP * wireHBITMAP ;

  
  typedef union tag__MIDL_IWinTypes_0007
  {
    long hInproc;
     struct tag__userBITMAP * hRemote ;
    __int64 hInproc64;
  } __MIDL_IWinTypes_0007;

  
  typedef struct tag_userBITMAP
  {
    long bmType;
    long bmWidth;
    long bmHeight;
    long bmWidthBytes;
    unsigned short bmPlanes;
    unsigned short bmBitsPixel;
    unsigned long cbSize;
    unsigned char * pBuffer;
  } _userBITMAP;

  [
    uuid(3050F7E2-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface ILineInfo: IUnknown
  {
    [
    propget, 
    id(0x000003E9)
    ]
    HRESULT _stdcall x([out, retval] long * p );
    [
    propget, 
    id(0x000003EA)
    ]
    HRESULT _stdcall baseLine([out, retval] long * p );
    [
    propget, 
    id(0x000003EB)
    ]
    HRESULT _stdcall textDescent([out, retval] long * p );
    [
    propget, 
    id(0x000003EC)
    ]
    HRESULT _stdcall textHeight([out, retval] long * p );
    [
    propget, 
    id(0x000003ED)
    ]
    HRESULT _stdcall lineDirection([out, retval] long * p );
  };

  [
    uuid(3050F690-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface IHighlightSegment: ISegment
  {
  };

  [
    uuid(3050F81A-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface IHtmlDlgSafeHelper: IDispatch
  {
    [
    id(0x00000001)
    ]
    HRESULT _stdcall choosecolordlg([in, optional] VARIANT initColor, [out, retval] VARIANT * rgbColor );
    [
    id(0x00000002)
    ]
    HRESULT _stdcall getCharset([in] BSTR fontName, [out, retval] VARIANT * charset );
    [
    propget, 
    id(0x00000003)
    ]
    HRESULT _stdcall fonts([out, retval]  IDispatch ** p );
    [
    propget, 
    id(0x00000004)
    ]
    HRESULT _stdcall BlockFormats([out, retval]  IDispatch ** p );
  };

  [
    public
  ]
  typedef  struct tag__userHGLOBAL * wireHGLOBAL ;

  
  typedef union tag__MIDL_IWinTypes_0003
  {
    long hInproc;
     struct tag__FLAGGED_BYTE_BLOB * hRemote ;
    __int64 hInproc64;
  } __MIDL_IWinTypes_0003;

  
  typedef struct tag_FLAGGED_BYTE_BLOB
  {
    unsigned long fFlags;
    unsigned long clSize;
    unsigned char * abData;
  } _FLAGGED_BYTE_BLOB;

  [
    uuid(E4E23071-4D07-11D2-AE76-0080C73BC199)
  ]
   interface IXMLGenericParse: IUnknown
  {
    HRESULT _stdcall SetGenericParse([in] VARIANT_BOOL fDoGeneric );
  };

  [
    uuid(3050F848-98B5-11CF-BB82-00AA00BDCE0D)
  ]
   interface IHTMLEditHost2: IHTMLEditHost
  {
    HRESULT _stdcall PreDrag( void );
  };

  [
    uuid(3050F6C1-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface ISequenceNumber: IUnknown
  {
    HRESULT _stdcall GetSequenceNumber([in] long nCurrent, [out] long * pnNew );
  };

  [
    uuid(3050F819-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HtmlDlgSafeHelper
  {
    [default] interface IHtmlDlgSafeHelper;
  };

  [
    uuid(3050F831-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass BlockFormats
  {
    [default] interface IBlockFormats;
  };

  [
    uuid(3050F83A-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass FontNames
  {
    [default] interface IFontNames;
  };

  [
    uuid(3050F6BB-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLNamespace: IDispatch
  {
    [
    propget, 
    id(0x000003E8), 
    bindable
    ]
    HRESULT _stdcall name([out, retval] BSTR * p );
    [
    propget, 
    id(0x000003E9), 
    bindable
    ]
    HRESULT _stdcall urn([out, retval] BSTR * p );
    [
    propget, 
    id(0x000003EA), 
    bindable
    ]
    HRESULT _stdcall tagNames([out, retval]  IDispatch ** p );
    [
    propget, 
    id(0x800113FC), 
    bindable
    ]
    HRESULT _stdcall readyState([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onreadystatechange([in] VARIANT p );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onreadystatechange([out, retval] VARIANT * p );
    [
    id(0x000003EB)
    ]
    HRESULT _stdcall doImport([in] BSTR bstrImplementationUrl );
    [
    id(0x800101FB)
    ]
    HRESULT _stdcall attachEvent([in] BSTR event, [in]  IDispatch * pdisp, [out, retval] VARIANT_BOOL * pfResult );
    [
    id(0x800101FC)
    ]
    HRESULT _stdcall detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
  };

  [
    uuid(3050F6B8-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLNamespaceCollection: IDispatch
  {
    [
    propget, 
    id(0x000003E8)
    ]
    HRESULT _stdcall length([out, retval] long * p );
    [
    id(0x00000000)
    ]
    HRESULT _stdcall item([in] VARIANT index, [out, retval]  IDispatch ** ppNamespace );
    [
    id(0x000003E9)
    ]
    HRESULT _stdcall add([in] BSTR bstrNamespace, [in] BSTR bstrUrn, [in, optional] VARIANT implementationUrl, [out, retval]  IDispatch ** ppNamespace );
  };

  [
    uuid(3050F6BC-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLNamespace
  {
    [default] interface IHTMLNamespace;
    [default, source] dispinterface HTMLNamespaceEvents;
  };

  [
    uuid(3050F6B9-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLNamespaceCollection
  {
    [default] interface IHTMLNamespaceCollection;
  };

  
  typedef enum tag_HTML_PAINTER
  {
    HTMLPAINTER_OPAQUE = 1, 
    HTMLPAINTER_TRANSPARENT = 2, 
    HTMLPAINTER_ALPHA = 4, 
    HTMLPAINTER_COMPLEX = 8, 
    HTMLPAINTER_OVERLAY = 16, 
    HTMLPAINTER_HITTEST = 32, 
    HTMLPAINTER_SURFACE = 256, 
    HTMLPAINTER_3DSURFACE = 512, 
    HTMLPAINTER_NOBAND = 1024, 
    HTMLPAINTER_NODC = 4096, 
    HTMLPAINTER_NOPHYSICALCLIP = 8192, 
    HTMLPAINTER_NOSAVEDC = 16384, 
    HTMLPAINTER_SUPPORTS_XFORM = 32768, 
    HTMLPAINTER_EXPAND = 65536, 
    HTMLPAINTER_NOSCROLLBITS = 131072, 
    HTML_PAINTER_Max = 2147483647
  } _HTML_PAINTER;

  
  typedef enum tag_HTML_PAINT_ZORDER
  {
    HTMLPAINT_ZORDER_NONE = 0, 
    HTMLPAINT_ZORDER_REPLACE_ALL = 1, 
    HTMLPAINT_ZORDER_REPLACE_CONTENT = 2, 
    HTMLPAINT_ZORDER_REPLACE_BACKGROUND = 3, 
    HTMLPAINT_ZORDER_BELOW_CONTENT = 4, 
    HTMLPAINT_ZORDER_BELOW_FLOW = 5, 
    HTMLPAINT_ZORDER_ABOVE_FLOW = 6, 
    HTMLPAINT_ZORDER_ABOVE_CONTENT = 7, 
    HTMLPAINT_ZORDER_WINDOW_TOP = 8, 
    HTML_PAINT_ZORDER_Max = 2147483647
  } _HTML_PAINT_ZORDER;

  
  typedef enum tag_HTML_PAINT_DRAW_FLAGS
  {
    HTMLPAINT_DRAW_UPDATEREGION = 1, 
    HTMLPAINT_DRAW_USE_XFORM = 2, 
    HTML_PAINT_DRAW_FLAGS_Max = 2147483647
  } _HTML_PAINT_DRAW_FLAGS;

  
  typedef enum tag_HTML_PAINT_EVENT_FLAGS
  {
    HTMLPAINT_EVENT_TARGET = 1, 
    HTMLPAINT_EVENT_SETCURSOR = 2, 
    HTML_PAINT_EVENT_FLAGS_Max = 2147483647
  } _HTML_PAINT_EVENT_FLAGS;

  
  typedef enum tag_HTML_PAINT_DRAW_INFO_FLAGS
  {
    HTMLPAINT_DRAWINFO_VIEWPORT = 1, 
    HTMLPAINT_DRAWINFO_UPDATEREGION = 2, 
    HTMLPAINT_DRAWINFO_XFORM = 4, 
    HTML_PAINT_DRAW_INFO_FLAGS_Max = 2147483647
  } _HTML_PAINT_DRAW_INFO_FLAGS;

  
  typedef struct tag_HTML_PAINT_XFORM
  {
    float eM11;
    float eM12;
    float eM21;
    float eM22;
    float eDx;
    float eDy;
  } _HTML_PAINT_XFORM;

  
  typedef struct tagtagSIZE
  {
    long cx;
    long cy;
  } tagSIZE;

  [
    uuid(3050F6B5-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLIPrintCollection: IDispatch
  {
    [
    propget, 
    id(0x000005DD), 
    hidden
    ]
    HRESULT _stdcall length([out, retval] long * p );
    [
    propget, 
    id(0xFFFFFFFC), 
    restricted, 
    hidden
    ]
    HRESULT _stdcall _newEnum([out, retval]  IUnknown ** p );
    [
    id(0x00000000)
    ]
    HRESULT _stdcall item([in] long index, [out, retval]  IUnknown ** ppIPrint );
  };

  [
    uuid(3050F844-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface IEnumPrivacyRecords: IUnknown
  {
    HRESULT _stdcall reset( void );
    HRESULT _stdcall GetSize([out] unsigned long * pSize );
    HRESULT _stdcall GetPrivacyImpacted([out] long * pState );
    HRESULT _stdcall Next([out] BSTR * pbstrUrl, [out] BSTR * pbstrPolicyRef, [out] long * pdwReserved, [out] unsigned long * pdwPrivacyFlags );
  };

  
  typedef enum tag_HTMLDlgFlag
  {
    HTMLDlgFlagNo = 0, 
    HTMLDlgFlagOff = 0, 
    HTMLDlgFlag0 = 0, 
    HTMLDlgFlagYes = 1, 
    HTMLDlgFlagOn = 1, 
    HTMLDlgFlag1 = 1, 
    HTMLDlgFlagNotSet = 4294967295, 
    HTMLDlgFlag_Max = 2147483647
  } _HTMLDlgFlag;

  
  typedef enum tag_HTMLDlgBorder
  {
    HTMLDlgBorderThin = 0, 
    HTMLDlgBorderThick = 262144, 
    HTMLDlgBorder_Max = 2147483647
  } _HTMLDlgBorder;

  
  typedef enum tag_HTMLDlgEdge
  {
    HTMLDlgEdgeSunken = 0, 
    HTMLDlgEdgeRaised = 16, 
    HTMLDlgEdge_Max = 2147483647
  } _HTMLDlgEdge;

  
  typedef enum tag_HTMLDlgCenter
  {
    HTMLDlgCenterNo = 0, 
    HTMLDlgCenterOff = 0, 
    HTMLDlgCenter0 = 0, 
    HTMLDlgCenterYes = 1, 
    HTMLDlgCenterOn = 1, 
    HTMLDlgCenter1 = 1, 
    HTMLDlgCenterParent = 1, 
    HTMLDlgCenterDesktop = 2, 
    HTMLDlgCenter_Max = 2147483647
  } _HTMLDlgCenter;

  [
    uuid(3050F216-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLDialog: IDispatch
  {
    [
    propput, 
    id(0x80010004), 
    bindable
    ]
    HRESULT _stdcall dialogTop([in] VARIANT p );
    [
    propget, 
    id(0x80010004), 
    bindable
    ]
    HRESULT _stdcall dialogTop([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80010003), 
    bindable
    ]
    HRESULT _stdcall dialogLeft([in] VARIANT p );
    [
    propget, 
    id(0x80010003), 
    bindable
    ]
    HRESULT _stdcall dialogLeft([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80010005), 
    bindable
    ]
    HRESULT _stdcall dialogWidth([in] VARIANT p );
    [
    propget, 
    id(0x80010005), 
    bindable
    ]
    HRESULT _stdcall dialogWidth([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80010006), 
    bindable
    ]
    HRESULT _stdcall dialogHeight([in] VARIANT p );
    [
    propget, 
    id(0x80010006), 
    bindable
    ]
    HRESULT _stdcall dialogHeight([out, retval] VARIANT * p );
    [
    propget, 
    id(0x000061A8)
    ]
    HRESULT _stdcall dialogArguments([out, retval] VARIANT * p );
    [
    propget, 
    id(0x000061B5)
    ]
    HRESULT _stdcall menuArguments([out, retval] VARIANT * p );
    [
    propput, 
    id(0x000061A9)
    ]
    HRESULT _stdcall returnValue([in] VARIANT p );
    [
    propget, 
    id(0x000061A9)
    ]
    HRESULT _stdcall returnValue([out, retval] VARIANT * p );
    [
    id(0x000061B3)
    ]
    HRESULT _stdcall close( void );
    [
    id(0x000061B4)
    ]
    HRESULT _stdcall toString([out, retval] BSTR * String );
  };

  [
    uuid(3050F5E0-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLDialog2: IDispatch
  {
    [
    propput, 
    id(0x000061B6), 
    hidden
    ]
    HRESULT _stdcall status([in] BSTR p );
    [
    propget, 
    id(0x000061B6), 
    hidden
    ]
    HRESULT _stdcall status([out, retval] BSTR * p );
    [
    propput, 
    id(0x000061B7), 
    hidden
    ]
    HRESULT _stdcall resizable([in] BSTR p );
    [
    propget, 
    id(0x000061B7), 
    hidden
    ]
    HRESULT _stdcall resizable([out, retval] BSTR * p );
  };

  [
    uuid(3050F388-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLDialog3: IDispatch
  {
    [
    propput, 
    id(0x000061B8), 
    hidden
    ]
    HRESULT _stdcall unadorned([in] BSTR p );
    [
    propget, 
    id(0x000061B8), 
    hidden
    ]
    HRESULT _stdcall unadorned([out, retval] BSTR * p );
    [
    propput, 
    id(0x000061AF)
    ]
    HRESULT _stdcall dialogHide([in] BSTR p );
    [
    propget, 
    id(0x000061AF)
    ]
    HRESULT _stdcall dialogHide([out, retval] BSTR * p );
  };

  [
    uuid(3050F5E4-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLModelessInit: IDispatch
  {
    [
    propget, 
    id(0x000061A8)
    ]
    HRESULT _stdcall parameters([out, retval] VARIANT * p );
    [
    propget, 
    id(0x000061A9)
    ]
    HRESULT _stdcall optionString([out, retval] VARIANT * p );
    [
    propget, 
    id(0x000061AE)
    ]
    HRESULT _stdcall moniker([out, retval]  IUnknown ** p );
    [
    propget, 
    id(0x000061AF)
    ]
    HRESULT _stdcall document([out, retval]  IUnknown ** p );
  };

  [
    uuid(3050F5EB-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass ThreadDialogProcParam
  {
    [default] interface IHTMLModelessInit;
  };

  [
    uuid(3050F28A-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLDialog
  {
    [default] interface IHTMLDialog;
  };

  [
    uuid(3050F667-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLPopup
  {
    [default] dispinterface DispHTMLPopup;
    interface IHTMLPopup;
  };

  
  typedef enum tag_HTMLAppFlag
  {
    HTMLAppFlagNo = 0, 
    HTMLAppFlagOff = 0, 
    HTMLAppFlag0 = 0, 
    HTMLAppFlagYes = 1, 
    HTMLAppFlagOn = 1, 
    HTMLAppFlag1 = 1, 
    HTMLAppFlag_Max = 2147483647
  } _HTMLAppFlag;

  
  typedef enum tag_HTMLMinimizeFlag
  {
    HTMLMinimizeFlagNo = 0, 
    HTMLMinimizeFlagYes = 131072, 
    HTMLMinimizeFlag_Max = 2147483647
  } _HTMLMinimizeFlag;

  
  typedef enum tag_HTMLMaximizeFlag
  {
    HTMLMaximizeFlagNo = 0, 
    HTMLMaximizeFlagYes = 65536, 
    HTMLMaximizeFlag_Max = 2147483647
  } _HTMLMaximizeFlag;

  
  typedef enum tag_HTMLCaptionFlag
  {
    HTMLCaptionFlagNo = 0, 
    HTMLCaptionFlagYes = 12582912, 
    HTMLCaptionFlag_Max = 2147483647
  } _HTMLCaptionFlag;

  
  typedef enum tag_HTMLSysMenuFlag
  {
    HTMLSysMenuFlagNo = 0, 
    HTMLSysMenuFlagYes = 524288, 
    HTMLSysMenuFlag_Max = 2147483647
  } _HTMLSysMenuFlag;

  
  typedef enum tag_HTMLBorder
  {
    HTMLBorderNone = 0, 
    HTMLBorderThick = 262144, 
    HTMLBorderDialog = 4194304, 
    HTMLBorderThin = 8388608, 
    HTMLBorder_Max = 2147483647
  } _HTMLBorder;

  
  typedef enum tag_HTMLBorderStyle
  {
    HTMLBorderStyleNormal = 0, 
    HTMLBorderStyleRaised = 256, 
    HTMLBorderStyleSunken = 512, 
    HTMLBorderStylecombined = 768, 
    HTMLBorderStyleStatic = 131072, 
    HTMLBorderStyle_Max = 2147483647
  } _HTMLBorderStyle;

  
  typedef enum tag_HTMLWindowState
  {
    HTMLWindowStateNormal = 1, 
    HTMLWindowStateMaximize = 3, 
    HTMLWindowStateMinimize = 6, 
    HTMLWindowState_Max = 2147483647
  } _HTMLWindowState;

  [
    uuid(3050F5CA-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLAppBehavior: IDispatch
  {
    [
    propput, 
    id(0x00001388)
    ]
    HRESULT _stdcall applicationName([in] BSTR p );
    [
    propget, 
    id(0x00001388)
    ]
    HRESULT _stdcall applicationName([out, retval] BSTR * p );
    [
    propput, 
    id(0x00001389)
    ]
    HRESULT _stdcall version([in] BSTR p );
    [
    propget, 
    id(0x00001389)
    ]
    HRESULT _stdcall version([out, retval] BSTR * p );
    [
    propput, 
    id(0x0000138A)
    ]
    HRESULT _stdcall icon([in] BSTR p );
    [
    propget, 
    id(0x0000138A)
    ]
    HRESULT _stdcall icon([out, retval] BSTR * p );
    [
    propput, 
    id(0x0000138B)
    ]
    HRESULT _stdcall singleInstance([in] BSTR p );
    [
    propget, 
    id(0x0000138B)
    ]
    HRESULT _stdcall singleInstance([out, retval] BSTR * p );
    [
    propput, 
    id(0x0000138D)
    ]
    HRESULT _stdcall minimizeButton([in] BSTR p );
    [
    propget, 
    id(0x0000138D)
    ]
    HRESULT _stdcall minimizeButton([out, retval] BSTR * p );
    [
    propput, 
    id(0x0000138E)
    ]
    HRESULT _stdcall maximizeButton([in] BSTR p );
    [
    propget, 
    id(0x0000138E)
    ]
    HRESULT _stdcall maximizeButton([out, retval] BSTR * p );
    [
    propput, 
    id(0x0000138F)
    ]
    HRESULT _stdcall border([in] BSTR p );
    [
    propget, 
    id(0x0000138F)
    ]
    HRESULT _stdcall border([out, retval] BSTR * p );
    [
    propput, 
    id(0x00001390)
    ]
    HRESULT _stdcall borderStyle([in] BSTR p );
    [
    propget, 
    id(0x00001390)
    ]
    HRESULT _stdcall borderStyle([out, retval] BSTR * p );
    [
    propput, 
    id(0x00001391)
    ]
    HRESULT _stdcall sysMenu([in] BSTR p );
    [
    propget, 
    id(0x00001391)
    ]
    HRESULT _stdcall sysMenu([out, retval] BSTR * p );
    [
    propput, 
    id(0x00001392)
    ]
    HRESULT _stdcall caption([in] BSTR p );
    [
    propget, 
    id(0x00001392)
    ]
    HRESULT _stdcall caption([out, retval] BSTR * p );
    [
    propput, 
    id(0x00001393)
    ]
    HRESULT _stdcall windowState([in] BSTR p );
    [
    propget, 
    id(0x00001393)
    ]
    HRESULT _stdcall windowState([out, retval] BSTR * p );
    [
    propput, 
    id(0x00001394)
    ]
    HRESULT _stdcall showInTaskBar([in] BSTR p );
    [
    propget, 
    id(0x00001394)
    ]
    HRESULT _stdcall showInTaskBar([out, retval] BSTR * p );
    [
    propget, 
    id(0x00001395)
    ]
    HRESULT _stdcall commandLine([out, retval] BSTR * p );
  };

  [
    uuid(3050F5C9-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLAppBehavior2: IDispatch
  {
    [
    propput, 
    id(0x00001396)
    ]
    HRESULT _stdcall contextMenu([in] BSTR p );
    [
    propget, 
    id(0x00001396)
    ]
    HRESULT _stdcall contextMenu([out, retval] BSTR * p );
    [
    propput, 
    id(0x00001397)
    ]
    HRESULT _stdcall innerBorder([in] BSTR p );
    [
    propget, 
    id(0x00001397)
    ]
    HRESULT _stdcall innerBorder([out, retval] BSTR * p );
    [
    propput, 
    id(0x00001398)
    ]
    HRESULT _stdcall scroll([in] BSTR p );
    [
    propget, 
    id(0x00001398)
    ]
    HRESULT _stdcall scroll([out, retval] BSTR * p );
    [
    propput, 
    id(0x00001399)
    ]
    HRESULT _stdcall scrollFlat([in] BSTR p );
    [
    propget, 
    id(0x00001399)
    ]
    HRESULT _stdcall scrollFlat([out, retval] BSTR * p );
    [
    propput, 
    id(0x0000139A)
    ]
    HRESULT _stdcall selection([in] BSTR p );
    [
    propget, 
    id(0x0000139A)
    ]
    HRESULT _stdcall selection([out, retval] BSTR * p );
  };

  [
    uuid(3050F5CD-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLAppBehavior3: IDispatch
  {
    [
    propput, 
    id(0x0000139B)
    ]
    HRESULT _stdcall navigable([in] BSTR p );
    [
    propget, 
    id(0x0000139B)
    ]
    HRESULT _stdcall navigable([out, retval] BSTR * p );
  };

  [
    uuid(3050F57C-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLAppBehavior
  {
    properties:
    methods:
    [
    propput, 
    id(0x00001388)
    ]
    void applicationName(BSTR Param1 );
    [
    propget, 
    id(0x00001388)
    ]
    BSTR applicationName( void );
    [
    propput, 
    id(0x00001389)
    ]
    void version(BSTR Param1 );
    [
    propget, 
    id(0x00001389)
    ]
    BSTR version( void );
    [
    propput, 
    id(0x0000138A)
    ]
    void icon(BSTR Param1 );
    [
    propget, 
    id(0x0000138A)
    ]
    BSTR icon( void );
    [
    propput, 
    id(0x0000138B)
    ]
    void singleInstance(BSTR Param1 );
    [
    propget, 
    id(0x0000138B)
    ]
    BSTR singleInstance( void );
    [
    propput, 
    id(0x0000138D)
    ]
    void minimizeButton(BSTR Param1 );
    [
    propget, 
    id(0x0000138D)
    ]
    BSTR minimizeButton( void );
    [
    propput, 
    id(0x0000138E)
    ]
    void maximizeButton(BSTR Param1 );
    [
    propget, 
    id(0x0000138E)
    ]
    BSTR maximizeButton( void );
    [
    propput, 
    id(0x0000138F)
    ]
    void border(BSTR Param1 );
    [
    propget, 
    id(0x0000138F)
    ]
    BSTR border( void );
    [
    propput, 
    id(0x00001390)
    ]
    void borderStyle(BSTR Param1 );
    [
    propget, 
    id(0x00001390)
    ]
    BSTR borderStyle( void );
    [
    propput, 
    id(0x00001391)
    ]
    void sysMenu(BSTR Param1 );
    [
    propget, 
    id(0x00001391)
    ]
    BSTR sysMenu( void );
    [
    propput, 
    id(0x00001392)
    ]
    void caption(BSTR Param1 );
    [
    propget, 
    id(0x00001392)
    ]
    BSTR caption( void );
    [
    propput, 
    id(0x00001393)
    ]
    void windowState(BSTR Param1 );
    [
    propget, 
    id(0x00001393)
    ]
    BSTR windowState( void );
    [
    propput, 
    id(0x00001394)
    ]
    void showInTaskBar(BSTR Param1 );
    [
    propget, 
    id(0x00001394)
    ]
    BSTR showInTaskBar( void );
    [
    propget, 
    id(0x00001395)
    ]
    BSTR commandLine( void );
    [
    propput, 
    id(0x00001396)
    ]
    void contextMenu(BSTR Param1 );
    [
    propget, 
    id(0x00001396)
    ]
    BSTR contextMenu( void );
    [
    propput, 
    id(0x00001397)
    ]
    void innerBorder(BSTR Param1 );
    [
    propget, 
    id(0x00001397)
    ]
    BSTR innerBorder( void );
    [
    propput, 
    id(0x00001398)
    ]
    void scroll(BSTR Param1 );
    [
    propget, 
    id(0x00001398)
    ]
    BSTR scroll( void );
    [
    propput, 
    id(0x00001399)
    ]
    void scrollFlat(BSTR Param1 );
    [
    propget, 
    id(0x00001399)
    ]
    BSTR scrollFlat( void );
    [
    propput, 
    id(0x0000139A)
    ]
    void selection(BSTR Param1 );
    [
    propget, 
    id(0x0000139A)
    ]
    BSTR selection( void );
  };

  [
    uuid(3050F5CB-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLAppBehavior
  {
    [default] dispinterface DispHTMLAppBehavior;
    interface IHTMLAppBehavior;
    interface IHTMLAppBehavior2;
  };

  [
    uuid(D48A6EC9-6A4A-11CF-94A7-444553540000)
  ]
  coclass OldHTMLDocument
  {
    [default] dispinterface DispHTMLDocument;
    [default, source] dispinterface HTMLDocumentEvents;
    interface IHTMLDocument2;
    interface IHTMLDocument3;
  };

  [
    uuid(0D04D285-6BEC-11CF-8B97-00AA00476DA6)
  ]
  coclass OldHTMLFormElement
  {
    [default] dispinterface DispHTMLFormElement;
    [default, source] dispinterface HTMLFormElementEvents;
    interface IHTMLFormElement;
    interface IHTMLElement;
    interface IHTMLElement2;
  };

  [
    uuid(3050F2B4-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLInputButtonElement
  {
    [default] dispinterface DispIHTMLInputButtonElement;
    [default, source] dispinterface HTMLButtonElementEvents;
    interface IHTMLInputButtonElement;
    interface IHTMLControlElement;
    interface IHTMLElement;
  };

  [
    uuid(3050F2AB-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLInputTextElement
  {
    [default] dispinterface DispIHTMLInputTextElement;
    [default, source] dispinterface HTMLInputTextElementEvents;
    interface IHTMLInputTextElement;
    interface IHTMLControlElement;
    interface IHTMLElement;
    interface IHTMLDatabinding;
  };

  [
    uuid(3050F2AE-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLInputFileElement
  {
    [default] dispinterface DispIHTMLInputFileElement;
    [default, source] dispinterface HTMLInputFileElementEvents;
    interface IHTMLInputFileElement;
    interface IHTMLControlElement;
    interface IHTMLElement;
  };

  [
    uuid(3050F2BE-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass HTMLOptionButtonElement
  {
    [default] dispinterface DispIHTMLOptionButtonElement;
    [default, source] dispinterface HTMLOptionButtonElementEvents;
    interface IHTMLOptionButtonElement;
    interface IHTMLControlElement;
    interface IHTMLElement;
    interface IHTMLDatabinding;
  };

  [
    uuid(3050F2C4-98B5-11CF-BB82-00AA00BDCE0B)
  ]
  coclass htmlInputImage
  {
    [default] dispinterface DispIHTMLInputImage;
    [default, source] dispinterface HTMLInputImageEvents;
    interface IHTMLInputImage;
    interface IHTMLControlElement;
    interface IHTMLElement;
  };

  
  typedef enum tag_BEHAVIOR_EVENT
  {
    BEHAVIOREVENT_FIRST = 0, 
    BEHAVIOREVENT_CONTENTREADY = 0, 
    BEHAVIOREVENT_DOCUMENTREADY = 1, 
    BEHAVIOREVENT_APPLYSTYLE = 2, 
    BEHAVIOREVENT_DOCUMENTCONTEXTCHANGE = 3, 
    BEHAVIOREVENT_CONTENTSAVE = 4, 
    BEHAVIOREVENT_LAST = 4, 
    BEHAVIOR_EVENT_Max = 2147483647
  } _BEHAVIOR_EVENT;

  
  typedef enum tag_BEHAVIOR_EVENT_FLAGS
  {
    BEHAVIOREVENTFLAGS_BUBBLE = 1, 
    BEHAVIOREVENTFLAGS_STANDARDADDITIVE = 2, 
    BEHAVIOR_EVENT_FLAGS_Max = 2147483647
  } _BEHAVIOR_EVENT_FLAGS;

  
  typedef enum tag_BEHAVIOR_RENDER_INFO
  {
    BEHAVIORRENDERINFO_BEFOREBACKGROUND = 1, 
    BEHAVIORRENDERINFO_AFTERBACKGROUND = 2, 
    BEHAVIORRENDERINFO_BEFORECONTENT = 4, 
    BEHAVIORRENDERINFO_AFTERCONTENT = 8, 
    BEHAVIORRENDERINFO_AFTERFOREGROUND = 32, 
    BEHAVIORRENDERINFO_ABOVECONTENT = 40, 
    BEHAVIORRENDERINFO_ALLLAYERS = 255, 
    BEHAVIORRENDERINFO_DISABLEBACKGROUND = 256, 
    BEHAVIORRENDERINFO_DISABLENEGATIVEZ = 512, 
    BEHAVIORRENDERINFO_DISABLECONTENT = 1024, 
    BEHAVIORRENDERINFO_DISABLEPOSITIVEZ = 2048, 
    BEHAVIORRENDERINFO_DISABLEALLLAYERS = 3840, 
    BEHAVIORRENDERINFO_HITTESTING = 4096, 
    BEHAVIORRENDERINFO_SURFACE = 1048576, 
    BEHAVIORRENDERINFO_3DSURFACE = 2097152, 
    BEHAVIOR_RENDER_INFO_Max = 2147483647
  } _BEHAVIOR_RENDER_INFO;

  
  typedef enum tag_BEHAVIOR_RELATION
  {
    BEHAVIOR_FIRSTRELATION = 0, 
    BEHAVIOR_SAMEELEMENT = 0, 
    BEHAVIOR_PARENT = 1, 
    BEHAVIOR_CHILD = 2, 
    BEHAVIOR_SIBLING = 3, 
    BEHAVIOR_LASTRELATION = 3, 
    BEHAVIOR_RELATION_Max = 2147483647
  } _BEHAVIOR_RELATION;

  
  typedef enum tag_BEHAVIOR_LAYOUT_INFO
  {
    BEHAVIORLAYOUTINFO_FULLDELEGATION = 1, 
    BEHAVIORLAYOUTINFO_MODIFYNATURAL = 2, 
    BEHAVIORLAYOUTINFO_MAPSIZE = 4, 
    BEHAVIOR_LAYOUT_INFO_Max = 2147483647
  } _BEHAVIOR_LAYOUT_INFO;

  
  typedef enum tag_BEHAVIOR_LAYOUT_MODE
  {
    BEHAVIORLAYOUTMODE_NATURAL = 1, 
    BEHAVIORLAYOUTMODE_MINWIDTH = 2, 
    BEHAVIORLAYOUTMODE_MAXWIDTH = 4, 
    BEHAVIORLAYOUTMODE_MEDIA_RESOLUTION = 16384, 
    BEHAVIORLAYOUTMODE_FINAL_PERCENT = 32768, 
    BEHAVIOR_LAYOUT_MODE_Max = 2147483647
  } _BEHAVIOR_LAYOUT_MODE;

  
  typedef enum tag_ELEMENTDESCRIPTOR_FLAGS
  {
    ELEMENTDESCRIPTORFLAGS_LITERAL = 1, 
    ELEMENTDESCRIPTORFLAGS_NESTED_LITERAL = 2, 
    ELEMENTDESCRIPTOR_FLAGS_Max = 2147483647
  } _ELEMENTDESCRIPTOR_FLAGS;

  
  typedef enum tag_ELEMENTNAMESPACE_FLAGS
  {
    ELEMENTNAMESPACEFLAGS_ALLOWANYTAG = 1, 
    ELEMENTNAMESPACEFLAGS_QUERYFORUNKNOWNTAGS = 2, 
    ELEMENTNAMESPACE_FLAGS_Max = 2147483647
  } _ELEMENTNAMESPACE_FLAGS;

  [
    uuid(3050F671-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface IElementNamespace: IUnknown
  {
    HRESULT _stdcall AddTag([in] BSTR bstrTagName, [in] long lFlags );
  };

  [
    uuid(3050F4ED-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface IElementBehaviorCategory: IUnknown
  {
    HRESULT _stdcall GetCategory([out, retval] LPWSTR * ppchCategory );
  };

  

  [
    uuid(3050F846-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface IElementBehaviorLayout2: IUnknown
  {
    HRESULT _stdcall GetTextDescent([out] long * plDescent );
  };

  
  typedef struct tagtagLOGFONTW
  {
    long lfHeight;
    long lfWidth;
    long lfEscapement;
    long lfOrientation;
    long lfWeight;
    unsigned char lfItalic;
    unsigned char lfUnderline;
    unsigned char lfStrikeOut;
    unsigned char lfCharSet;
    unsigned char lfOutPrecision;
    unsigned char lfClipPrecision;
    unsigned char lfQuality;
    unsigned char lfPitchAndFamily;
    unsigned short lfFaceName[32];
  } tagLOGFONTW;

  [
    uuid(3050F842-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface IHostBehaviorInit: IUnknown
  {
    HRESULT _stdcall PopulateNamespaceTable( void );
  };

  
  typedef VARIANT * POleVariant1;

  
  typedef  struct tagRECT * PUserType1 ;

  
  typedef  struct tagPOINT * PUserType2 ;

  
  typedef unsigned short * PWord1;

  
  typedef unsigned char * PByte1;

  
  typedef  struct tag___MIDL___MIDL_itf_mshtml_0252_0001 * PUserType3 ;

  
  typedef  struct tag___MIDL___MIDL_itf_mshtml_0252_0002 * PUserType4 ;

  
  typedef  struct tag___MIDL___MIDL_itf_mshtml_0252_0005 * PUserType5 ;

  
  typedef  struct tag___MIDL___MIDL_itf_mshtml_0252_0003 * PUserType6 ;

  
  typedef  struct tag___MIDL___MIDL_itf_mshtml_0252_0004 * PUserType7 ;

  
  typedef  struct tag___MIDL___MIDL_itf_mshtml_0252_0006 * PUserType8 ;

  
  typedef  struct tag___MIDL___MIDL_itf_mshtml_0252_0010 * PUserType9 ;

  
  typedef  struct tag___MIDL___MIDL_itf_mshtml_0252_0011 * PUserType10 ;

  
  typedef  struct IHTMLElement ** PPUserType1 ;

  
  typedef  struct tagSIZE * PUserType11 ;

  [
    uuid(3050F32D-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLEventObj: IDispatch
  {
    [
    propget, 
    id(0x000003E9)
    ]
    HRESULT _stdcall srcElement([out, retval] IHTMLElement ** p  );
    [
    propget, 
    id(0x000003EA)
    ]
    HRESULT _stdcall altKey([out, retval] VARIANT_BOOL * p );
    [
    propget, 
    id(0x000003EB)
    ]
    HRESULT _stdcall ctrlKey([out, retval] VARIANT_BOOL * p );
    [
    propget, 
    id(0x000003EC)
    ]
    HRESULT _stdcall shiftKey([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x000003EF)
    ]
    HRESULT _stdcall returnValue([in] VARIANT p );
    [
    propget, 
    id(0x000003EF)
    ]
    HRESULT _stdcall returnValue([out, retval] VARIANT * p );
    [
    propput, 
    id(0x000003F0)
    ]
    HRESULT _stdcall cancelBubble([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x000003F0)
    ]
    HRESULT _stdcall cancelBubble([out, retval] VARIANT_BOOL * p );
    [
    propget, 
    id(0x000003F1)
    ]
    HRESULT _stdcall fromElement([out, retval] IHTMLElement ** p  );
    [
    propget, 
    id(0x000003F2)
    ]
    HRESULT _stdcall toElement([out, retval] IHTMLElement ** p  );
    [
    propput, 
    id(0x000003F3)
    ]
    HRESULT _stdcall keyCode([in] long p );
    [
    propget, 
    id(0x000003F3)
    ]
    HRESULT _stdcall keyCode([out, retval] long * p );
    [
    propget, 
    id(0x000003F4)
    ]
    HRESULT _stdcall button([out, retval] long * p );
    [
    propget, 
    id(0x000003F5)
    ]
    HRESULT _stdcall type([out, retval] BSTR * p );
    [
    propget, 
    id(0x000003F6)
    ]
    HRESULT _stdcall qualifier([out, retval] BSTR * p );
    [
    propget, 
    id(0x000003F7)
    ]
    HRESULT _stdcall reason([out, retval] long * p );
    [
    propget, 
    id(0x000003ED)
    ]
    HRESULT _stdcall x([out, retval] long * p );
    [
    propget, 
    id(0x000003EE)
    ]
    HRESULT _stdcall y([out, retval] long * p );
    [
    propget, 
    id(0x000003FC)
    ]
    HRESULT _stdcall clientX([out, retval] long * p );
    [
    propget, 
    id(0x000003FD)
    ]
    HRESULT _stdcall clientY([out, retval] long * p );
    [
    propget, 
    id(0x000003FE)
    ]
    HRESULT _stdcall offsetX([out, retval] long * p );
    [
    propget, 
    id(0x000003FF)
    ]
    HRESULT _stdcall offsetY([out, retval] long * p );
    [
    propget, 
    id(0x00000400)
    ]
    HRESULT _stdcall screenX([out, retval] long * p );
    [
    propget, 
    id(0x00000401)
    ]
    HRESULT _stdcall screenY([out, retval] long * p );
    [
    propget, 
    id(0x00000402)
    ]
    HRESULT _stdcall srcFilter([out, retval]  IDispatch ** p );
  };

  [
    uuid(3050F1FF-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLElement: IDispatch
  {
    [
    id(0x800101F5)
    ]
    HRESULT _stdcall setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    HRESULT _stdcall getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags, [out, retval] VARIANT * AttributeValue );
    [
    id(0x800101F7)
    ]
    HRESULT _stdcall removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags, [out, retval] VARIANT_BOOL * pfSuccess );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    HRESULT _stdcall className([in] BSTR p );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    HRESULT _stdcall className([out, retval] BSTR * p );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    HRESULT _stdcall id([in] BSTR p );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    HRESULT _stdcall id([out, retval] BSTR * p );
    [
    propget, 
    id(0x800103EC)
    ]
    HRESULT _stdcall tagName([out, retval] BSTR * p );
    [
    propget, 
    id(0x80010008)
    ]
    HRESULT _stdcall parentElement([out, retval] IHTMLElement ** p  );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    HRESULT _stdcall style([out, retval] IHTMLStyle ** p  );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onhelp([in] VARIANT p );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onhelp([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onclick([in] VARIANT p );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onclick([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall ondblclick([in] VARIANT p );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall ondblclick([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onkeydown([in] VARIANT p );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onkeydown([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onkeyup([in] VARIANT p );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onkeyup([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onkeypress([in] VARIANT p );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onkeypress([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onmouseout([in] VARIANT p );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onmouseout([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onmouseover([in] VARIANT p );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onmouseover([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onmousemove([in] VARIANT p );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onmousemove([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onmousedown([in] VARIANT p );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onmousedown([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onmouseup([in] VARIANT p );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onmouseup([out, retval] VARIANT * p );
    [
    propget, 
    id(0x800103FA)
    ]
    HRESULT _stdcall document([out, retval]  IDispatch ** p );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall title([in] BSTR p );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall title([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall language([in] BSTR p );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall language([out, retval] BSTR * p );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onselectstart([in] VARIANT p );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onselectstart([out, retval] VARIANT * p );
    [
    id(0x800103FB)
    ]
    HRESULT _stdcall scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    HRESULT _stdcall contains([in] IHTMLElement * pChild , [out, retval] VARIANT_BOOL * pfResult );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    HRESULT _stdcall sourceIndex([out, retval] long * p );
    [
    propget, 
    id(0x80010401)
    ]
    HRESULT _stdcall recordNumber([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011391)
    ]
    HRESULT _stdcall lang([in] BSTR p );
    [
    propget, 
    id(0x80011391)
    ]
    HRESULT _stdcall lang([out, retval] BSTR * p );
    [
    propget, 
    id(0x800103F0)
    ]
    HRESULT _stdcall offsetLeft([out, retval] long * p );
    [
    propget, 
    id(0x800103F1)
    ]
    HRESULT _stdcall offsetTop([out, retval] long * p );
    [
    propget, 
    id(0x800103F2)
    ]
    HRESULT _stdcall offsetWidth([out, retval] long * p );
    [
    propget, 
    id(0x800103F3)
    ]
    HRESULT _stdcall offsetHeight([out, retval] long * p );
    [
    propget, 
    id(0x800103F4)
    ]
    HRESULT _stdcall offsetParent([out, retval] IHTMLElement ** p  );
    [
    propput, 
    id(0x80010402)
    ]
    HRESULT _stdcall innerHTML([in] BSTR p );
    [
    propget, 
    id(0x80010402)
    ]
    HRESULT _stdcall innerHTML([out, retval] BSTR * p );
    [
    propput, 
    id(0x80010403)
    ]
    HRESULT _stdcall innerText([in] BSTR p );
    [
    propget, 
    id(0x80010403)
    ]
    HRESULT _stdcall innerText([out, retval] BSTR * p );
    [
    propput, 
    id(0x80010404)
    ]
    HRESULT _stdcall outerHTML([in] BSTR p );
    [
    propget, 
    id(0x80010404)
    ]
    HRESULT _stdcall outerHTML([out, retval] BSTR * p );
    [
    propput, 
    id(0x80010405)
    ]
    HRESULT _stdcall outerText([in] BSTR p );
    [
    propget, 
    id(0x80010405)
    ]
    HRESULT _stdcall outerText([out, retval] BSTR * p );
    [
    id(0x80010406)
    ]
    HRESULT _stdcall insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    HRESULT _stdcall insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    HRESULT _stdcall parentTextEdit([out, retval] IHTMLElement ** p  );
    [
    propget, 
    id(0x8001040A)
    ]
    HRESULT _stdcall isTextEdit([out, retval] VARIANT_BOOL * p );
    [
    id(0x80010409)
    ]
    HRESULT _stdcall click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    HRESULT _stdcall filters([out, retval] IHTMLFiltersCollection ** p  );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall ondragstart([in] VARIANT p );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall ondragstart([out, retval] VARIANT * p );
    [
    id(0x8001040C)
    ]
    HRESULT _stdcall toString([out, retval] BSTR * String );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onbeforeupdate([in] VARIANT p );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onbeforeupdate([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onafterupdate([in] VARIANT p );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onafterupdate([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onerrorupdate([in] VARIANT p );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onerrorupdate([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onrowexit([in] VARIANT p );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onrowexit([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onrowenter([in] VARIANT p );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onrowenter([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall ondatasetchanged([in] VARIANT p );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall ondatasetchanged([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall ondataavailable([in] VARIANT p );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall ondataavailable([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall ondatasetcomplete([in] VARIANT p );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall ondatasetcomplete([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onfilterchange([in] VARIANT p );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onfilterchange([out, retval] VARIANT * p );
    [
    propget, 
    id(0x8001040D)
    ]
    HRESULT _stdcall children([out, retval]  IDispatch ** p );
    [
    propget, 
    id(0x8001040E)
    ]
    HRESULT _stdcall all([out, retval]  IDispatch ** p );
  };

  [
    uuid(3050F3EE-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLFiltersCollection: IDispatch
  {
    [
    propget, 
    id(0x000003E9)
    ]
    HRESULT _stdcall length([out, retval] long * p );
    [
    propget, 
    id(0xFFFFFFFC), 
    restricted, 
    hidden
    ]
    HRESULT _stdcall _newEnum([out, retval]  IUnknown ** p );
    [
    id(0x00000000)
    ]
    HRESULT _stdcall item([in] VARIANT * pvarIndex, [out, retval] VARIANT * pvarResult );
  };

  [
    uuid(3050F427-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface IElementBehaviorSite: IUnknown
  {
    HRESULT _stdcall GetElement([out, retval] IHTMLElement ** ppElement  );
    HRESULT _stdcall RegisterNotification([in] long lEvent );
  };

  [
    uuid(3050F425-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface IElementBehavior: IUnknown
  {
    HRESULT _stdcall Init([in] IElementBehaviorSite * pBehaviorSite  );
    HRESULT _stdcall Notify([in] long lEvent, [in] long pVar );
    HRESULT _stdcall Detach( void );
  };

  [
    uuid(3050F429-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface IElementBehaviorFactory: IUnknown
  {
    HRESULT _stdcall FindBehavior([in] BSTR bstrBehavior, [in] BSTR bstrBehaviorUrl, [in] IElementBehaviorSite * pSite , [out, retval] IElementBehavior ** ppBehavior  );
  };

  [
    uuid(3050F489-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface IElementBehaviorSiteOM: IUnknown
  {
    HRESULT _stdcall RegisterEvent([in] LPWSTR pchEvent, [in] long lFlags, [out, retval] long * plCookie );
    HRESULT _stdcall GetEventCookie([in] LPWSTR pchEvent, [out, retval] long * plCookie );
    HRESULT _stdcall FireEvent([in] long lCookie, [in] IHTMLEventObj * pEventObject  );
    HRESULT _stdcall CreateEventObject([out, retval] IHTMLEventObj ** ppEventObject  );
    HRESULT _stdcall RegisterName([in] LPWSTR pchName );
    HRESULT _stdcall RegisterUrn([in] LPWSTR pchUrn );
  };

  [
    uuid(3050F4AA-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface IElementBehaviorRender: IUnknown
  {
    HRESULT _stdcall Draw([in] wireHDC hdc , [in] long lLayer, [in] tagRECT * pRect , [in]  IUnknown * pReserved );
    HRESULT _stdcall GetRenderInfo([out, retval] long * plRenderInfo );
    HRESULT _stdcall HitTestPoint([in] tagPOINT * pPoint , [in]  IUnknown * pReserved, [out, retval] long * pbHit );
  };

  
  typedef struct tag_RemotableHandle
  {
    long fContext;
    __MIDL_IWinTypes_0009 u ;
  } _RemotableHandle;

  [
    uuid(3050F4A7-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface IElementBehaviorSiteRender: IUnknown
  {
    HRESULT _stdcall Invalidate([in] tagRECT * pRect  );
    HRESULT _stdcall InvalidateRenderInfo( void );
    HRESULT _stdcall InvalidateStyle( void );
  };

  [
    uuid(3050F4A4-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLRectCollection: IDispatch
  {
    [
    propget, 
    id(0x000005DC)
    ]
    HRESULT _stdcall length([out, retval] long * p );
    [
    propget, 
    id(0xFFFFFFFC), 
    restricted, 
    hidden
    ]
    HRESULT _stdcall _newEnum([out, retval]  IUnknown ** p );
    [
    id(0x00000000)
    ]
    HRESULT _stdcall item([in] VARIANT * pvarIndex, [out, retval] VARIANT * pvarResult );
  };

  [
    uuid(3050F5DA-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLDOMNode: IDispatch
  {
    [
    propget, 
    id(0x80010416)
    ]
    HRESULT _stdcall nodeType([out, retval] long * p );
    [
    propget, 
    id(0x80010417)
    ]
    HRESULT _stdcall parentNode([out, retval] IHTMLDOMNode ** p  );
    [
    id(0x80010418)
    ]
    HRESULT _stdcall hasChildNodes([out, retval] VARIANT_BOOL * fChildren );
    [
    propget, 
    id(0x80010419)
    ]
    HRESULT _stdcall childNodes([out, retval]  IDispatch ** p );
    [
    propget, 
    id(0x8001041A)
    ]
    HRESULT _stdcall attributes([out, retval]  IDispatch ** p );
    [
    id(0x8001041B)
    ]
    HRESULT _stdcall insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild, [out, retval] IHTMLDOMNode ** node  );
    [
    id(0x8001041C)
    ]
    HRESULT _stdcall removeChild([in] IHTMLDOMNode * oldChild , [out, retval] IHTMLDOMNode ** node  );
    [
    id(0x8001041D)
    ]
    HRESULT _stdcall replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild , [out, retval] IHTMLDOMNode ** node  );
    [
    id(0x80010425)
    ]
    HRESULT _stdcall cloneNode([in] VARIANT_BOOL fDeep, [out, retval] IHTMLDOMNode ** clonedNode  );
    [
    id(0x8001042A)
    ]
    HRESULT _stdcall removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep, [out, retval] IHTMLDOMNode ** removed  );
    [
    id(0x8001042C)
    ]
    HRESULT _stdcall swapNode([in] IHTMLDOMNode * otherNode , [out, retval] IHTMLDOMNode ** swappedNode  );
    [
    id(0x8001042B)
    ]
    HRESULT _stdcall replaceNode([in] IHTMLDOMNode * replacement , [out, retval] IHTMLDOMNode ** replaced  );
    [
    id(0x80010431)
    ]
    HRESULT _stdcall appendChild([in] IHTMLDOMNode * newChild , [out, retval] IHTMLDOMNode ** node  );
    [
    propget, 
    id(0x80010432)
    ]
    HRESULT _stdcall nodeName([out, retval] BSTR * p );
    [
    propput, 
    id(0x80010433)
    ]
    HRESULT _stdcall nodeValue([in] VARIANT p );
    [
    propget, 
    id(0x80010433)
    ]
    HRESULT _stdcall nodeValue([out, retval] VARIANT * p );
    [
    propget, 
    id(0x80010434)
    ]
    HRESULT _stdcall firstChild([out, retval] IHTMLDOMNode ** p  );
    [
    propget, 
    id(0x80010435)
    ]
    HRESULT _stdcall lastChild([out, retval] IHTMLDOMNode ** p  );
    [
    propget, 
    id(0x80010436)
    ]
    HRESULT _stdcall previousSibling([out, retval] IHTMLDOMNode ** p  );
    [
    propget, 
    id(0x80010437)
    ]
    HRESULT _stdcall nextSibling([out, retval] IHTMLDOMNode ** p  );
  };

  [
    uuid(3050F810-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLDOMAttribute2: IDispatch
  {
    [
    propget, 
    id(0x000003EB)
    ]
    HRESULT _stdcall name([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003EC)
    ]
    HRESULT _stdcall value([in] BSTR p );
    [
    propget, 
    id(0x000003EC)
    ]
    HRESULT _stdcall value([out, retval] BSTR * p );
    [
    propget, 
    id(0x000003ED)
    ]
    HRESULT _stdcall expando([out, retval] VARIANT_BOOL * p );
    [
    propget, 
    id(0x000003EE)
    ]
    HRESULT _stdcall nodeType([out, retval] long * p );
    [
    propget, 
    id(0x000003EF)
    ]
    HRESULT _stdcall parentNode([out, retval] IHTMLDOMNode ** p  );
    [
    propget, 
    id(0x000003F0)
    ]
    HRESULT _stdcall childNodes([out, retval]  IDispatch ** p );
    [
    propget, 
    id(0x000003F1)
    ]
    HRESULT _stdcall firstChild([out, retval] IHTMLDOMNode ** p  );
    [
    propget, 
    id(0x000003F2)
    ]
    HRESULT _stdcall lastChild([out, retval] IHTMLDOMNode ** p  );
    [
    propget, 
    id(0x000003F3)
    ]
    HRESULT _stdcall previousSibling([out, retval] IHTMLDOMNode ** p  );
    [
    propget, 
    id(0x000003F4)
    ]
    HRESULT _stdcall nextSibling([out, retval] IHTMLDOMNode ** p  );
    [
    propget, 
    id(0x000003F5)
    ]
    HRESULT _stdcall attributes([out, retval]  IDispatch ** p );
    [
    propget, 
    id(0x000003F6)
    ]
    HRESULT _stdcall ownerDocument([out, retval]  IDispatch ** p );
    [
    id(0x000003F7)
    ]
    HRESULT _stdcall insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild, [out, retval] IHTMLDOMNode ** node  );
    [
    id(0x000003F8)
    ]
    HRESULT _stdcall replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild , [out, retval] IHTMLDOMNode ** node  );
    [
    id(0x000003F9)
    ]
    HRESULT _stdcall removeChild([in] IHTMLDOMNode * oldChild , [out, retval] IHTMLDOMNode ** node  );
    [
    id(0x000003FA)
    ]
    HRESULT _stdcall appendChild([in] IHTMLDOMNode * newChild , [out, retval] IHTMLDOMNode ** node  );
    [
    id(0x000003FB)
    ]
    HRESULT _stdcall hasChildNodes([out, retval] VARIANT_BOOL * fChildren );
    [
    id(0x000003FC)
    ]
    HRESULT _stdcall cloneNode([in] VARIANT_BOOL fDeep, [out, retval] IHTMLDOMAttribute ** clonedNode  );
  };

  [
    uuid(3050F4B1-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLDOMTextNode: IDispatch
  {
    [
    propput, 
    id(0x000003E8)
    ]
    HRESULT _stdcall data([in] BSTR p );
    [
    propget, 
    id(0x000003E8)
    ]
    HRESULT _stdcall data([out, retval] BSTR * p );
    [
    id(0x000003E9)
    ]
    HRESULT _stdcall toString([out, retval] BSTR * String );
    [
    propget, 
    id(0x000003EA)
    ]
    HRESULT _stdcall length([out, retval] long * p );
    [
    id(0x000003EB)
    ]
    HRESULT _stdcall splitText([in] long offset, [out, retval] IHTMLDOMNode ** pRetNode  );
  };

  [
    uuid(3050F564-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLDOMAttribute
  {
    properties:
    methods:
    [
    propget, 
    id(0x000003E8)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x000003EA)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x000003EA)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x000003E9)
    ]
    VARIANT_BOOL specified( void );
    [
    propget, 
    id(0x000003EB)
    ]
    BSTR name( void );
    [
    propput, 
    id(0x000003EC)
    ]
    void value(BSTR Param1 );
    [
    propget, 
    id(0x000003EC)
    ]
    BSTR value( void );
    [
    propget, 
    id(0x000003ED)
    ]
    VARIANT_BOOL expando( void );
    [
    propget, 
    id(0x000003EE)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x000003EF)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    propget, 
    id(0x000003F0)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x000003F1)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x000003F2)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x000003F3)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x000003F4)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x000003F5)
    ]
     IDispatch * attributes( void );
    [
    propget, 
    id(0x000003F6)
    ]
     IDispatch * ownerDocument( void );
    [
    id(0x000003F7)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x000003F8)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x000003F9)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x000003FA)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    id(0x000003FB)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    id(0x000003FC)
    ]
    IHTMLDOMAttribute * cloneNode([in] VARIANT_BOOL fDeep );
  };

  [
    uuid(3050F565-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLDOMTextNode
  {
    properties:
    methods:
    [
    propput, 
    id(0x000003E8)
    ]
    void data(BSTR Param1 );
    [
    propget, 
    id(0x000003E8)
    ]
    BSTR data( void );
    [
    id(0x000003E9)
    ]
    BSTR toString( void );
    [
    propget, 
    id(0x000003EA)
    ]
    long length( void );
    [
    id(0x000003EB)
    ]
    IHTMLDOMNode * splitText([in] long offset );
    [
    id(0x000003EC)
    ]
    BSTR substringData([in] long offset, [in] long Count );
    [
    id(0x000003ED)
    ]
    void appendData([in] BSTR bstrstring );
    [
    id(0x000003EE)
    ]
    void insertData([in] long offset, [in] BSTR bstrstring );
    [
    id(0x000003EF)
    ]
    void deleteData([in] long offset, [in] long Count );
    [
    id(0x000003F0)
    ]
    void replaceData([in] long offset, [in] long Count, [in] BSTR bstrstring );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
  };

  [
    uuid(3050F4C3-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLAttributeCollection: IDispatch
  {
    [
    propget, 
    id(0x000005DC)
    ]
    HRESULT _stdcall length([out, retval] long * p );
    [
    propget, 
    id(0xFFFFFFFC), 
    restricted, 
    hidden
    ]
    HRESULT _stdcall _newEnum([out, retval]  IUnknown ** p );
    [
    id(0x00000000)
    ]
    HRESULT _stdcall item([in, optional] VARIANT * name, [out, retval]  IDispatch ** pdisp );
  };

  [
    uuid(3050F80A-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLAttributeCollection2: IDispatch
  {
    [
    id(0x000005DD)
    ]
    HRESULT _stdcall getNamedItem([in] BSTR bstrName, [out, retval] IHTMLDOMAttribute ** newretNode  );
    [
    id(0x000005DE)
    ]
    HRESULT _stdcall setNamedItem([in] IHTMLDOMAttribute * ppNode , [out, retval] IHTMLDOMAttribute ** newretNode  );
    [
    id(0x000005DF)
    ]
    HRESULT _stdcall removeNamedItem([in] BSTR bstrName, [out, retval] IHTMLDOMAttribute ** newretNode  );
  };

  [
    uuid(3050F56C-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLAttributeCollection
  {
    properties:
    methods:
    [
    propget, 
    id(0x000005DC)
    ]
    long length( void );
    [
    propget, 
    id(0xFFFFFFFC), 
    restricted, 
    hidden
    ]
     IUnknown * _newEnum( void );
    [
    id(0x00000000)
    ]
     IDispatch * item([in, optional] VARIANT * name );
    [
    id(0x000005DD)
    ]
    IHTMLDOMAttribute * getNamedItem([in] BSTR bstrName );
    [
    id(0x000005DE)
    ]
    IHTMLDOMAttribute * setNamedItem([in] IHTMLDOMAttribute * ppNode  );
    [
    id(0x000005DF)
    ]
    IHTMLDOMAttribute * removeNamedItem([in] BSTR bstrName );
  };

  [
    uuid(3050F60F-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface HTMLElementEvents2
  {
    properties:
    methods:
    [
    id(0x8001000A)
    ]
    VARIANT_BOOL onhelp([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA8)
    ]
    VARIANT_BOOL onclick([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA7)
    ]
    VARIANT_BOOL ondblclick([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA5)
    ]
    VARIANT_BOOL onkeypress([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA6)
    ]
    void onkeydown([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA4)
    ]
    void onkeyup([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010009)
    ]
    void onmouseout([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010008)
    ]
    void onmouseover([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA2)
    ]
    void onmousemove([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA3)
    ]
    void onmousedown([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA1)
    ]
    void onmouseup([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000C)
    ]
    VARIANT_BOOL onselectstart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010011)
    ]
    void onfilterchange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000B)
    ]
    VARIANT_BOOL ondragstart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010004)
    ]
    VARIANT_BOOL onbeforeupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010005)
    ]
    void onafterupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000D)
    ]
    VARIANT_BOOL onerrorupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010006)
    ]
    VARIANT_BOOL onrowexit([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010007)
    ]
    void onrowenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000E)
    ]
    void ondatasetchanged([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000F)
    ]
    void ondataavailable([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010010)
    ]
    void ondatasetcomplete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010012)
    ]
    void onlosecapture([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010013)
    ]
    void onpropertychange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003F6)
    ]
    void onscroll([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010001)
    ]
    void onfocus([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010000)
    ]
    void onblur([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003F8)
    ]
    void onresize([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010014)
    ]
    VARIANT_BOOL ondrag([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010015)
    ]
    void ondragend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010016)
    ]
    VARIANT_BOOL ondragenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010017)
    ]
    VARIANT_BOOL ondragover([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010018)
    ]
    void ondragleave([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010019)
    ]
    VARIANT_BOOL ondrop([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001D)
    ]
    VARIANT_BOOL onbeforecut([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001A)
    ]
    VARIANT_BOOL oncut([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001E)
    ]
    VARIANT_BOOL onbeforecopy([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001B)
    ]
    VARIANT_BOOL oncopy([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001F)
    ]
    VARIANT_BOOL onbeforepaste([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001C)
    ]
    VARIANT_BOOL onpaste([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003FF)
    ]
    VARIANT_BOOL oncontextmenu([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010020)
    ]
    void onrowsdelete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010021)
    ]
    void onrowsinserted([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010022)
    ]
    void oncellchange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFD9F)
    ]
    void onreadystatechange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000406)
    ]
    void onlayoutcomplete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000407)
    ]
    void onpage([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000412)
    ]
    void onmouseenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000413)
    ]
    void onmouseleave([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000414)
    ]
    void onactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000415)
    ]
    void ondeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040A)
    ]
    VARIANT_BOOL onbeforedeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000417)
    ]
    VARIANT_BOOL onbeforeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000418)
    ]
    void onfocusin([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000419)
    ]
    void onfocusout([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040B)
    ]
    void onmove([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040C)
    ]
    VARIANT_BOOL oncontrolselect([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040E)
    ]
    VARIANT_BOOL onmovestart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040F)
    ]
    void onmoveend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000410)
    ]
    VARIANT_BOOL onresizestart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000411)
    ]
    void onresizeend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000409)
    ]
    VARIANT_BOOL onmousewheel([in] IHTMLEventObj * pEvtObj  );
  };

  [
    uuid(3050F434-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLElement2: IDispatch
  {
    [
    propget, 
    id(0x8001040F)
    ]
    HRESULT _stdcall scopeName([out, retval] BSTR * p );
    [
    id(0x80010410)
    ]
    HRESULT _stdcall setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    HRESULT _stdcall releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onlosecapture([in] VARIANT p );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onlosecapture([out, retval] VARIANT * p );
    [
    id(0x80010412)
    ]
    HRESULT _stdcall componentFromPoint([in] long x, [in] long y, [out, retval] BSTR * component );
    [
    id(0x80010413)
    ]
    HRESULT _stdcall doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onscroll([in] VARIANT p );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onscroll([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall ondrag([in] VARIANT p );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall ondrag([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall ondragend([in] VARIANT p );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall ondragend([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall ondragenter([in] VARIANT p );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall ondragenter([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall ondragover([in] VARIANT p );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall ondragover([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall ondragleave([in] VARIANT p );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall ondragleave([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall ondrop([in] VARIANT p );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall ondrop([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onbeforecut([in] VARIANT p );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onbeforecut([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall oncut([in] VARIANT p );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall oncut([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onbeforecopy([in] VARIANT p );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onbeforecopy([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall oncopy([in] VARIANT p );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall oncopy([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onbeforepaste([in] VARIANT p );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onbeforepaste([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onpaste([in] VARIANT p );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onpaste([out, retval] VARIANT * p );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    HRESULT _stdcall currentStyle([out, retval] IHTMLCurrentStyle ** p  );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onpropertychange([in] VARIANT p );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onpropertychange([out, retval] VARIANT * p );
    [
    id(0x80010414)
    ]
    HRESULT _stdcall getClientRects([out, retval] IHTMLRectCollection ** pRectCol  );
    [
    id(0x80010415)
    ]
    HRESULT _stdcall getBoundingClientRect([out, retval] IHTMLRect ** pRect  );
    [
    id(0x800101F8)
    ]
    HRESULT _stdcall setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    HRESULT _stdcall getExpression([in] BSTR propname, [out, retval] VARIANT * expression );
    [
    id(0x800101FA)
    ]
    HRESULT _stdcall removeExpression([in] BSTR propname, [out, retval] VARIANT_BOOL * pfSuccess );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall tabIndex([in] short p );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall tabIndex([out, retval] short * p );
    [
    id(0x800107D0)
    ]
    HRESULT _stdcall focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall accessKey([in] BSTR p );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall accessKey([out, retval] BSTR * p );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onblur([in] VARIANT p );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onblur([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onfocus([in] VARIANT p );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onfocus([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onresize([in] VARIANT p );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onresize([out, retval] VARIANT * p );
    [
    id(0x800107D2)
    ]
    HRESULT _stdcall blur( void );
    [
    id(0x800107E1)
    ]
    HRESULT _stdcall addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    HRESULT _stdcall removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall clientHeight([out, retval] long * p );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall clientWidth([out, retval] long * p );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall clientTop([out, retval] long * p );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall clientLeft([out, retval] long * p );
    [
    id(0x800101FB)
    ]
    HRESULT _stdcall attachEvent([in] BSTR event, [in]  IDispatch * pdisp, [out, retval] VARIANT_BOOL * pfResult );
    [
    id(0x800101FC)
    ]
    HRESULT _stdcall detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    HRESULT _stdcall readyState([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onreadystatechange([in] VARIANT p );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onreadystatechange([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onrowsdelete([in] VARIANT p );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onrowsdelete([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onrowsinserted([in] VARIANT p );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onrowsinserted([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall oncellchange([in] VARIANT p );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall oncellchange([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall dir([in] BSTR p );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall dir([out, retval] BSTR * p );
    [
    id(0x80010420)
    ]
    HRESULT _stdcall createControlRange([out, retval]  IDispatch ** range );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollHeight([out, retval] long * p );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollWidth([out, retval] long * p );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollTop([in] long p );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollTop([out, retval] long * p );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollLeft([in] long p );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollLeft([out, retval] long * p );
    [
    id(0x80010426)
    ]
    HRESULT _stdcall clearAttributes( void );
    [
    id(0x80010427)
    ]
    HRESULT _stdcall mergeAttributes([in] IHTMLElement * mergeThis  );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall oncontextmenu([in] VARIANT p );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall oncontextmenu([out, retval] VARIANT * p );
    [
    id(0x8001042D)
    ]
    HRESULT _stdcall insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement , [out, retval] IHTMLElement ** inserted  );
    [
    id(0x80010429)
    ]
    HRESULT _stdcall applyElement([in] IHTMLElement * apply , [in] BSTR where, [out, retval] IHTMLElement ** applied  );
    [
    id(0x8001042E)
    ]
    HRESULT _stdcall getAdjacentText([in] BSTR where, [out, retval] BSTR * text );
    [
    id(0x8001042F)
    ]
    HRESULT _stdcall replaceAdjacentText([in] BSTR where, [in] BSTR newText, [out, retval] BSTR * oldText );
    [
    propget, 
    id(0x80010430)
    ]
    HRESULT _stdcall canHaveChildren([out, retval] VARIANT_BOOL * p );
    [
    id(0x80010438)
    ]
    HRESULT _stdcall addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory, [out, retval] long * pCookie );
    [
    id(0x80010439)
    ]
    HRESULT _stdcall removeBehavior([in] long cookie, [out, retval] VARIANT_BOOL * pfResult );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    HRESULT _stdcall runtimeStyle([out, retval] IHTMLStyle ** p  );
    [
    propget, 
    id(0x8001043A)
    ]
    HRESULT _stdcall behaviorUrns([out, retval]  IDispatch ** p );
    [
    propput, 
    id(0x8001043B)
    ]
    HRESULT _stdcall tagUrn([in] BSTR p );
    [
    propget, 
    id(0x8001043B)
    ]
    HRESULT _stdcall tagUrn([out, retval] BSTR * p );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onbeforeeditfocus([in] VARIANT p );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onbeforeeditfocus([out, retval] VARIANT * p );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    HRESULT _stdcall readyStateValue([out, retval] long * p );
    [
    id(0x8001043D)
    ]
    HRESULT _stdcall getElementsByTagName([in] BSTR v, [out, retval] IHTMLElementCollection ** pelColl  );
  };

  [
    uuid(3050F673-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLElement3: IDispatch
  {
    [
    id(0x80010448)
    ]
    HRESULT _stdcall mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    HRESULT _stdcall isMultiLine([out, retval] VARIANT_BOOL * p );
    [
    propget, 
    id(0x8001044A)
    ]
    HRESULT _stdcall canHaveHTML([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onlayoutcomplete([in] VARIANT p );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onlayoutcomplete([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onpage([in] VARIANT p );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onpage([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    HRESULT _stdcall inflateBlock([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    HRESULT _stdcall inflateBlock([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onbeforedeactivate([in] VARIANT p );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onbeforedeactivate([out, retval] VARIANT * p );
    [
    id(0x8001044D)
    ]
    HRESULT _stdcall setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall contentEditable([in] BSTR p );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall contentEditable([out, retval] BSTR * p );
    [
    propget, 
    id(0x8001044E)
    ]
    HRESULT _stdcall isContentEditable([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall hideFocus([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall hideFocus([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall disabled([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall disabled([out, retval] VARIANT_BOOL * p );
    [
    propget, 
    id(0x80010451)
    ]
    HRESULT _stdcall isDisabled([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onmove([in] VARIANT p );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onmove([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall oncontrolselect([in] VARIANT p );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall oncontrolselect([out, retval] VARIANT * p );
    [
    id(0x80010452)
    ]
    HRESULT _stdcall FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject, [out, retval] VARIANT_BOOL * pfCancelled );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onresizestart([in] VARIANT p );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onresizestart([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onresizeend([in] VARIANT p );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onresizeend([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onmovestart([in] VARIANT p );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onmovestart([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onmoveend([in] VARIANT p );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onmoveend([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onmouseenter([in] VARIANT p );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onmouseenter([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onmouseleave([in] VARIANT p );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onmouseleave([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onactivate([in] VARIANT p );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onactivate([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall ondeactivate([in] VARIANT p );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall ondeactivate([out, retval] VARIANT * p );
    [
    id(0x80010453)
    ]
    HRESULT _stdcall dragDrop([out, retval] VARIANT_BOOL * pfRet );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    HRESULT _stdcall glyphMode([out, retval] long * p );
  };

  [
    uuid(3050F80F-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLElement4: IDispatch
  {
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onmousewheel([in] VARIANT p );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onmousewheel([out, retval] VARIANT * p );
    [
    id(0x80010458)
    ]
    HRESULT _stdcall normalize( void );
    [
    id(0x80010455)
    ]
    HRESULT _stdcall getAttributeNode([in] BSTR bstrName, [out, retval] IHTMLDOMAttribute ** ppAttribute  );
    [
    id(0x80010456)
    ]
    HRESULT _stdcall setAttributeNode([in] IHTMLDOMAttribute * pattr , [out, retval] IHTMLDOMAttribute ** ppretAttribute  );
    [
    id(0x80010457)
    ]
    HRESULT _stdcall removeAttributeNode([in] IHTMLDOMAttribute * pattr , [out, retval] IHTMLDOMAttribute ** ppretAttribute  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onbeforeactivate([in] VARIANT p );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onbeforeactivate([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onfocusin([in] VARIANT p );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onfocusin([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onfocusout([in] VARIANT p );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onfocusout([out, retval] VARIANT * p );
  };

  [
    uuid(3050F669-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface IHTMLElementRender: IUnknown
  {
    HRESULT _stdcall DrawToDC([in] wireHDC hdc  );
    HRESULT _stdcall SetDocumentPrinter([in] BSTR bstrPrinterName, [in] wireHDC hdc  );
  };

  [
    uuid(3050F6C9-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLElementDefaults: IDispatch
  {
    [
    propget, 
    id(0x000003E9), 
    nonbrowsable
    ]
    HRESULT _stdcall style([out, retval] IHTMLStyle ** p  );
    [
    propput, 
    id(0x000003EA)
    ]
    HRESULT _stdcall tabStop([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x000003EA)
    ]
    HRESULT _stdcall tabStop([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x8001144F)
    ]
    HRESULT _stdcall viewInheritStyle([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x8001144F)
    ]
    HRESULT _stdcall viewInheritStyle([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x000003EE)
    ]
    HRESULT _stdcall viewMasterTab([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x000003EE)
    ]
    HRESULT _stdcall viewMasterTab([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x000003EB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollSegmentX([in] long p );
    [
    propget, 
    id(0x000003EB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollSegmentX([out, retval] long * p );
    [
    propput, 
    id(0x000003EC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollSegmentY([in] long p );
    [
    propget, 
    id(0x000003EC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scrollSegmentY([out, retval] long * p );
    [
    propput, 
    id(0x000003F0)
    ]
    HRESULT _stdcall isMultiLine([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x000003F0)
    ]
    HRESULT _stdcall isMultiLine([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x8001142A)
    ]
    HRESULT _stdcall contentEditable([in] BSTR p );
    [
    propget, 
    id(0x8001142A)
    ]
    HRESULT _stdcall contentEditable([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003F1)
    ]
    HRESULT _stdcall canHaveHTML([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x000003F1)
    ]
    HRESULT _stdcall canHaveHTML([out, retval] VARIANT_BOOL * p );
    [
    propputref, 
    id(0x000003F3)
    ]
    HRESULT _stdcall viewLink([in] IHTMLDocument * p  );
    [
    propget, 
    id(0x000003F3)
    ]
    HRESULT _stdcall viewLink([out, retval] IHTMLDocument ** p  );
    [
    propput, 
    id(0x8001144E)
    ]
    HRESULT _stdcall frozen([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x8001144E)
    ]
    HRESULT _stdcall frozen([out, retval] VARIANT_BOOL * p );
  };

  [
    uuid(3050F58C-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLDefaults
  {
    properties:
    methods:
    [
    propget, 
    id(0x000003E9), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x000003EA)
    ]
    void tabStop(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x000003EA)
    ]
    VARIANT_BOOL tabStop( void );
    [
    propput, 
    id(0x8001144F)
    ]
    void viewInheritStyle(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001144F)
    ]
    VARIANT_BOOL viewInheritStyle( void );
    [
    propput, 
    id(0x000003EE)
    ]
    void viewMasterTab(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x000003EE)
    ]
    VARIANT_BOOL viewMasterTab( void );
    [
    propput, 
    id(0x000003EB), 
    bindable, 
    displaybind
    ]
    void scrollSegmentX(long Param1 );
    [
    propget, 
    id(0x000003EB), 
    bindable, 
    displaybind
    ]
    long scrollSegmentX( void );
    [
    propput, 
    id(0x000003EC), 
    bindable, 
    displaybind
    ]
    void scrollSegmentY(long Param1 );
    [
    propget, 
    id(0x000003EC), 
    bindable, 
    displaybind
    ]
    long scrollSegmentY( void );
    [
    propput, 
    id(0x000003F0)
    ]
    void isMultiLine(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x000003F0)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propput, 
    id(0x8001142A)
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A)
    ]
    BSTR contentEditable( void );
    [
    propput, 
    id(0x000003F1)
    ]
    void canHaveHTML(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x000003F1)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propputref, 
    id(0x000003F3)
    ]
    void viewLink(IHTMLDocument * Param1  );
    [
    propget, 
    id(0x000003F3)
    ]
    IHTMLDocument * viewLink( void );
    [
    propput, 
    id(0x8001144E)
    ]
    void frozen(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001144E)
    ]
    VARIANT_BOOL frozen( void );
  };

  [
    uuid(3050F4FD-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTCDefaultDispatch: IDispatch
  {
    [
    propget, 
    id(0x80011417)
    ]
    HRESULT _stdcall element([out, retval] IHTMLElement ** p  );
    [
    id(0x80011418)
    ]
    HRESULT _stdcall CreateEventObject([out, retval] IHTMLEventObj ** eventObj  );
    [
    propget, 
    id(0x8001142D)
    ]
    HRESULT _stdcall defaults([out, retval]  IDispatch ** p );
    [
    propget, 
    id(0x80011416)
    ]
    HRESULT _stdcall document([out, retval]  IDispatch ** p );
  };

  [
    uuid(3050F4FF-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTCEventBehavior: IDispatch
  {
    [
    id(0x800101F4)
    ]
    HRESULT _stdcall fire([in] IHTMLEventObj * pVar  );
  };

  [
    uuid(3050F573-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTCDefaultDispatch
  {
    properties:
    methods:
    [
    propget, 
    id(0x80011417)
    ]
    IHTMLElement * element( void );
    [
    id(0x80011418)
    ]
    IHTMLEventObj * CreateEventObject( void );
    [
    propget, 
    id(0x8001142D)
    ]
     IDispatch * defaults( void );
    [
    propget, 
    id(0x80011416)
    ]
     IDispatch * document( void );
  };

  [
    uuid(3050F574-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTCEventBehavior
  {
    properties:
    methods:
    [
    id(0x800101F4)
    ]
    void fire([in] IHTMLEventObj * pVar  );
  };

  [
    uuid(3050F4B7-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLGenericElement: IDispatch
  {
    [
    propget, 
    id(0x000003E9), 
    hidden
    ]
    HRESULT _stdcall recordset([out, retval]  IDispatch ** p );
    [
    id(0x000003EA)
    ]
    HRESULT _stdcall namedRecordset([in] BSTR dataMember, [in, optional] VARIANT * hierarchy, [out, retval]  IDispatch ** ppRecordset );
  };

  [
    uuid(3050F563-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLGenericElement
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propget, 
    id(0x000003E9), 
    hidden
    ]
     IDispatch * recordset( void );
    [
    id(0x000003EA)
    ]
     IDispatch * namedRecordset([in] BSTR dataMember, [in, optional] VARIANT * hierarchy );
  };

  [
    uuid(3050F357-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLStyleSheetRule: IDispatch
  {
    [
    propput, 
    id(0x000003E9)
    ]
    HRESULT _stdcall selectorText([in] BSTR p );
    [
    propget, 
    id(0x000003E9)
    ]
    HRESULT _stdcall selectorText([out, retval] BSTR * p );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    HRESULT _stdcall style([out, retval] IHTMLRuleStyle ** p  );
    [
    propget, 
    id(0x000003EA)
    ]
    HRESULT _stdcall readOnly([out, retval] VARIANT_BOOL * p );
  };

  [
    uuid(3050F2E5-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLStyleSheetRulesCollection: IDispatch
  {
    [
    propget, 
    id(0x000003E9)
    ]
    HRESULT _stdcall length([out, retval] long * p );
    [
    id(0x00000000)
    ]
    HRESULT _stdcall item([in] long index, [out, retval] IHTMLStyleSheetRule ** ppHTMLStyleSheetRule  );
  };

  [
    uuid(3050F7F0-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLStyleSheetPagesCollection: IDispatch
  {
    [
    propget, 
    id(0x000003E9)
    ]
    HRESULT _stdcall length([out, retval] long * p );
    [
    id(0x00000000)
    ]
    HRESULT _stdcall item([in] long index, [out, retval] IHTMLStyleSheetPage ** ppHTMLStyleSheetPage  );
  };

  [
    uuid(3050F37E-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLStyleSheetsCollection: IDispatch
  {
    [
    propget, 
    id(0x000003E9)
    ]
    HRESULT _stdcall length([out, retval] long * p );
    [
    propget, 
    id(0xFFFFFFFC), 
    restricted, 
    hidden
    ]
    HRESULT _stdcall _newEnum([out, retval]  IUnknown ** p );
    [
    id(0x00000000)
    ]
    HRESULT _stdcall item([in] VARIANT * pvarIndex, [out, retval] VARIANT * pvarResult );
  };

  [
    uuid(3050F2E3-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLStyleSheet: IDispatch
  {
    [
    propput, 
    id(0x000003E9)
    ]
    HRESULT _stdcall title([in] BSTR p );
    [
    propget, 
    id(0x000003E9)
    ]
    HRESULT _stdcall title([out, retval] BSTR * p );
    [
    propget, 
    id(0x000003EA)
    ]
    HRESULT _stdcall parentStyleSheet([out, retval] IHTMLStyleSheet ** p  );
    [
    propget, 
    id(0x000003EB)
    ]
    HRESULT _stdcall owningElement([out, retval] IHTMLElement ** p  );
    [
    propput, 
    id(0x8001004C)
    ]
    HRESULT _stdcall disabled([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x8001004C)
    ]
    HRESULT _stdcall disabled([out, retval] VARIANT_BOOL * p );
    [
    propget, 
    id(0x000003EC)
    ]
    HRESULT _stdcall readOnly([out, retval] VARIANT_BOOL * p );
    [
    propget, 
    id(0x000003ED)
    ]
    HRESULT _stdcall imports([out, retval] IHTMLStyleSheetsCollection ** p  );
    [
    propput, 
    id(0x000003EE)
    ]
    HRESULT _stdcall href([in] BSTR p );
    [
    propget, 
    id(0x000003EE)
    ]
    HRESULT _stdcall href([out, retval] BSTR * p );
    [
    propget, 
    id(0x000003EF)
    ]
    HRESULT _stdcall type([out, retval] BSTR * p );
    [
    propget, 
    id(0x000003F0)
    ]
    HRESULT _stdcall id([out, retval] BSTR * p );
    [
    id(0x000003F1)
    ]
    HRESULT _stdcall addImport([in] BSTR bstrUrl, [in, optional, defaultvalue(-1)] long lIndex, [out, retval] long * plIndex );
    [
    id(0x000003F2)
    ]
    HRESULT _stdcall addRule([in] BSTR bstrSelector, [in] BSTR bstrStyle, [in, optional, defaultvalue(-1)] long lIndex, [out, retval] long * plNewIndex );
    [
    id(0x000003F3)
    ]
    HRESULT _stdcall removeImport([in] long lIndex );
    [
    id(0x000003F4)
    ]
    HRESULT _stdcall removeRule([in] long lIndex );
    [
    propput, 
    id(0x000003F5)
    ]
    HRESULT _stdcall media([in] BSTR p );
    [
    propget, 
    id(0x000003F5)
    ]
    HRESULT _stdcall media([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003F6)
    ]
    HRESULT _stdcall cssText([in] BSTR p );
    [
    propget, 
    id(0x000003F6)
    ]
    HRESULT _stdcall cssText([out, retval] BSTR * p );
    [
    propget, 
    id(0x000003F7)
    ]
    HRESULT _stdcall rules([out, retval] IHTMLStyleSheetRulesCollection ** p  );
  };

  [
    uuid(3050F3D1-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLStyleSheet2: IDispatch
  {
    [
    propget, 
    id(0x000003F8)
    ]
    HRESULT _stdcall pages([out, retval] IHTMLStyleSheetPagesCollection ** p  );
    [
    id(0x000003F9)
    ]
    HRESULT _stdcall addPageRule([in] BSTR bstrSelector, [in] BSTR bstrStyle, [in, optional, defaultvalue(-1)] long lIndex, [out, retval] long * plNewIndex );
  };

  [
    uuid(3050F58D-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLStyleSheet
  {
    properties:
    methods:
    [
    propput, 
    id(0x000003E9)
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x000003E9)
    ]
    BSTR title( void );
    [
    propget, 
    id(0x000003EA)
    ]
    IHTMLStyleSheet * parentStyleSheet( void );
    [
    propget, 
    id(0x000003EB)
    ]
    IHTMLElement * owningElement( void );
    [
    propput, 
    id(0x8001004C)
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C)
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x000003EC)
    ]
    VARIANT_BOOL readOnly( void );
    [
    propget, 
    id(0x000003ED)
    ]
    IHTMLStyleSheetsCollection * imports( void );
    [
    propput, 
    id(0x000003EE)
    ]
    void href(BSTR Param1 );
    [
    propget, 
    id(0x000003EE)
    ]
    BSTR href( void );
    [
    propget, 
    id(0x000003EF)
    ]
    BSTR type( void );
    [
    propget, 
    id(0x000003F0)
    ]
    BSTR id( void );
    [
    id(0x000003F1)
    ]
    long addImport([in] BSTR bstrUrl, [in, optional, defaultvalue(-1)] long lIndex );
    [
    id(0x000003F2)
    ]
    long addRule([in] BSTR bstrSelector, [in] BSTR bstrStyle, [in, optional, defaultvalue(-1)] long lIndex );
    [
    id(0x000003F3)
    ]
    void removeImport([in] long lIndex );
    [
    id(0x000003F4)
    ]
    void removeRule([in] long lIndex );
    [
    propput, 
    id(0x000003F5)
    ]
    void media(BSTR Param1 );
    [
    propget, 
    id(0x000003F5)
    ]
    BSTR media( void );
    [
    propput, 
    id(0x000003F6)
    ]
    void cssText(BSTR Param1 );
    [
    propget, 
    id(0x000003F6)
    ]
    BSTR cssText( void );
    [
    propget, 
    id(0x000003F7)
    ]
    IHTMLStyleSheetRulesCollection * rules( void );
    [
    propget, 
    id(0x000003F8)
    ]
    IHTMLStyleSheetPagesCollection * pages( void );
    [
    id(0x000003F9)
    ]
    long addPageRule([in] BSTR bstrSelector, [in] BSTR bstrStyle, [in, optional, defaultvalue(-1)] long lIndex );
  };

  [
    uuid(3050F61D-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface HTMLLinkElementEvents2
  {
    properties:
    methods:
    [
    id(0x8001000A)
    ]
    VARIANT_BOOL onhelp([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA8)
    ]
    VARIANT_BOOL onclick([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA7)
    ]
    VARIANT_BOOL ondblclick([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA5)
    ]
    VARIANT_BOOL onkeypress([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA6)
    ]
    void onkeydown([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA4)
    ]
    void onkeyup([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010009)
    ]
    void onmouseout([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010008)
    ]
    void onmouseover([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA2)
    ]
    void onmousemove([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA3)
    ]
    void onmousedown([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA1)
    ]
    void onmouseup([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000C)
    ]
    VARIANT_BOOL onselectstart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010011)
    ]
    void onfilterchange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000B)
    ]
    VARIANT_BOOL ondragstart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010004)
    ]
    VARIANT_BOOL onbeforeupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010005)
    ]
    void onafterupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000D)
    ]
    VARIANT_BOOL onerrorupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010006)
    ]
    VARIANT_BOOL onrowexit([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010007)
    ]
    void onrowenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000E)
    ]
    void ondatasetchanged([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000F)
    ]
    void ondataavailable([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010010)
    ]
    void ondatasetcomplete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010012)
    ]
    void onlosecapture([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010013)
    ]
    void onpropertychange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003F6)
    ]
    void onscroll([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010001)
    ]
    void onfocus([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010000)
    ]
    void onblur([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003F8)
    ]
    void onresize([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010014)
    ]
    VARIANT_BOOL ondrag([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010015)
    ]
    void ondragend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010016)
    ]
    VARIANT_BOOL ondragenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010017)
    ]
    VARIANT_BOOL ondragover([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010018)
    ]
    void ondragleave([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010019)
    ]
    VARIANT_BOOL ondrop([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001D)
    ]
    VARIANT_BOOL onbeforecut([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001A)
    ]
    VARIANT_BOOL oncut([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001E)
    ]
    VARIANT_BOOL onbeforecopy([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001B)
    ]
    VARIANT_BOOL oncopy([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001F)
    ]
    VARIANT_BOOL onbeforepaste([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001C)
    ]
    VARIANT_BOOL onpaste([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003FF)
    ]
    VARIANT_BOOL oncontextmenu([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010020)
    ]
    void onrowsdelete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010021)
    ]
    void onrowsinserted([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010022)
    ]
    void oncellchange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFD9F)
    ]
    void onreadystatechange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000406)
    ]
    void onlayoutcomplete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000407)
    ]
    void onpage([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000412)
    ]
    void onmouseenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000413)
    ]
    void onmouseleave([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000414)
    ]
    void onactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000415)
    ]
    void ondeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040A)
    ]
    VARIANT_BOOL onbeforedeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000417)
    ]
    VARIANT_BOOL onbeforeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000418)
    ]
    void onfocusin([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000419)
    ]
    void onfocusout([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040B)
    ]
    void onmove([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040C)
    ]
    VARIANT_BOOL oncontrolselect([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040E)
    ]
    VARIANT_BOOL onmovestart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040F)
    ]
    void onmoveend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000410)
    ]
    VARIANT_BOOL onresizestart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000411)
    ]
    void onresizeend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000409)
    ]
    VARIANT_BOOL onmousewheel([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003EB)
    ]
    void onload([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003EA)
    ]
    void onerror([in] IHTMLEventObj * pEvtObj  );
  };

  [
    uuid(3050F205-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLLinkElement: IDispatch
  {
    [
    propput, 
    id(0x000003ED), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall href([in] BSTR p );
    [
    propget, 
    id(0x000003ED), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall href([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003EE), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall rel([in] BSTR p );
    [
    propget, 
    id(0x000003EE), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall rel([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003EF), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall rev([in] BSTR p );
    [
    propget, 
    id(0x000003EF), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall rev([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003F0), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall type([in] BSTR p );
    [
    propget, 
    id(0x000003F0), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall type([out, retval] BSTR * p );
    [
    propget, 
    id(0x800113FC)
    ]
    HRESULT _stdcall readyState([out, retval] BSTR * p );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onreadystatechange([in] VARIANT p );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onreadystatechange([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011790), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onload([in] VARIANT p );
    [
    propget, 
    id(0x80011790), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onload([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001178D), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onerror([in] VARIANT p );
    [
    propget, 
    id(0x8001178D), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onerror([out, retval] VARIANT * p );
    [
    propget, 
    id(0x000003F6)
    ]
    HRESULT _stdcall styleSheet([out, retval] IHTMLStyleSheet ** p  );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall disabled([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall disabled([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x000003F8), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall media([in] BSTR p );
    [
    propget, 
    id(0x000003F8), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall media([out, retval] BSTR * p );
  };

  [
    uuid(3050F524-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLLinkElement
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x000003ED), 
    bindable, 
    displaybind
    ]
    void href(BSTR Param1 );
    [
    propget, 
    id(0x000003ED), 
    bindable, 
    displaybind
    ]
    BSTR href( void );
    [
    propput, 
    id(0x000003EE), 
    bindable, 
    displaybind
    ]
    void rel(BSTR Param1 );
    [
    propget, 
    id(0x000003EE), 
    bindable, 
    displaybind
    ]
    BSTR rel( void );
    [
    propput, 
    id(0x000003EF), 
    bindable, 
    displaybind
    ]
    void rev(BSTR Param1 );
    [
    propget, 
    id(0x000003EF), 
    bindable, 
    displaybind
    ]
    BSTR rev( void );
    [
    propput, 
    id(0x000003F0), 
    bindable, 
    displaybind
    ]
    void type(BSTR Param1 );
    [
    propget, 
    id(0x000003F0), 
    bindable, 
    displaybind
    ]
    BSTR type( void );
    [
    propput, 
    id(0x80011790), 
    bindable, 
    displaybind
    ]
    void onload(VARIANT Param1 );
    [
    propget, 
    id(0x80011790), 
    bindable, 
    displaybind
    ]
    VARIANT onload( void );
    [
    propput, 
    id(0x8001178D), 
    bindable, 
    displaybind
    ]
    void onerror(VARIANT Param1 );
    [
    propget, 
    id(0x8001178D), 
    bindable, 
    displaybind
    ]
    VARIANT onerror( void );
    [
    propget, 
    id(0x000003F6)
    ]
    IHTMLStyleSheet * styleSheet( void );
    [
    propput, 
    id(0x000003F8), 
    bindable, 
    displaybind
    ]
    void media(BSTR Param1 );
    [
    propget, 
    id(0x000003F8), 
    bindable, 
    displaybind
    ]
    BSTR media( void );
    [
    propput, 
    id(0x000003F9), 
    bindable, 
    displaybind
    ]
    void target(BSTR Param1 );
    [
    propget, 
    id(0x000003F9), 
    bindable, 
    displaybind
    ]
    BSTR target( void );
    [
    propput, 
    id(0x000003FA), 
    bindable, 
    displaybind
    ]
    void charset(BSTR Param1 );
    [
    propget, 
    id(0x000003FA), 
    bindable, 
    displaybind
    ]
    BSTR charset( void );
    [
    propput, 
    id(0x000003FB), 
    bindable, 
    displaybind
    ]
    void hreflang(BSTR Param1 );
    [
    propget, 
    id(0x000003FB), 
    bindable, 
    displaybind
    ]
    BSTR hreflang( void );
  };

  [
    uuid(3050F220-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLTxtRange: IDispatch
  {
    [
    propget, 
    id(0x000003EB)
    ]
    HRESULT _stdcall htmlText([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003EC)
    ]
    HRESULT _stdcall text([in] BSTR p );
    [
    propget, 
    id(0x000003EC)
    ]
    HRESULT _stdcall text([out, retval] BSTR * p );
    [
    id(0x000003EE)
    ]
    HRESULT _stdcall parentElement([out, retval] IHTMLElement ** parent  );
    [
    id(0x000003F0)
    ]
    HRESULT _stdcall duplicate([out, retval] IHTMLTxtRange ** duplicate  );
    [
    id(0x000003F2)
    ]
    HRESULT _stdcall inRange([in] IHTMLTxtRange * range , [out, retval] VARIANT_BOOL * inRange );
    [
    id(0x000003F3)
    ]
    HRESULT _stdcall isEqual([in] IHTMLTxtRange * range , [out, retval] VARIANT_BOOL * isEqual );
    [
    id(0x000003F4)
    ]
    HRESULT _stdcall scrollIntoView([in, optional, defaultvalue(True)] VARIANT_BOOL fStart );
    [
    id(0x000003F5)
    ]
    HRESULT _stdcall collapse([in, optional, defaultvalue(True)] VARIANT_BOOL Start );
    [
    id(0x000003F6)
    ]
    HRESULT _stdcall expand([in] BSTR Unit, [out, retval] VARIANT_BOOL * Success );
    [
    id(0x000003F7)
    ]
    HRESULT _stdcall move([in] BSTR Unit, [in, optional, defaultvalue(1)] long Count, [out, retval] long * ActualCount );
    [
    id(0x000003F8)
    ]
    HRESULT _stdcall moveStart([in] BSTR Unit, [in, optional, defaultvalue(1)] long Count, [out, retval] long * ActualCount );
    [
    id(0x000003F9)
    ]
    HRESULT _stdcall moveEnd([in] BSTR Unit, [in, optional, defaultvalue(1)] long Count, [out, retval] long * ActualCount );
    [
    id(0x00000400)
    ]
    HRESULT _stdcall select( void );
    [
    id(0x00000402)
    ]
    HRESULT _stdcall pasteHTML([in] BSTR html );
    [
    id(0x000003E9)
    ]
    HRESULT _stdcall moveToElementText([in] IHTMLElement * element  );
    [
    id(0x00000401)
    ]
    HRESULT _stdcall setEndPoint([in] BSTR how, [in] IHTMLTxtRange * SourceRange  );
    [
    id(0x000003FA)
    ]
    HRESULT _stdcall compareEndPoints([in] BSTR how, [in] IHTMLTxtRange * SourceRange , [out, retval] long * ret );
    [
    id(0x000003FB)
    ]
    HRESULT _stdcall findText([in] BSTR String, [in, optional, defaultvalue(1073741823)] long Count, [in, optional, defaultvalue(0)] long Flags, [out, retval] VARIANT_BOOL * Success );
    [
    id(0x000003FC)
    ]
    HRESULT _stdcall moveToPoint([in] long x, [in] long y );
    [
    id(0x000003FD)
    ]
    HRESULT _stdcall getBookmark([out, retval] BSTR * Boolmark );
    [
    id(0x000003F1)
    ]
    HRESULT _stdcall moveToBookmark([in] BSTR Bookmark, [out, retval] VARIANT_BOOL * Success );
    [
    id(0x00000403)
    ]
    HRESULT _stdcall queryCommandSupported([in] BSTR cmdID, [out, retval] VARIANT_BOOL * pfRet );
    [
    id(0x00000404)
    ]
    HRESULT _stdcall queryCommandEnabled([in] BSTR cmdID, [out, retval] VARIANT_BOOL * pfRet );
    [
    id(0x00000405)
    ]
    HRESULT _stdcall queryCommandState([in] BSTR cmdID, [out, retval] VARIANT_BOOL * pfRet );
    [
    id(0x00000406)
    ]
    HRESULT _stdcall queryCommandIndeterm([in] BSTR cmdID, [out, retval] VARIANT_BOOL * pfRet );
    [
    id(0x00000407)
    ]
    HRESULT _stdcall queryCommandText([in] BSTR cmdID, [out, retval] BSTR * pcmdText );
    [
    id(0x00000408)
    ]
    HRESULT _stdcall queryCommandValue([in] BSTR cmdID, [out, retval] VARIANT * pcmdValue );
    [
    id(0x00000409)
    ]
    HRESULT _stdcall execCommand([in] BSTR cmdID, [in, optional, defaultvalue(False)] VARIANT_BOOL showUI, [in, optional] VARIANT value, [out, retval] VARIANT_BOOL * pfRet );
    [
    id(0x0000040A)
    ]
    HRESULT _stdcall execCommandShowHelp([in] BSTR cmdID, [out, retval] VARIANT_BOOL * pfRet );
  };

  [
    uuid(3050F4A6-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLTextRangeMetrics2: IDispatch
  {
    [
    id(0x00000411)
    ]
    HRESULT _stdcall getClientRects([out, retval] IHTMLRectCollection ** pRectCol  );
    [
    id(0x00000412)
    ]
    HRESULT _stdcall getBoundingClientRect([out, retval] IHTMLRect ** pRect  );
  };

  [
    uuid(3050F7ED-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLTxtRangeCollection: IDispatch
  {
    [
    propget, 
    id(0x000005DC)
    ]
    HRESULT _stdcall length([out, retval] long * p );
    [
    propget, 
    id(0xFFFFFFFC), 
    restricted, 
    hidden
    ]
    HRESULT _stdcall _newEnum([out, retval]  IUnknown ** p );
    [
    id(0x00000000)
    ]
    HRESULT _stdcall item([in] VARIANT * pvarIndex, [out, retval] VARIANT * pvarResult );
  };

  [
    uuid(3050F614-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface HTMLFormElementEvents2
  {
    properties:
    methods:
    [
    id(0x8001000A)
    ]
    VARIANT_BOOL onhelp([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA8)
    ]
    VARIANT_BOOL onclick([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA7)
    ]
    VARIANT_BOOL ondblclick([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA5)
    ]
    VARIANT_BOOL onkeypress([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA6)
    ]
    void onkeydown([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA4)
    ]
    void onkeyup([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010009)
    ]
    void onmouseout([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010008)
    ]
    void onmouseover([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA2)
    ]
    void onmousemove([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA3)
    ]
    void onmousedown([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA1)
    ]
    void onmouseup([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000C)
    ]
    VARIANT_BOOL onselectstart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010011)
    ]
    void onfilterchange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000B)
    ]
    VARIANT_BOOL ondragstart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010004)
    ]
    VARIANT_BOOL onbeforeupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010005)
    ]
    void onafterupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000D)
    ]
    VARIANT_BOOL onerrorupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010006)
    ]
    VARIANT_BOOL onrowexit([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010007)
    ]
    void onrowenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000E)
    ]
    void ondatasetchanged([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000F)
    ]
    void ondataavailable([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010010)
    ]
    void ondatasetcomplete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010012)
    ]
    void onlosecapture([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010013)
    ]
    void onpropertychange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003F6)
    ]
    void onscroll([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010001)
    ]
    void onfocus([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010000)
    ]
    void onblur([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003F8)
    ]
    void onresize([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010014)
    ]
    VARIANT_BOOL ondrag([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010015)
    ]
    void ondragend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010016)
    ]
    VARIANT_BOOL ondragenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010017)
    ]
    VARIANT_BOOL ondragover([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010018)
    ]
    void ondragleave([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010019)
    ]
    VARIANT_BOOL ondrop([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001D)
    ]
    VARIANT_BOOL onbeforecut([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001A)
    ]
    VARIANT_BOOL oncut([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001E)
    ]
    VARIANT_BOOL onbeforecopy([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001B)
    ]
    VARIANT_BOOL oncopy([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001F)
    ]
    VARIANT_BOOL onbeforepaste([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001C)
    ]
    VARIANT_BOOL onpaste([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003FF)
    ]
    VARIANT_BOOL oncontextmenu([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010020)
    ]
    void onrowsdelete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010021)
    ]
    void onrowsinserted([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010022)
    ]
    void oncellchange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFD9F)
    ]
    void onreadystatechange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000406)
    ]
    void onlayoutcomplete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000407)
    ]
    void onpage([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000412)
    ]
    void onmouseenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000413)
    ]
    void onmouseleave([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000414)
    ]
    void onactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000415)
    ]
    void ondeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040A)
    ]
    VARIANT_BOOL onbeforedeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000417)
    ]
    VARIANT_BOOL onbeforeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000418)
    ]
    void onfocusin([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000419)
    ]
    void onfocusout([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040B)
    ]
    void onmove([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040C)
    ]
    VARIANT_BOOL oncontrolselect([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040E)
    ]
    VARIANT_BOOL onmovestart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040F)
    ]
    void onmoveend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000410)
    ]
    VARIANT_BOOL onresizestart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000411)
    ]
    void onresizeend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000409)
    ]
    VARIANT_BOOL onmousewheel([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003EF)
    ]
    VARIANT_BOOL onsubmit([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003F7)
    ]
    VARIANT_BOOL onreset([in] IHTMLEventObj * pEvtObj  );
  };

  [
    uuid(3050F510-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLFormElement
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x000003E9), 
    bindable, 
    displaybind
    ]
    void action(BSTR Param1 );
    [
    propget, 
    id(0x000003E9), 
    bindable, 
    displaybind
    ]
    BSTR action( void );
    [
    propput, 
    id(0x000003EB), 
    bindable, 
    displaybind
    ]
    void encoding(BSTR Param1 );
    [
    propget, 
    id(0x000003EB), 
    bindable, 
    displaybind
    ]
    BSTR encoding( void );
    [
    propput, 
    id(0x000003EC), 
    bindable, 
    displaybind
    ]
    void method(BSTR Param1 );
    [
    propget, 
    id(0x000003EC), 
    bindable, 
    displaybind
    ]
    BSTR method( void );
    [
    propget, 
    id(0x000003ED)
    ]
     IDispatch * elements( void );
    [
    propput, 
    id(0x000003EE), 
    bindable, 
    displaybind
    ]
    void target(BSTR Param1 );
    [
    propget, 
    id(0x000003EE), 
    bindable, 
    displaybind
    ]
    BSTR target( void );
    [
    propput, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    void name(BSTR Param1 );
    [
    propget, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    BSTR name( void );
    [
    propput, 
    id(0x8001177B), 
    bindable, 
    displaybind
    ]
    void onsubmit(VARIANT Param1 );
    [
    propget, 
    id(0x8001177B), 
    bindable, 
    displaybind
    ]
    VARIANT onsubmit( void );
    [
    propput, 
    id(0x8001177C), 
    bindable, 
    displaybind
    ]
    void onreset(VARIANT Param1 );
    [
    propget, 
    id(0x8001177C), 
    bindable, 
    displaybind
    ]
    VARIANT onreset( void );
    [
    id(0x000003F1)
    ]
    void submit( void );
    [
    id(0x000003F2)
    ]
    void reset( void );
    [
    propput, 
    id(0x000005DC)
    ]
    void length(long Param1 );
    [
    propget, 
    id(0x000005DC)
    ]
    long length( void );
    [
    propget, 
    id(0xFFFFFFFC), 
    restricted, 
    hidden
    ]
     IUnknown * _newEnum( void );
    [
    id(0x00000000)
    ]
     IDispatch * item([in, optional] VARIANT name, [in, optional] VARIANT index );
    [
    id(0x000005DE)
    ]
     IDispatch * tags([in] VARIANT tagName );
    [
    propput, 
    id(0x000003F3), 
    bindable, 
    displaybind
    ]
    void acceptCharset(BSTR Param1 );
    [
    propget, 
    id(0x000003F3), 
    bindable, 
    displaybind
    ]
    BSTR acceptCharset( void );
    [
    id(0x000005E1)
    ]
     IDispatch * urns([in] VARIANT urn );
    [
    id(0x000005E2)
    ]
     IDispatch * namedItem([in] BSTR name );
    [
    id(0x000003F4)
    ]
    void appendNameValuePair([in, optional, defaultvalue("")] BSTR name, [in, optional, defaultvalue("")] BSTR value );
    [
    id(0x000003F5)
    ]
    void appendNameFilePair([in, optional, defaultvalue("")] BSTR name, [in, optional, defaultvalue("")] BSTR filename );
    [
    id(0x000003F6)
    ]
    void appendItemSeparator( void );
  };

  [
    uuid(3050F612-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface HTMLControlElementEvents2
  {
    properties:
    methods:
    [
    id(0x8001000A)
    ]
    VARIANT_BOOL onhelp([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA8)
    ]
    VARIANT_BOOL onclick([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA7)
    ]
    VARIANT_BOOL ondblclick([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA5)
    ]
    VARIANT_BOOL onkeypress([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA6)
    ]
    void onkeydown([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA4)
    ]
    void onkeyup([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010009)
    ]
    void onmouseout([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010008)
    ]
    void onmouseover([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA2)
    ]
    void onmousemove([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA3)
    ]
    void onmousedown([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA1)
    ]
    void onmouseup([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000C)
    ]
    VARIANT_BOOL onselectstart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010011)
    ]
    void onfilterchange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000B)
    ]
    VARIANT_BOOL ondragstart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010004)
    ]
    VARIANT_BOOL onbeforeupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010005)
    ]
    void onafterupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000D)
    ]
    VARIANT_BOOL onerrorupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010006)
    ]
    VARIANT_BOOL onrowexit([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010007)
    ]
    void onrowenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000E)
    ]
    void ondatasetchanged([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000F)
    ]
    void ondataavailable([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010010)
    ]
    void ondatasetcomplete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010012)
    ]
    void onlosecapture([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010013)
    ]
    void onpropertychange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003F6)
    ]
    void onscroll([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010001)
    ]
    void onfocus([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010000)
    ]
    void onblur([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003F8)
    ]
    void onresize([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010014)
    ]
    VARIANT_BOOL ondrag([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010015)
    ]
    void ondragend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010016)
    ]
    VARIANT_BOOL ondragenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010017)
    ]
    VARIANT_BOOL ondragover([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010018)
    ]
    void ondragleave([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010019)
    ]
    VARIANT_BOOL ondrop([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001D)
    ]
    VARIANT_BOOL onbeforecut([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001A)
    ]
    VARIANT_BOOL oncut([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001E)
    ]
    VARIANT_BOOL onbeforecopy([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001B)
    ]
    VARIANT_BOOL oncopy([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001F)
    ]
    VARIANT_BOOL onbeforepaste([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001C)
    ]
    VARIANT_BOOL onpaste([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003FF)
    ]
    VARIANT_BOOL oncontextmenu([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010020)
    ]
    void onrowsdelete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010021)
    ]
    void onrowsinserted([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010022)
    ]
    void oncellchange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFD9F)
    ]
    void onreadystatechange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000406)
    ]
    void onlayoutcomplete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000407)
    ]
    void onpage([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000412)
    ]
    void onmouseenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000413)
    ]
    void onmouseleave([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000414)
    ]
    void onactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000415)
    ]
    void ondeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040A)
    ]
    VARIANT_BOOL onbeforedeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000417)
    ]
    VARIANT_BOOL onbeforeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000418)
    ]
    void onfocusin([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000419)
    ]
    void onfocusout([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040B)
    ]
    void onmove([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040C)
    ]
    VARIANT_BOOL oncontrolselect([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040E)
    ]
    VARIANT_BOOL onmovestart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040F)
    ]
    void onmoveend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000410)
    ]
    VARIANT_BOOL onresizestart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000411)
    ]
    void onresizeend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000409)
    ]
    VARIANT_BOOL onmousewheel([in] IHTMLEventObj * pEvtObj  );
  };

  [
    uuid(3050F537-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLTextElement
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
  };

  [
    uuid(3050F624-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface HTMLTextContainerEvents2
  {
    properties:
    methods:
    [
    id(0x8001000A)
    ]
    VARIANT_BOOL onhelp([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA8)
    ]
    VARIANT_BOOL onclick([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA7)
    ]
    VARIANT_BOOL ondblclick([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA5)
    ]
    VARIANT_BOOL onkeypress([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA6)
    ]
    void onkeydown([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA4)
    ]
    void onkeyup([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010009)
    ]
    void onmouseout([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010008)
    ]
    void onmouseover([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA2)
    ]
    void onmousemove([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA3)
    ]
    void onmousedown([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA1)
    ]
    void onmouseup([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000C)
    ]
    VARIANT_BOOL onselectstart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010011)
    ]
    void onfilterchange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000B)
    ]
    VARIANT_BOOL ondragstart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010004)
    ]
    VARIANT_BOOL onbeforeupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010005)
    ]
    void onafterupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000D)
    ]
    VARIANT_BOOL onerrorupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010006)
    ]
    VARIANT_BOOL onrowexit([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010007)
    ]
    void onrowenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000E)
    ]
    void ondatasetchanged([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000F)
    ]
    void ondataavailable([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010010)
    ]
    void ondatasetcomplete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010012)
    ]
    void onlosecapture([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010013)
    ]
    void onpropertychange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003F6)
    ]
    void onscroll([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010001)
    ]
    void onfocus([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010000)
    ]
    void onblur([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003F8)
    ]
    void onresize([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010014)
    ]
    VARIANT_BOOL ondrag([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010015)
    ]
    void ondragend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010016)
    ]
    VARIANT_BOOL ondragenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010017)
    ]
    VARIANT_BOOL ondragover([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010018)
    ]
    void ondragleave([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010019)
    ]
    VARIANT_BOOL ondrop([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001D)
    ]
    VARIANT_BOOL onbeforecut([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001A)
    ]
    VARIANT_BOOL oncut([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001E)
    ]
    VARIANT_BOOL onbeforecopy([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001B)
    ]
    VARIANT_BOOL oncopy([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001F)
    ]
    VARIANT_BOOL onbeforepaste([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001C)
    ]
    VARIANT_BOOL onpaste([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003FF)
    ]
    VARIANT_BOOL oncontextmenu([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010020)
    ]
    void onrowsdelete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010021)
    ]
    void onrowsinserted([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010022)
    ]
    void oncellchange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFD9F)
    ]
    void onreadystatechange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000406)
    ]
    void onlayoutcomplete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000407)
    ]
    void onpage([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000412)
    ]
    void onmouseenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000413)
    ]
    void onmouseleave([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000414)
    ]
    void onactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000415)
    ]
    void ondeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040A)
    ]
    VARIANT_BOOL onbeforedeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000417)
    ]
    VARIANT_BOOL onbeforeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000418)
    ]
    void onfocusin([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000419)
    ]
    void onfocusout([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040B)
    ]
    void onmove([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040C)
    ]
    VARIANT_BOOL oncontrolselect([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040E)
    ]
    VARIANT_BOOL onmovestart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040F)
    ]
    void onmoveend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000410)
    ]
    VARIANT_BOOL onresizestart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000411)
    ]
    void onresizeend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000409)
    ]
    VARIANT_BOOL onmousewheel([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003E9)
    ]
    void onchange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003EE)
    ]
    void onselect([in] IHTMLEventObj * pEvtObj  );
  };

  [
    uuid(3050F29C-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLControlRange: IDispatch
  {
    [
    id(0x000003EA)
    ]
    HRESULT _stdcall select( void );
    [
    id(0x000003EB)
    ]
    HRESULT _stdcall add([in] IHTMLControlElement * item  );
    [
    id(0x000003EC)
    ]
    HRESULT _stdcall remove([in] long index );
    [
    id(0x00000000)
    ]
    HRESULT _stdcall item([in] long index, [out, retval] IHTMLElement ** pdisp  );
    [
    id(0x000003EE)
    ]
    HRESULT _stdcall scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x000003EF)
    ]
    HRESULT _stdcall queryCommandSupported([in] BSTR cmdID, [out, retval] VARIANT_BOOL * pfRet );
    [
    id(0x000003F0)
    ]
    HRESULT _stdcall queryCommandEnabled([in] BSTR cmdID, [out, retval] VARIANT_BOOL * pfRet );
    [
    id(0x000003F1)
    ]
    HRESULT _stdcall queryCommandState([in] BSTR cmdID, [out, retval] VARIANT_BOOL * pfRet );
    [
    id(0x000003F2)
    ]
    HRESULT _stdcall queryCommandIndeterm([in] BSTR cmdID, [out, retval] VARIANT_BOOL * pfRet );
    [
    id(0x000003F3)
    ]
    HRESULT _stdcall queryCommandText([in] BSTR cmdID, [out, retval] BSTR * pcmdText );
    [
    id(0x000003F4)
    ]
    HRESULT _stdcall queryCommandValue([in] BSTR cmdID, [out, retval] VARIANT * pcmdValue );
    [
    id(0x000003F5)
    ]
    HRESULT _stdcall execCommand([in] BSTR cmdID, [in, optional, defaultvalue(False)] VARIANT_BOOL showUI, [in, optional] VARIANT value, [out, retval] VARIANT_BOOL * pfRet );
    [
    id(0x000003F6)
    ]
    HRESULT _stdcall execCommandShowHelp([in] BSTR cmdID, [out, retval] VARIANT_BOOL * pfRet );
    [
    id(0x000003F7)
    ]
    HRESULT _stdcall commonParentElement([out, retval] IHTMLElement ** parent  );
    [
    propget, 
    id(0x000003ED)
    ]
    HRESULT _stdcall length([out, retval] long * p );
  };

  [
    uuid(3050F65E-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLControlRange2: IDispatch
  {
    [
    id(0x000003F8)
    ]
    HRESULT _stdcall addElement([in] IHTMLElement * item  );
  };

  [
    uuid(3050F616-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface HTMLImgEvents2
  {
    properties:
    methods:
    [
    id(0x8001000A)
    ]
    VARIANT_BOOL onhelp([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA8)
    ]
    VARIANT_BOOL onclick([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA7)
    ]
    VARIANT_BOOL ondblclick([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA5)
    ]
    VARIANT_BOOL onkeypress([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA6)
    ]
    void onkeydown([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA4)
    ]
    void onkeyup([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010009)
    ]
    void onmouseout([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010008)
    ]
    void onmouseover([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA2)
    ]
    void onmousemove([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA3)
    ]
    void onmousedown([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA1)
    ]
    void onmouseup([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000C)
    ]
    VARIANT_BOOL onselectstart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010011)
    ]
    void onfilterchange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000B)
    ]
    VARIANT_BOOL ondragstart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010004)
    ]
    VARIANT_BOOL onbeforeupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010005)
    ]
    void onafterupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000D)
    ]
    VARIANT_BOOL onerrorupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010006)
    ]
    VARIANT_BOOL onrowexit([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010007)
    ]
    void onrowenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000E)
    ]
    void ondatasetchanged([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000F)
    ]
    void ondataavailable([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010010)
    ]
    void ondatasetcomplete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010012)
    ]
    void onlosecapture([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010013)
    ]
    void onpropertychange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003F6)
    ]
    void onscroll([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010001)
    ]
    void onfocus([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010000)
    ]
    void onblur([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003F8)
    ]
    void onresize([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010014)
    ]
    VARIANT_BOOL ondrag([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010015)
    ]
    void ondragend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010016)
    ]
    VARIANT_BOOL ondragenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010017)
    ]
    VARIANT_BOOL ondragover([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010018)
    ]
    void ondragleave([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010019)
    ]
    VARIANT_BOOL ondrop([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001D)
    ]
    VARIANT_BOOL onbeforecut([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001A)
    ]
    VARIANT_BOOL oncut([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001E)
    ]
    VARIANT_BOOL onbeforecopy([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001B)
    ]
    VARIANT_BOOL oncopy([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001F)
    ]
    VARIANT_BOOL onbeforepaste([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001C)
    ]
    VARIANT_BOOL onpaste([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003FF)
    ]
    VARIANT_BOOL oncontextmenu([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010020)
    ]
    void onrowsdelete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010021)
    ]
    void onrowsinserted([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010022)
    ]
    void oncellchange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFD9F)
    ]
    void onreadystatechange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000406)
    ]
    void onlayoutcomplete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000407)
    ]
    void onpage([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000412)
    ]
    void onmouseenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000413)
    ]
    void onmouseleave([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000414)
    ]
    void onactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000415)
    ]
    void ondeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040A)
    ]
    VARIANT_BOOL onbeforedeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000417)
    ]
    VARIANT_BOOL onbeforeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000418)
    ]
    void onfocusin([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000419)
    ]
    void onfocusout([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040B)
    ]
    void onmove([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040C)
    ]
    VARIANT_BOOL oncontrolselect([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040E)
    ]
    VARIANT_BOOL onmovestart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040F)
    ]
    void onmoveend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000410)
    ]
    VARIANT_BOOL onresizestart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000411)
    ]
    void onresizeend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000409)
    ]
    VARIANT_BOOL onmousewheel([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003EB)
    ]
    void onload([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003EA)
    ]
    void onerror([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003E8)
    ]
    void onabort([in] IHTMLEventObj * pEvtObj  );
  };

  [
    uuid(3050F38E-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLImageElementFactory: IDispatch
  {
    [
    id(0x00000000)
    ]
    HRESULT _stdcall create([in, optional] VARIANT width, [in, optional] VARIANT height, [out, retval] IHTMLImgElement ** __MIDL_0011  );
  };

  [
    uuid(3050F51C-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLImg
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x800103FD)
    ]
    void dataFld(BSTR Param1 );
    [
    propget, 
    id(0x800103FD)
    ]
    BSTR dataFld( void );
    [
    propput, 
    id(0x800103FE)
    ]
    void dataSrc(BSTR Param1 );
    [
    propget, 
    id(0x800103FE)
    ]
    BSTR dataSrc( void );
    [
    propput, 
    id(0x800103FF)
    ]
    void dataFormatAs(BSTR Param1 );
    [
    propget, 
    id(0x800103FF)
    ]
    BSTR dataFormatAs( void );
    [
    propput, 
    id(0x000007D2), 
    bindable, 
    displaybind
    ]
    void isMap(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x000007D2), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL isMap( void );
    [
    propput, 
    id(0x000007D8), 
    bindable, 
    displaybind
    ]
    void useMap(BSTR Param1 );
    [
    propget, 
    id(0x000007D8), 
    bindable, 
    displaybind
    ]
    BSTR useMap( void );
    [
    propget, 
    id(0x000007DA)
    ]
    BSTR mimeType( void );
    [
    propget, 
    id(0x000007DB)
    ]
    BSTR fileSize( void );
    [
    propget, 
    id(0x000007DC)
    ]
    BSTR fileCreatedDate( void );
    [
    propget, 
    id(0x000007DD)
    ]
    BSTR fileModifiedDate( void );
    [
    propget, 
    id(0x000007DE)
    ]
    BSTR fileUpdatedDate( void );
    [
    propget, 
    id(0x000007DF)
    ]
    BSTR protocol( void );
    [
    propget, 
    id(0x000007E0)
    ]
    BSTR href( void );
    [
    propget, 
    id(0x000007E1)
    ]
    BSTR nameProp( void );
    [
    propput, 
    id(0x000003EC), 
    bindable, 
    displaybind
    ]
    void border(VARIANT Param1 );
    [
    propget, 
    id(0x000003EC), 
    bindable, 
    displaybind
    ]
    VARIANT border( void );
    [
    propput, 
    id(0x000003ED), 
    bindable, 
    displaybind
    ]
    void vspace(long Param1 );
    [
    propget, 
    id(0x000003ED), 
    bindable, 
    displaybind
    ]
    long vspace( void );
    [
    propput, 
    id(0x000003EE), 
    bindable, 
    displaybind
    ]
    void hspace(long Param1 );
    [
    propget, 
    id(0x000003EE), 
    bindable, 
    displaybind
    ]
    long hspace( void );
    [
    propput, 
    id(0x000003EA), 
    bindable, 
    displaybind
    ]
    void alt(BSTR Param1 );
    [
    propget, 
    id(0x000003EA), 
    bindable, 
    displaybind
    ]
    BSTR alt( void );
    [
    propput, 
    id(0x000003EB), 
    bindable, 
    displaybind
    ]
    void src(BSTR Param1 );
    [
    propget, 
    id(0x000003EB), 
    bindable, 
    displaybind
    ]
    BSTR src( void );
    [
    propput, 
    id(0x000003EF), 
    bindable, 
    displaybind
    ]
    void lowsrc(BSTR Param1 );
    [
    propget, 
    id(0x000003EF), 
    bindable, 
    displaybind
    ]
    BSTR lowsrc( void );
    [
    propput, 
    id(0x000003F0), 
    bindable, 
    displaybind
    ]
    void vrml(BSTR Param1 );
    [
    propget, 
    id(0x000003F0), 
    bindable, 
    displaybind
    ]
    BSTR vrml( void );
    [
    propput, 
    id(0x000003F1), 
    bindable, 
    displaybind
    ]
    void dynsrc(BSTR Param1 );
    [
    propget, 
    id(0x000003F1), 
    bindable, 
    displaybind
    ]
    BSTR dynsrc( void );
    [
    propget, 
    id(0x000003F2)
    ]
    VARIANT_BOOL complete( void );
    [
    propput, 
    id(0x000003F3), 
    bindable, 
    displaybind
    ]
    void loop(VARIANT Param1 );
    [
    propget, 
    id(0x000003F3), 
    bindable, 
    displaybind
    ]
    VARIANT loop( void );
    [
    propput, 
    id(0x80010049), 
    bindable, 
    displaybind
    ]
    void align(BSTR Param1 );
    [
    propget, 
    id(0x80010049), 
    bindable, 
    displaybind
    ]
    BSTR align( void );
    [
    propput, 
    id(0x80011790), 
    bindable, 
    displaybind
    ]
    void onload(VARIANT Param1 );
    [
    propget, 
    id(0x80011790), 
    bindable, 
    displaybind
    ]
    VARIANT onload( void );
    [
    propput, 
    id(0x8001178D), 
    bindable, 
    displaybind
    ]
    void onerror(VARIANT Param1 );
    [
    propget, 
    id(0x8001178D), 
    bindable, 
    displaybind
    ]
    VARIANT onerror( void );
    [
    propput, 
    id(0x8001178C), 
    bindable, 
    displaybind
    ]
    void onabort(VARIANT Param1 );
    [
    propget, 
    id(0x8001178C), 
    bindable, 
    displaybind
    ]
    VARIANT onabort( void );
    [
    propput, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    void name(BSTR Param1 );
    [
    propget, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    BSTR name( void );
    [
    propput, 
    id(0x80010005)
    ]
    void width(long Param1 );
    [
    propget, 
    id(0x80010005)
    ]
    long width( void );
    [
    propput, 
    id(0x80010006)
    ]
    void height(long Param1 );
    [
    propget, 
    id(0x80010006)
    ]
    long height( void );
    [
    propput, 
    id(0x000003F5), 
    bindable, 
    displaybind
    ]
    void Start(BSTR Param1 );
    [
    propget, 
    id(0x000003F5), 
    bindable, 
    displaybind
    ]
    BSTR Start( void );
    [
    propput, 
    id(0x000007E3), 
    bindable, 
    displaybind
    ]
    void longDesc(BSTR Param1 );
    [
    propget, 
    id(0x000007E3), 
    bindable, 
    displaybind
    ]
    BSTR longDesc( void );
  };

  [
    uuid(3050F1D8-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLBodyElement: IDispatch
  {
    [
    propput, 
    id(0x80011389), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall background([in] BSTR p );
    [
    propget, 
    id(0x80011389), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall background([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113B5), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall bgProperties([in] BSTR p );
    [
    propget, 
    id(0x800113B5), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall bgProperties([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113B0), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall leftMargin([in] VARIANT p );
    [
    propget, 
    id(0x800113B0), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall leftMargin([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113AD), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall topMargin([in] VARIANT p );
    [
    propget, 
    id(0x800113AD), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall topMargin([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113AE), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall rightMargin([in] VARIANT p );
    [
    propget, 
    id(0x800113AE), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall rightMargin([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113AF), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall bottomMargin([in] VARIANT p );
    [
    propget, 
    id(0x800113AF), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall bottomMargin([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001138D), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall noWrap([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x8001138D), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall noWrap([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0xFFFFFE0B), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall bgColor([in] VARIANT p );
    [
    propget, 
    id(0xFFFFFE0B), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall bgColor([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001138A), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall text([in] VARIANT p );
    [
    propget, 
    id(0x8001138A), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall text([out, retval] VARIANT * p );
    [
    propput, 
    id(0x000007DA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall link([in] VARIANT p );
    [
    propget, 
    id(0x000007DA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall link([out, retval] VARIANT * p );
    [
    propput, 
    id(0x000007DC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall vLink([in] VARIANT p );
    [
    propget, 
    id(0x000007DC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall vLink([out, retval] VARIANT * p );
    [
    propput, 
    id(0x000007DB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall aLink([in] VARIANT p );
    [
    propget, 
    id(0x000007DB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall aLink([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011790), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onload([in] VARIANT p );
    [
    propget, 
    id(0x80011790), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onload([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011791), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onunload([in] VARIANT p );
    [
    propget, 
    id(0x80011791), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onunload([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113D7), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scroll([in] BSTR p );
    [
    propget, 
    id(0x800113D7), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall scroll([out, retval] BSTR * p );
    [
    propput, 
    id(0x8001177A), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onselect([in] VARIANT p );
    [
    propget, 
    id(0x8001177A), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onselect([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011797), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onbeforeunload([in] VARIANT p );
    [
    propget, 
    id(0x80011797), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onbeforeunload([out, retval] VARIANT * p );
    [
    id(0x000007DD)
    ]
    HRESULT _stdcall createTextRange([out, retval] IHTMLTxtRange ** range  );
  };

  [
    uuid(3050F507-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLBody
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x80011389), 
    bindable, 
    displaybind
    ]
    void background(BSTR Param1 );
    [
    propget, 
    id(0x80011389), 
    bindable, 
    displaybind
    ]
    BSTR background( void );
    [
    propput, 
    id(0x800113B5), 
    bindable, 
    displaybind
    ]
    void bgProperties(BSTR Param1 );
    [
    propget, 
    id(0x800113B5), 
    bindable, 
    displaybind
    ]
    BSTR bgProperties( void );
    [
    propput, 
    id(0x800113B0), 
    bindable, 
    displaybind
    ]
    void leftMargin(VARIANT Param1 );
    [
    propget, 
    id(0x800113B0), 
    bindable, 
    displaybind
    ]
    VARIANT leftMargin( void );
    [
    propput, 
    id(0x800113AD), 
    bindable, 
    displaybind
    ]
    void topMargin(VARIANT Param1 );
    [
    propget, 
    id(0x800113AD), 
    bindable, 
    displaybind
    ]
    VARIANT topMargin( void );
    [
    propput, 
    id(0x800113AE), 
    bindable, 
    displaybind
    ]
    void rightMargin(VARIANT Param1 );
    [
    propget, 
    id(0x800113AE), 
    bindable, 
    displaybind
    ]
    VARIANT rightMargin( void );
    [
    propput, 
    id(0x800113AF), 
    bindable, 
    displaybind
    ]
    void bottomMargin(VARIANT Param1 );
    [
    propget, 
    id(0x800113AF), 
    bindable, 
    displaybind
    ]
    VARIANT bottomMargin( void );
    [
    propput, 
    id(0x8001138D), 
    bindable, 
    displaybind
    ]
    void noWrap(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001138D), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL noWrap( void );
    [
    propput, 
    id(0xFFFFFE0B), 
    bindable, 
    displaybind
    ]
    void bgColor(VARIANT Param1 );
    [
    propget, 
    id(0xFFFFFE0B), 
    bindable, 
    displaybind
    ]
    VARIANT bgColor( void );
    [
    propput, 
    id(0x8001138A), 
    bindable, 
    displaybind
    ]
    void text(VARIANT Param1 );
    [
    propget, 
    id(0x8001138A), 
    bindable, 
    displaybind
    ]
    VARIANT text( void );
    [
    propput, 
    id(0x000007DA), 
    bindable, 
    displaybind
    ]
    void link(VARIANT Param1 );
    [
    propget, 
    id(0x000007DA), 
    bindable, 
    displaybind
    ]
    VARIANT link( void );
    [
    propput, 
    id(0x000007DC), 
    bindable, 
    displaybind
    ]
    void vLink(VARIANT Param1 );
    [
    propget, 
    id(0x000007DC), 
    bindable, 
    displaybind
    ]
    VARIANT vLink( void );
    [
    propput, 
    id(0x000007DB), 
    bindable, 
    displaybind
    ]
    void aLink(VARIANT Param1 );
    [
    propget, 
    id(0x000007DB), 
    bindable, 
    displaybind
    ]
    VARIANT aLink( void );
    [
    propput, 
    id(0x80011790), 
    bindable, 
    displaybind
    ]
    void onload(VARIANT Param1 );
    [
    propget, 
    id(0x80011790), 
    bindable, 
    displaybind
    ]
    VARIANT onload( void );
    [
    propput, 
    id(0x80011791), 
    bindable, 
    displaybind
    ]
    void onunload(VARIANT Param1 );
    [
    propget, 
    id(0x80011791), 
    bindable, 
    displaybind
    ]
    VARIANT onunload( void );
    [
    propput, 
    id(0x800113D7), 
    bindable, 
    displaybind
    ]
    void scroll(BSTR Param1 );
    [
    propget, 
    id(0x800113D7), 
    bindable, 
    displaybind
    ]
    BSTR scroll( void );
    [
    propput, 
    id(0x8001177A), 
    bindable, 
    displaybind
    ]
    void onselect(VARIANT Param1 );
    [
    propget, 
    id(0x8001177A), 
    bindable, 
    displaybind
    ]
    VARIANT onselect( void );
    [
    propput, 
    id(0x80011797), 
    bindable, 
    displaybind
    ]
    void onbeforeunload(VARIANT Param1 );
    [
    propget, 
    id(0x80011797), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeunload( void );
    [
    id(0x000007DD)
    ]
    IHTMLTxtRange * createTextRange( void );
    [
    propput, 
    id(0x800117B2), 
    bindable, 
    displaybind
    ]
    void onbeforeprint(VARIANT Param1 );
    [
    propget, 
    id(0x800117B2), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeprint( void );
    [
    propput, 
    id(0x800117B3), 
    bindable, 
    displaybind
    ]
    void onafterprint(VARIANT Param1 );
    [
    propget, 
    id(0x800117B3), 
    bindable, 
    displaybind
    ]
    VARIANT onafterprint( void );
  };

  [
    uuid(3050F512-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLFontElement
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x8001138A), 
    bindable, 
    displaybind
    ]
    void color(VARIANT Param1 );
    [
    propget, 
    id(0x8001138A), 
    bindable, 
    displaybind
    ]
    VARIANT color( void );
    [
    propput, 
    id(0x8001139A), 
    bindable, 
    displaybind
    ]
    void face(BSTR Param1 );
    [
    propget, 
    id(0x8001139A), 
    bindable, 
    displaybind
    ]
    BSTR face( void );
    [
    propput, 
    id(0x8001139B), 
    bindable, 
    displaybind
    ]
    void size(VARIANT Param1 );
    [
    propget, 
    id(0x8001139B), 
    bindable, 
    displaybind
    ]
    VARIANT size( void );
  };

  [
    uuid(3050F610-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface HTMLAnchorEvents2
  {
    properties:
    methods:
    [
    id(0x8001000A)
    ]
    VARIANT_BOOL onhelp([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA8)
    ]
    VARIANT_BOOL onclick([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA7)
    ]
    VARIANT_BOOL ondblclick([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA5)
    ]
    VARIANT_BOOL onkeypress([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA6)
    ]
    void onkeydown([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA4)
    ]
    void onkeyup([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010009)
    ]
    void onmouseout([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010008)
    ]
    void onmouseover([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA2)
    ]
    void onmousemove([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA3)
    ]
    void onmousedown([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA1)
    ]
    void onmouseup([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000C)
    ]
    VARIANT_BOOL onselectstart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010011)
    ]
    void onfilterchange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000B)
    ]
    VARIANT_BOOL ondragstart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010004)
    ]
    VARIANT_BOOL onbeforeupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010005)
    ]
    void onafterupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000D)
    ]
    VARIANT_BOOL onerrorupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010006)
    ]
    VARIANT_BOOL onrowexit([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010007)
    ]
    void onrowenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000E)
    ]
    void ondatasetchanged([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000F)
    ]
    void ondataavailable([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010010)
    ]
    void ondatasetcomplete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010012)
    ]
    void onlosecapture([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010013)
    ]
    void onpropertychange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003F6)
    ]
    void onscroll([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010001)
    ]
    void onfocus([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010000)
    ]
    void onblur([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003F8)
    ]
    void onresize([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010014)
    ]
    VARIANT_BOOL ondrag([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010015)
    ]
    void ondragend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010016)
    ]
    VARIANT_BOOL ondragenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010017)
    ]
    VARIANT_BOOL ondragover([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010018)
    ]
    void ondragleave([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010019)
    ]
    VARIANT_BOOL ondrop([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001D)
    ]
    VARIANT_BOOL onbeforecut([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001A)
    ]
    VARIANT_BOOL oncut([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001E)
    ]
    VARIANT_BOOL onbeforecopy([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001B)
    ]
    VARIANT_BOOL oncopy([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001F)
    ]
    VARIANT_BOOL onbeforepaste([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001C)
    ]
    VARIANT_BOOL onpaste([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003FF)
    ]
    VARIANT_BOOL oncontextmenu([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010020)
    ]
    void onrowsdelete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010021)
    ]
    void onrowsinserted([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010022)
    ]
    void oncellchange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFD9F)
    ]
    void onreadystatechange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000406)
    ]
    void onlayoutcomplete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000407)
    ]
    void onpage([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000412)
    ]
    void onmouseenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000413)
    ]
    void onmouseleave([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000414)
    ]
    void onactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000415)
    ]
    void ondeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040A)
    ]
    VARIANT_BOOL onbeforedeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000417)
    ]
    VARIANT_BOOL onbeforeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000418)
    ]
    void onfocusin([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000419)
    ]
    void onfocusout([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040B)
    ]
    void onmove([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040C)
    ]
    VARIANT_BOOL oncontrolselect([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040E)
    ]
    VARIANT_BOOL onmovestart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040F)
    ]
    void onmoveend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000410)
    ]
    VARIANT_BOOL onresizestart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000411)
    ]
    void onresizeend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000409)
    ]
    VARIANT_BOOL onmousewheel([in] IHTMLEventObj * pEvtObj  );
  };

  [
    uuid(3050F502-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLAnchorElement
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x800103FD)
    ]
    void dataFld(BSTR Param1 );
    [
    propget, 
    id(0x800103FD)
    ]
    BSTR dataFld( void );
    [
    propput, 
    id(0x800103FE)
    ]
    void dataSrc(BSTR Param1 );
    [
    propget, 
    id(0x800103FE)
    ]
    BSTR dataSrc( void );
    [
    propput, 
    id(0x800103FF)
    ]
    void dataFormatAs(BSTR Param1 );
    [
    propget, 
    id(0x800103FF)
    ]
    BSTR dataFormatAs( void );
    [
    propput, 
    id(0x00000000), 
    bindable, 
    displaybind
    ]
    void href(BSTR Param1 );
    [
    propget, 
    id(0x00000000), 
    bindable, 
    displaybind
    ]
    BSTR href( void );
    [
    propput, 
    id(0x000003EB), 
    bindable, 
    displaybind
    ]
    void target(BSTR Param1 );
    [
    propget, 
    id(0x000003EB), 
    bindable, 
    displaybind
    ]
    BSTR target( void );
    [
    propput, 
    id(0x000003ED), 
    bindable, 
    displaybind
    ]
    void rel(BSTR Param1 );
    [
    propget, 
    id(0x000003ED), 
    bindable, 
    displaybind
    ]
    BSTR rel( void );
    [
    propput, 
    id(0x000003EE), 
    bindable, 
    displaybind
    ]
    void rev(BSTR Param1 );
    [
    propget, 
    id(0x000003EE), 
    bindable, 
    displaybind
    ]
    BSTR rev( void );
    [
    propput, 
    id(0x000003EF), 
    bindable, 
    displaybind
    ]
    void urn(BSTR Param1 );
    [
    propget, 
    id(0x000003EF), 
    bindable, 
    displaybind
    ]
    BSTR urn( void );
    [
    propput, 
    id(0x000003F0), 
    bindable, 
    displaybind
    ]
    void Methods(BSTR Param1 );
    [
    propget, 
    id(0x000003F0), 
    bindable, 
    displaybind
    ]
    BSTR Methods( void );
    [
    propput, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    void name(BSTR Param1 );
    [
    propget, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    BSTR name( void );
    [
    propput, 
    id(0x000003F4)
    ]
    void host(BSTR Param1 );
    [
    propget, 
    id(0x000003F4)
    ]
    BSTR host( void );
    [
    propput, 
    id(0x000003F5)
    ]
    void hostname(BSTR Param1 );
    [
    propget, 
    id(0x000003F5)
    ]
    BSTR hostname( void );
    [
    propput, 
    id(0x000003F6)
    ]
    void pathname(BSTR Param1 );
    [
    propget, 
    id(0x000003F6)
    ]
    BSTR pathname( void );
    [
    propput, 
    id(0x000003F7)
    ]
    void port(BSTR Param1 );
    [
    propget, 
    id(0x000003F7)
    ]
    BSTR port( void );
    [
    propput, 
    id(0x000003F8)
    ]
    void protocol(BSTR Param1 );
    [
    propget, 
    id(0x000003F8)
    ]
    BSTR protocol( void );
    [
    propput, 
    id(0x000003F9)
    ]
    void search(BSTR Param1 );
    [
    propget, 
    id(0x000003F9)
    ]
    BSTR search( void );
    [
    propput, 
    id(0x000003FA)
    ]
    void hash(BSTR Param1 );
    [
    propget, 
    id(0x000003FA)
    ]
    BSTR hash( void );
    [
    propget, 
    id(0x00000407)
    ]
    BSTR protocolLong( void );
    [
    propget, 
    id(0x00000406)
    ]
    BSTR mimeType( void );
    [
    propget, 
    id(0x00000408)
    ]
    BSTR nameProp( void );
    [
    propput, 
    id(0x000003FF), 
    bindable, 
    displaybind
    ]
    void charset(BSTR Param1 );
    [
    propget, 
    id(0x000003FF), 
    bindable, 
    displaybind
    ]
    BSTR charset( void );
    [
    propput, 
    id(0x00000400), 
    bindable, 
    displaybind
    ]
    void coords(BSTR Param1 );
    [
    propget, 
    id(0x00000400), 
    bindable, 
    displaybind
    ]
    BSTR coords( void );
    [
    propput, 
    id(0x00000401), 
    bindable, 
    displaybind
    ]
    void hreflang(BSTR Param1 );
    [
    propget, 
    id(0x00000401), 
    bindable, 
    displaybind
    ]
    BSTR hreflang( void );
    [
    propput, 
    id(0x00000402), 
    bindable, 
    displaybind
    ]
    void shape(BSTR Param1 );
    [
    propget, 
    id(0x00000402), 
    bindable, 
    displaybind
    ]
    BSTR shape( void );
    [
    propput, 
    id(0x00000403), 
    bindable, 
    displaybind
    ]
    void type(BSTR Param1 );
    [
    propget, 
    id(0x00000403), 
    bindable, 
    displaybind
    ]
    BSTR type( void );
  };

  [
    uuid(3050F61C-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface HTMLLabelEvents2
  {
    properties:
    methods:
    [
    id(0x8001000A)
    ]
    VARIANT_BOOL onhelp([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA8)
    ]
    VARIANT_BOOL onclick([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA7)
    ]
    VARIANT_BOOL ondblclick([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA5)
    ]
    VARIANT_BOOL onkeypress([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA6)
    ]
    void onkeydown([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA4)
    ]
    void onkeyup([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010009)
    ]
    void onmouseout([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010008)
    ]
    void onmouseover([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA2)
    ]
    void onmousemove([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA3)
    ]
    void onmousedown([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA1)
    ]
    void onmouseup([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000C)
    ]
    VARIANT_BOOL onselectstart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010011)
    ]
    void onfilterchange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000B)
    ]
    VARIANT_BOOL ondragstart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010004)
    ]
    VARIANT_BOOL onbeforeupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010005)
    ]
    void onafterupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000D)
    ]
    VARIANT_BOOL onerrorupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010006)
    ]
    VARIANT_BOOL onrowexit([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010007)
    ]
    void onrowenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000E)
    ]
    void ondatasetchanged([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000F)
    ]
    void ondataavailable([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010010)
    ]
    void ondatasetcomplete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010012)
    ]
    void onlosecapture([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010013)
    ]
    void onpropertychange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003F6)
    ]
    void onscroll([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010001)
    ]
    void onfocus([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010000)
    ]
    void onblur([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003F8)
    ]
    void onresize([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010014)
    ]
    VARIANT_BOOL ondrag([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010015)
    ]
    void ondragend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010016)
    ]
    VARIANT_BOOL ondragenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010017)
    ]
    VARIANT_BOOL ondragover([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010018)
    ]
    void ondragleave([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010019)
    ]
    VARIANT_BOOL ondrop([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001D)
    ]
    VARIANT_BOOL onbeforecut([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001A)
    ]
    VARIANT_BOOL oncut([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001E)
    ]
    VARIANT_BOOL onbeforecopy([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001B)
    ]
    VARIANT_BOOL oncopy([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001F)
    ]
    VARIANT_BOOL onbeforepaste([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001C)
    ]
    VARIANT_BOOL onpaste([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003FF)
    ]
    VARIANT_BOOL oncontextmenu([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010020)
    ]
    void onrowsdelete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010021)
    ]
    void onrowsinserted([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010022)
    ]
    void oncellchange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFD9F)
    ]
    void onreadystatechange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000406)
    ]
    void onlayoutcomplete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000407)
    ]
    void onpage([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000412)
    ]
    void onmouseenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000413)
    ]
    void onmouseleave([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000414)
    ]
    void onactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000415)
    ]
    void ondeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040A)
    ]
    VARIANT_BOOL onbeforedeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000417)
    ]
    VARIANT_BOOL onbeforeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000418)
    ]
    void onfocusin([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000419)
    ]
    void onfocusout([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040B)
    ]
    void onmove([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040C)
    ]
    VARIANT_BOOL oncontrolselect([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040E)
    ]
    VARIANT_BOOL onmovestart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040F)
    ]
    void onmoveend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000410)
    ]
    VARIANT_BOOL onresizestart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000411)
    ]
    void onresizeend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000409)
    ]
    VARIANT_BOOL onmousewheel([in] IHTMLEventObj * pEvtObj  );
  };

  [
    uuid(3050F832-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLLabelElement2: IDispatch
  {
    [
    propget, 
    id(0x000003EA)
    ]
    HRESULT _stdcall form([out, retval] IHTMLFormElement ** p  );
  };

  [
    uuid(3050F522-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLLabelElement
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x800103FD)
    ]
    void dataFld(BSTR Param1 );
    [
    propget, 
    id(0x800103FD)
    ]
    BSTR dataFld( void );
    [
    propput, 
    id(0x800103FE)
    ]
    void dataSrc(BSTR Param1 );
    [
    propget, 
    id(0x800103FE)
    ]
    BSTR dataSrc( void );
    [
    propput, 
    id(0x800103FF)
    ]
    void dataFormatAs(BSTR Param1 );
    [
    propget, 
    id(0x800103FF)
    ]
    BSTR dataFormatAs( void );
    [
    propput, 
    id(0x000003E8), 
    bindable, 
    displaybind
    ]
    void htmlFor(BSTR Param1 );
    [
    propget, 
    id(0x000003E8), 
    bindable, 
    displaybind
    ]
    BSTR htmlFor( void );
    [
    propget, 
    id(0x000003EA)
    ]
    IHTMLFormElement * form( void );
  };

  [
    uuid(3050F525-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLListElement
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x000003E9), 
    bindable
    ]
    void compact(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x000003E9), 
    bindable
    ]
    VARIANT_BOOL compact( void );
  };

  [
    uuid(3050F538-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLUListElement
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x000003E9), 
    bindable
    ]
    void compact(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x000003E9), 
    bindable
    ]
    VARIANT_BOOL compact( void );
    [
    propput, 
    id(0x80011399), 
    bindable, 
    displaybind
    ]
    void type(BSTR Param1 );
    [
    propget, 
    id(0x80011399), 
    bindable, 
    displaybind
    ]
    BSTR type( void );
  };

  [
    uuid(3050F52A-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLOListElement
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x000003E9), 
    bindable
    ]
    void compact(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x000003E9), 
    bindable
    ]
    VARIANT_BOOL compact( void );
    [
    propput, 
    id(0x000003EB), 
    bindable, 
    displaybind
    ]
    void Start(long Param1 );
    [
    propget, 
    id(0x000003EB), 
    bindable, 
    displaybind
    ]
    long Start( void );
    [
    propput, 
    id(0x80011399), 
    bindable, 
    displaybind
    ]
    void type(BSTR Param1 );
    [
    propget, 
    id(0x80011399), 
    bindable, 
    displaybind
    ]
    BSTR type( void );
  };

  [
    uuid(3050F523-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLLIElement
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x80011399), 
    bindable, 
    displaybind
    ]
    void type(BSTR Param1 );
    [
    propget, 
    id(0x80011399), 
    bindable, 
    displaybind
    ]
    BSTR type( void );
    [
    propput, 
    id(0x000003E9), 
    bindable, 
    displaybind
    ]
    void value(long Param1 );
    [
    propget, 
    id(0x000003E9), 
    bindable, 
    displaybind
    ]
    long value( void );
  };

  [
    uuid(3050F506-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLBlockElement
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x80011398), 
    bindable, 
    displaybind
    ]
    void clear(BSTR Param1 );
    [
    propget, 
    id(0x80011398), 
    bindable, 
    displaybind
    ]
    BSTR clear( void );
    [
    propput, 
    id(0x000003E9), 
    bindable, 
    displaybind
    ]
    void cite(BSTR Param1 );
    [
    propget, 
    id(0x000003E9), 
    bindable, 
    displaybind
    ]
    BSTR cite( void );
    [
    propput, 
    id(0x000003EA), 
    bindable, 
    displaybind
    ]
    void width(BSTR Param1 );
    [
    propget, 
    id(0x000003EA), 
    bindable, 
    displaybind
    ]
    BSTR width( void );
  };

  [
    uuid(3050F50C-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLDivElement
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x800103FD)
    ]
    void dataFld(BSTR Param1 );
    [
    propget, 
    id(0x800103FD)
    ]
    BSTR dataFld( void );
    [
    propput, 
    id(0x800103FE)
    ]
    void dataSrc(BSTR Param1 );
    [
    propget, 
    id(0x800103FE)
    ]
    BSTR dataSrc( void );
    [
    propput, 
    id(0x800103FF)
    ]
    void dataFormatAs(BSTR Param1 );
    [
    propget, 
    id(0x800103FF)
    ]
    BSTR dataFormatAs( void );
    [
    propput, 
    id(0x80010048), 
    bindable, 
    displaybind
    ]
    void align(BSTR Param1 );
    [
    propget, 
    id(0x80010048), 
    bindable, 
    displaybind
    ]
    BSTR align( void );
    [
    propput, 
    id(0x8001138D), 
    bindable, 
    displaybind
    ]
    void noWrap(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001138D), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL noWrap( void );
  };

  [
    uuid(3050F50B-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLDDElement
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x8001138D), 
    bindable, 
    displaybind
    ]
    void noWrap(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001138D), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL noWrap( void );
  };

  [
    uuid(3050F50D-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLDTElement
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x8001138D), 
    bindable, 
    displaybind
    ]
    void noWrap(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001138D), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL noWrap( void );
  };

  [
    uuid(3050F53A-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLBRElement
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x80011398), 
    bindable, 
    displaybind
    ]
    void clear(BSTR Param1 );
    [
    propget, 
    id(0x80011398), 
    bindable, 
    displaybind
    ]
    BSTR clear( void );
  };

  [
    uuid(3050F53B-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLDListElement
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x000003E9), 
    bindable
    ]
    void compact(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x000003E9), 
    bindable
    ]
    VARIANT_BOOL compact( void );
  };

  [
    uuid(3050F53D-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLHRElement
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x80010048), 
    bindable, 
    displaybind
    ]
    void align(BSTR Param1 );
    [
    propget, 
    id(0x80010048), 
    bindable, 
    displaybind
    ]
    BSTR align( void );
    [
    propput, 
    id(0x8001138A), 
    bindable, 
    displaybind
    ]
    void color(VARIANT Param1 );
    [
    propget, 
    id(0x8001138A), 
    bindable, 
    displaybind
    ]
    VARIANT color( void );
    [
    propput, 
    id(0x000003E9), 
    bindable
    ]
    void noShade(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x000003E9), 
    bindable
    ]
    VARIANT_BOOL noShade( void );
    [
    propput, 
    id(0x80010005)
    ]
    void width(VARIANT Param1 );
    [
    propget, 
    id(0x80010005)
    ]
    VARIANT width( void );
    [
    propput, 
    id(0x80010006)
    ]
    void size(VARIANT Param1 );
    [
    propget, 
    id(0x80010006)
    ]
    VARIANT size( void );
  };

  [
    uuid(3050F52C-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLParaElement
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x80011398), 
    bindable, 
    displaybind
    ]
    void clear(BSTR Param1 );
    [
    propget, 
    id(0x80011398), 
    bindable, 
    displaybind
    ]
    BSTR clear( void );
    [
    propput, 
    id(0x80010048), 
    bindable
    ]
    void align(BSTR Param1 );
    [
    propget, 
    id(0x80010048), 
    bindable
    ]
    BSTR align( void );
  };

  [
    uuid(3050F515-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLHeaderElement
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x80011398), 
    bindable, 
    displaybind
    ]
    void clear(BSTR Param1 );
    [
    propget, 
    id(0x80011398), 
    bindable, 
    displaybind
    ]
    BSTR clear( void );
    [
    propput, 
    id(0x80010048), 
    bindable
    ]
    void align(BSTR Param1 );
    [
    propget, 
    id(0x80010048), 
    bindable
    ]
    BSTR align( void );
  };

  [
    uuid(3050F622-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface HTMLSelectElementEvents2
  {
    properties:
    methods:
    [
    id(0x8001000A)
    ]
    VARIANT_BOOL onhelp([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA8)
    ]
    VARIANT_BOOL onclick([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA7)
    ]
    VARIANT_BOOL ondblclick([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA5)
    ]
    VARIANT_BOOL onkeypress([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA6)
    ]
    void onkeydown([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA4)
    ]
    void onkeyup([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010009)
    ]
    void onmouseout([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010008)
    ]
    void onmouseover([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA2)
    ]
    void onmousemove([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA3)
    ]
    void onmousedown([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA1)
    ]
    void onmouseup([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000C)
    ]
    VARIANT_BOOL onselectstart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010011)
    ]
    void onfilterchange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000B)
    ]
    VARIANT_BOOL ondragstart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010004)
    ]
    VARIANT_BOOL onbeforeupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010005)
    ]
    void onafterupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000D)
    ]
    VARIANT_BOOL onerrorupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010006)
    ]
    VARIANT_BOOL onrowexit([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010007)
    ]
    void onrowenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000E)
    ]
    void ondatasetchanged([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000F)
    ]
    void ondataavailable([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010010)
    ]
    void ondatasetcomplete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010012)
    ]
    void onlosecapture([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010013)
    ]
    void onpropertychange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003F6)
    ]
    void onscroll([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010001)
    ]
    void onfocus([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010000)
    ]
    void onblur([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003F8)
    ]
    void onresize([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010014)
    ]
    VARIANT_BOOL ondrag([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010015)
    ]
    void ondragend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010016)
    ]
    VARIANT_BOOL ondragenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010017)
    ]
    VARIANT_BOOL ondragover([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010018)
    ]
    void ondragleave([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010019)
    ]
    VARIANT_BOOL ondrop([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001D)
    ]
    VARIANT_BOOL onbeforecut([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001A)
    ]
    VARIANT_BOOL oncut([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001E)
    ]
    VARIANT_BOOL onbeforecopy([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001B)
    ]
    VARIANT_BOOL oncopy([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001F)
    ]
    VARIANT_BOOL onbeforepaste([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001C)
    ]
    VARIANT_BOOL onpaste([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003FF)
    ]
    VARIANT_BOOL oncontextmenu([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010020)
    ]
    void onrowsdelete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010021)
    ]
    void onrowsinserted([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010022)
    ]
    void oncellchange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFD9F)
    ]
    void onreadystatechange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000406)
    ]
    void onlayoutcomplete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000407)
    ]
    void onpage([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000412)
    ]
    void onmouseenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000413)
    ]
    void onmouseleave([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000414)
    ]
    void onactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000415)
    ]
    void ondeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040A)
    ]
    VARIANT_BOOL onbeforedeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000417)
    ]
    VARIANT_BOOL onbeforeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000418)
    ]
    void onfocusin([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000419)
    ]
    void onfocusout([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040B)
    ]
    void onmove([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040C)
    ]
    VARIANT_BOOL oncontrolselect([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040E)
    ]
    VARIANT_BOOL onmovestart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040F)
    ]
    void onmoveend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000410)
    ]
    VARIANT_BOOL onresizestart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000411)
    ]
    void onresizeend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000409)
    ]
    VARIANT_BOOL onmousewheel([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003E9)
    ]
    void onchange([in] IHTMLEventObj * pEvtObj  );
  };

  [
    uuid(3050F244-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLSelectElement: IDispatch
  {
    [
    propput, 
    id(0x000003EA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall size([in] long p );
    [
    propget, 
    id(0x000003EA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall size([out, retval] long * p );
    [
    propput, 
    id(0x000003EB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall multiple([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x000003EB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall multiple([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall name([in] BSTR p );
    [
    propget, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall name([out, retval] BSTR * p );
    [
    propget, 
    id(0x000003ED)
    ]
    HRESULT _stdcall options([out, retval]  IDispatch ** p );
    [
    propput, 
    id(0x8001178E), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onchange([in] VARIANT p );
    [
    propget, 
    id(0x8001178E), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onchange([out, retval] VARIANT * p );
    [
    propput, 
    id(0x000003F2)
    ]
    HRESULT _stdcall selectedIndex([in] long p );
    [
    propget, 
    id(0x000003F2)
    ]
    HRESULT _stdcall selectedIndex([out, retval] long * p );
    [
    propget, 
    id(0x000003F4), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall type([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003F3), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall value([in] BSTR p );
    [
    propget, 
    id(0x000003F3), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall value([out, retval] BSTR * p );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall disabled([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall disabled([out, retval] VARIANT_BOOL * p );
    [
    propget, 
    id(0x800107D4)
    ]
    HRESULT _stdcall form([out, retval] IHTMLFormElement ** p  );
    [
    id(0x000005DF)
    ]
    HRESULT _stdcall add([in] IHTMLElement * element , [in, optional] VARIANT before );
    [
    id(0x000005E0)
    ]
    HRESULT _stdcall remove([in, optional, defaultvalue(-1)] long index );
    [
    propput, 
    id(0x000005DC)
    ]
    HRESULT _stdcall length([in] long p );
    [
    propget, 
    id(0x000005DC)
    ]
    HRESULT _stdcall length([out, retval] long * p );
    [
    propget, 
    id(0xFFFFFFFC), 
    restricted, 
    hidden
    ]
    HRESULT _stdcall _newEnum([out, retval]  IUnknown ** p );
    [
    id(0x00000000)
    ]
    HRESULT _stdcall item([in, optional] VARIANT name, [in, optional] VARIANT index, [out, retval]  IDispatch ** pdisp );
    [
    id(0x000005DE)
    ]
    HRESULT _stdcall tags([in] VARIANT tagName, [out, retval]  IDispatch ** pdisp );
  };

  [
    uuid(3050F531-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLSelectElement
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x800103FD)
    ]
    void dataFld(BSTR Param1 );
    [
    propget, 
    id(0x800103FD)
    ]
    BSTR dataFld( void );
    [
    propput, 
    id(0x800103FE)
    ]
    void dataSrc(BSTR Param1 );
    [
    propget, 
    id(0x800103FE)
    ]
    BSTR dataSrc( void );
    [
    propput, 
    id(0x800103FF)
    ]
    void dataFormatAs(BSTR Param1 );
    [
    propget, 
    id(0x800103FF)
    ]
    BSTR dataFormatAs( void );
    [
    propput, 
    id(0x000003EA), 
    bindable, 
    displaybind
    ]
    void size(long Param1 );
    [
    propget, 
    id(0x000003EA), 
    bindable, 
    displaybind
    ]
    long size( void );
    [
    propput, 
    id(0x000003EB), 
    bindable, 
    displaybind
    ]
    void multiple(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x000003EB), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL multiple( void );
    [
    propput, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    void name(BSTR Param1 );
    [
    propget, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    BSTR name( void );
    [
    propget, 
    id(0x000003ED)
    ]
     IDispatch * options( void );
    [
    propput, 
    id(0x8001178E), 
    bindable, 
    displaybind
    ]
    void onchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001178E), 
    bindable, 
    displaybind
    ]
    VARIANT onchange( void );
    [
    propput, 
    id(0x000003F2)
    ]
    void selectedIndex(long Param1 );
    [
    propget, 
    id(0x000003F2)
    ]
    long selectedIndex( void );
    [
    propget, 
    id(0x000003F4), 
    bindable, 
    displaybind
    ]
    BSTR type( void );
    [
    propput, 
    id(0x000003F3), 
    bindable, 
    displaybind
    ]
    void value(BSTR Param1 );
    [
    propget, 
    id(0x000003F3), 
    bindable, 
    displaybind
    ]
    BSTR value( void );
    [
    propget, 
    id(0x800107D4)
    ]
    IHTMLFormElement * form( void );
    [
    id(0x000005DF)
    ]
    void add([in] IHTMLElement * element , [in, optional] VARIANT before );
    [
    id(0x000005E0)
    ]
    void remove([in, optional, defaultvalue(-1)] long index );
    [
    propput, 
    id(0x000005DC)
    ]
    void length(long Param1 );
    [
    propget, 
    id(0x000005DC)
    ]
    long length( void );
    [
    propget, 
    id(0xFFFFFFFC), 
    restricted, 
    hidden
    ]
     IUnknown * _newEnum( void );
    [
    id(0x00000000)
    ]
     IDispatch * item([in, optional] VARIANT name, [in, optional] VARIANT index );
    [
    id(0x000005DE)
    ]
     IDispatch * tags([in] VARIANT tagName );
    [
    id(0x000005E1)
    ]
     IDispatch * urns([in] VARIANT urn );
    [
    id(0x000005E2)
    ]
     IDispatch * namedItem([in] BSTR name );
  };

  [
    uuid(3050F211-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLOptionElement: IDispatch
  {
    [
    propput, 
    id(0x000003E9)
    ]
    HRESULT _stdcall selected([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x000003E9)
    ]
    HRESULT _stdcall selected([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x000003EA)
    ]
    HRESULT _stdcall value([in] BSTR p );
    [
    propget, 
    id(0x000003EA)
    ]
    HRESULT _stdcall value([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003EB)
    ]
    HRESULT _stdcall defaultSelected([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x000003EB)
    ]
    HRESULT _stdcall defaultSelected([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x000003ED)
    ]
    HRESULT _stdcall index([in] long p );
    [
    propget, 
    id(0x000003ED)
    ]
    HRESULT _stdcall index([out, retval] long * p );
    [
    propput, 
    id(0x000003EC)
    ]
    HRESULT _stdcall text([in] BSTR p );
    [
    propget, 
    id(0x000003EC)
    ]
    HRESULT _stdcall text([out, retval] BSTR * p );
    [
    propget, 
    id(0x000003EE)
    ]
    HRESULT _stdcall form([out, retval] IHTMLFormElement ** p  );
  };

  [
    uuid(3050F38C-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLOptionElementFactory: IDispatch
  {
    [
    id(0x00000000)
    ]
    HRESULT _stdcall create([in, optional] VARIANT text, [in, optional] VARIANT value, [in, optional] VARIANT defaultSelected, [in, optional] VARIANT selected, [out, retval] IHTMLOptionElement ** __MIDL_0012  );
  };

  [
    uuid(3050F52B-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLOptionElement
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x800103FD)
    ]
    void dataFld(BSTR Param1 );
    [
    propget, 
    id(0x800103FD)
    ]
    BSTR dataFld( void );
    [
    propput, 
    id(0x800103FE)
    ]
    void dataSrc(BSTR Param1 );
    [
    propget, 
    id(0x800103FE)
    ]
    BSTR dataSrc( void );
    [
    propput, 
    id(0x800103FF)
    ]
    void dataFormatAs(BSTR Param1 );
    [
    propget, 
    id(0x800103FF)
    ]
    BSTR dataFormatAs( void );
    [
    propput, 
    id(0x000003E9)
    ]
    void selected(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x000003E9)
    ]
    VARIANT_BOOL selected( void );
    [
    propput, 
    id(0x000003EA)
    ]
    void value(BSTR Param1 );
    [
    propget, 
    id(0x000003EA)
    ]
    BSTR value( void );
    [
    propput, 
    id(0x000003EB)
    ]
    void defaultSelected(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x000003EB)
    ]
    VARIANT_BOOL defaultSelected( void );
    [
    propput, 
    id(0x000003ED)
    ]
    void index(long Param1 );
    [
    propget, 
    id(0x000003ED)
    ]
    long index( void );
    [
    propput, 
    id(0x000003EC)
    ]
    void text(BSTR Param1 );
    [
    propget, 
    id(0x000003EC)
    ]
    BSTR text( void );
    [
    propget, 
    id(0x000003EE)
    ]
    IHTMLFormElement * form( void );
    [
    propput, 
    id(0x000003EF), 
    bindable, 
    displaybind
    ]
    void label(BSTR Param1 );
    [
    propget, 
    id(0x000003EF), 
    bindable, 
    displaybind
    ]
    BSTR label( void );
  };

  [
    uuid(3050F617-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface HTMLButtonElementEvents2
  {
    properties:
    methods:
    [
    id(0x8001000A)
    ]
    VARIANT_BOOL onhelp([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA8)
    ]
    VARIANT_BOOL onclick([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA7)
    ]
    VARIANT_BOOL ondblclick([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA5)
    ]
    VARIANT_BOOL onkeypress([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA6)
    ]
    void onkeydown([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA4)
    ]
    void onkeyup([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010009)
    ]
    void onmouseout([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010008)
    ]
    void onmouseover([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA2)
    ]
    void onmousemove([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA3)
    ]
    void onmousedown([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA1)
    ]
    void onmouseup([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000C)
    ]
    VARIANT_BOOL onselectstart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010011)
    ]
    void onfilterchange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000B)
    ]
    VARIANT_BOOL ondragstart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010004)
    ]
    VARIANT_BOOL onbeforeupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010005)
    ]
    void onafterupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000D)
    ]
    VARIANT_BOOL onerrorupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010006)
    ]
    VARIANT_BOOL onrowexit([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010007)
    ]
    void onrowenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000E)
    ]
    void ondatasetchanged([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000F)
    ]
    void ondataavailable([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010010)
    ]
    void ondatasetcomplete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010012)
    ]
    void onlosecapture([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010013)
    ]
    void onpropertychange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003F6)
    ]
    void onscroll([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010001)
    ]
    void onfocus([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010000)
    ]
    void onblur([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003F8)
    ]
    void onresize([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010014)
    ]
    VARIANT_BOOL ondrag([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010015)
    ]
    void ondragend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010016)
    ]
    VARIANT_BOOL ondragenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010017)
    ]
    VARIANT_BOOL ondragover([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010018)
    ]
    void ondragleave([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010019)
    ]
    VARIANT_BOOL ondrop([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001D)
    ]
    VARIANT_BOOL onbeforecut([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001A)
    ]
    VARIANT_BOOL oncut([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001E)
    ]
    VARIANT_BOOL onbeforecopy([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001B)
    ]
    VARIANT_BOOL oncopy([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001F)
    ]
    VARIANT_BOOL onbeforepaste([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001C)
    ]
    VARIANT_BOOL onpaste([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003FF)
    ]
    VARIANT_BOOL oncontextmenu([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010020)
    ]
    void onrowsdelete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010021)
    ]
    void onrowsinserted([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010022)
    ]
    void oncellchange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFD9F)
    ]
    void onreadystatechange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000406)
    ]
    void onlayoutcomplete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000407)
    ]
    void onpage([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000412)
    ]
    void onmouseenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000413)
    ]
    void onmouseleave([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000414)
    ]
    void onactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000415)
    ]
    void ondeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040A)
    ]
    VARIANT_BOOL onbeforedeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000417)
    ]
    VARIANT_BOOL onbeforeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000418)
    ]
    void onfocusin([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000419)
    ]
    void onfocusout([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040B)
    ]
    void onmove([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040C)
    ]
    VARIANT_BOOL oncontrolselect([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040E)
    ]
    VARIANT_BOOL onmovestart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040F)
    ]
    void onmoveend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000410)
    ]
    VARIANT_BOOL onresizestart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000411)
    ]
    void onresizeend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000409)
    ]
    VARIANT_BOOL onmousewheel([in] IHTMLEventObj * pEvtObj  );
  };

  [
    uuid(3050F618-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface HTMLInputTextElementEvents2
  {
    properties:
    methods:
    [
    id(0x8001000A)
    ]
    VARIANT_BOOL onhelp([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA8)
    ]
    VARIANT_BOOL onclick([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA7)
    ]
    VARIANT_BOOL ondblclick([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA5)
    ]
    VARIANT_BOOL onkeypress([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA6)
    ]
    void onkeydown([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA4)
    ]
    void onkeyup([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010009)
    ]
    void onmouseout([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010008)
    ]
    void onmouseover([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA2)
    ]
    void onmousemove([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA3)
    ]
    void onmousedown([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA1)
    ]
    void onmouseup([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000C)
    ]
    VARIANT_BOOL onselectstart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010011)
    ]
    void onfilterchange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000B)
    ]
    VARIANT_BOOL ondragstart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010004)
    ]
    VARIANT_BOOL onbeforeupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010005)
    ]
    void onafterupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000D)
    ]
    VARIANT_BOOL onerrorupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010006)
    ]
    VARIANT_BOOL onrowexit([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010007)
    ]
    void onrowenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000E)
    ]
    void ondatasetchanged([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000F)
    ]
    void ondataavailable([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010010)
    ]
    void ondatasetcomplete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010012)
    ]
    void onlosecapture([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010013)
    ]
    void onpropertychange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003F6)
    ]
    void onscroll([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010001)
    ]
    void onfocus([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010000)
    ]
    void onblur([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003F8)
    ]
    void onresize([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010014)
    ]
    VARIANT_BOOL ondrag([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010015)
    ]
    void ondragend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010016)
    ]
    VARIANT_BOOL ondragenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010017)
    ]
    VARIANT_BOOL ondragover([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010018)
    ]
    void ondragleave([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010019)
    ]
    VARIANT_BOOL ondrop([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001D)
    ]
    VARIANT_BOOL onbeforecut([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001A)
    ]
    VARIANT_BOOL oncut([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001E)
    ]
    VARIANT_BOOL onbeforecopy([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001B)
    ]
    VARIANT_BOOL oncopy([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001F)
    ]
    VARIANT_BOOL onbeforepaste([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001C)
    ]
    VARIANT_BOOL onpaste([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003FF)
    ]
    VARIANT_BOOL oncontextmenu([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010020)
    ]
    void onrowsdelete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010021)
    ]
    void onrowsinserted([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010022)
    ]
    void oncellchange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFD9F)
    ]
    void onreadystatechange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000406)
    ]
    void onlayoutcomplete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000407)
    ]
    void onpage([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000412)
    ]
    void onmouseenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000413)
    ]
    void onmouseleave([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000414)
    ]
    void onactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000415)
    ]
    void ondeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040A)
    ]
    VARIANT_BOOL onbeforedeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000417)
    ]
    VARIANT_BOOL onbeforeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000418)
    ]
    void onfocusin([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000419)
    ]
    void onfocusout([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040B)
    ]
    void onmove([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040C)
    ]
    VARIANT_BOOL oncontrolselect([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040E)
    ]
    VARIANT_BOOL onmovestart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040F)
    ]
    void onmoveend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000410)
    ]
    VARIANT_BOOL onresizestart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000411)
    ]
    void onresizeend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000409)
    ]
    VARIANT_BOOL onmousewheel([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003E9)
    ]
    VARIANT_BOOL onchange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003EE)
    ]
    void onselect([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003EB)
    ]
    void onload([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003EA)
    ]
    void onerror([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003E8)
    ]
    void onabort([in] IHTMLEventObj * pEvtObj  );
  };

  [
    uuid(3050F619-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface HTMLOptionButtonElementEvents2
  {
    properties:
    methods:
    [
    id(0x8001000A)
    ]
    VARIANT_BOOL onhelp([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA8)
    ]
    VARIANT_BOOL onclick([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA7)
    ]
    VARIANT_BOOL ondblclick([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA5)
    ]
    VARIANT_BOOL onkeypress([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA6)
    ]
    void onkeydown([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA4)
    ]
    void onkeyup([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010009)
    ]
    void onmouseout([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010008)
    ]
    void onmouseover([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA2)
    ]
    void onmousemove([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA3)
    ]
    void onmousedown([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA1)
    ]
    void onmouseup([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000C)
    ]
    VARIANT_BOOL onselectstart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010011)
    ]
    void onfilterchange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000B)
    ]
    VARIANT_BOOL ondragstart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010004)
    ]
    VARIANT_BOOL onbeforeupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010005)
    ]
    void onafterupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000D)
    ]
    VARIANT_BOOL onerrorupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010006)
    ]
    VARIANT_BOOL onrowexit([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010007)
    ]
    void onrowenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000E)
    ]
    void ondatasetchanged([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000F)
    ]
    void ondataavailable([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010010)
    ]
    void ondatasetcomplete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010012)
    ]
    void onlosecapture([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010013)
    ]
    void onpropertychange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003F6)
    ]
    void onscroll([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010001)
    ]
    void onfocus([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010000)
    ]
    void onblur([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003F8)
    ]
    void onresize([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010014)
    ]
    VARIANT_BOOL ondrag([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010015)
    ]
    void ondragend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010016)
    ]
    VARIANT_BOOL ondragenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010017)
    ]
    VARIANT_BOOL ondragover([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010018)
    ]
    void ondragleave([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010019)
    ]
    VARIANT_BOOL ondrop([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001D)
    ]
    VARIANT_BOOL onbeforecut([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001A)
    ]
    VARIANT_BOOL oncut([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001E)
    ]
    VARIANT_BOOL onbeforecopy([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001B)
    ]
    VARIANT_BOOL oncopy([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001F)
    ]
    VARIANT_BOOL onbeforepaste([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001C)
    ]
    VARIANT_BOOL onpaste([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003FF)
    ]
    VARIANT_BOOL oncontextmenu([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010020)
    ]
    void onrowsdelete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010021)
    ]
    void onrowsinserted([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010022)
    ]
    void oncellchange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFD9F)
    ]
    void onreadystatechange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000406)
    ]
    void onlayoutcomplete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000407)
    ]
    void onpage([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000412)
    ]
    void onmouseenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000413)
    ]
    void onmouseleave([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000414)
    ]
    void onactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000415)
    ]
    void ondeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040A)
    ]
    VARIANT_BOOL onbeforedeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000417)
    ]
    VARIANT_BOOL onbeforeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000418)
    ]
    void onfocusin([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000419)
    ]
    void onfocusout([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040B)
    ]
    void onmove([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040C)
    ]
    VARIANT_BOOL oncontrolselect([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040E)
    ]
    VARIANT_BOOL onmovestart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040F)
    ]
    void onmoveend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000410)
    ]
    VARIANT_BOOL onresizestart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000411)
    ]
    void onresizeend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000409)
    ]
    VARIANT_BOOL onmousewheel([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003E9)
    ]
    VARIANT_BOOL onchange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003EE)
    ]
    void onselect([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003EB)
    ]
    void onload([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003EA)
    ]
    void onerror([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003E8)
    ]
    void onabort([in] IHTMLEventObj * pEvtObj  );
  };

  [
    uuid(3050F61A-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface HTMLInputFileElementEvents2
  {
    properties:
    methods:
    [
    id(0x8001000A)
    ]
    VARIANT_BOOL onhelp([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA8)
    ]
    VARIANT_BOOL onclick([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA7)
    ]
    VARIANT_BOOL ondblclick([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA5)
    ]
    VARIANT_BOOL onkeypress([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA6)
    ]
    void onkeydown([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA4)
    ]
    void onkeyup([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010009)
    ]
    void onmouseout([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010008)
    ]
    void onmouseover([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA2)
    ]
    void onmousemove([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA3)
    ]
    void onmousedown([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA1)
    ]
    void onmouseup([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000C)
    ]
    VARIANT_BOOL onselectstart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010011)
    ]
    void onfilterchange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000B)
    ]
    VARIANT_BOOL ondragstart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010004)
    ]
    VARIANT_BOOL onbeforeupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010005)
    ]
    void onafterupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000D)
    ]
    VARIANT_BOOL onerrorupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010006)
    ]
    VARIANT_BOOL onrowexit([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010007)
    ]
    void onrowenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000E)
    ]
    void ondatasetchanged([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000F)
    ]
    void ondataavailable([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010010)
    ]
    void ondatasetcomplete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010012)
    ]
    void onlosecapture([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010013)
    ]
    void onpropertychange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003F6)
    ]
    void onscroll([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010001)
    ]
    void onfocus([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010000)
    ]
    void onblur([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003F8)
    ]
    void onresize([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010014)
    ]
    VARIANT_BOOL ondrag([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010015)
    ]
    void ondragend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010016)
    ]
    VARIANT_BOOL ondragenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010017)
    ]
    VARIANT_BOOL ondragover([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010018)
    ]
    void ondragleave([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010019)
    ]
    VARIANT_BOOL ondrop([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001D)
    ]
    VARIANT_BOOL onbeforecut([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001A)
    ]
    VARIANT_BOOL oncut([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001E)
    ]
    VARIANT_BOOL onbeforecopy([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001B)
    ]
    VARIANT_BOOL oncopy([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001F)
    ]
    VARIANT_BOOL onbeforepaste([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001C)
    ]
    VARIANT_BOOL onpaste([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003FF)
    ]
    VARIANT_BOOL oncontextmenu([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010020)
    ]
    void onrowsdelete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010021)
    ]
    void onrowsinserted([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010022)
    ]
    void oncellchange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFD9F)
    ]
    void onreadystatechange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000406)
    ]
    void onlayoutcomplete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000407)
    ]
    void onpage([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000412)
    ]
    void onmouseenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000413)
    ]
    void onmouseleave([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000414)
    ]
    void onactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000415)
    ]
    void ondeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040A)
    ]
    VARIANT_BOOL onbeforedeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000417)
    ]
    VARIANT_BOOL onbeforeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000418)
    ]
    void onfocusin([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000419)
    ]
    void onfocusout([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040B)
    ]
    void onmove([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040C)
    ]
    VARIANT_BOOL oncontrolselect([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040E)
    ]
    VARIANT_BOOL onmovestart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040F)
    ]
    void onmoveend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000410)
    ]
    VARIANT_BOOL onresizestart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000411)
    ]
    void onresizeend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000409)
    ]
    VARIANT_BOOL onmousewheel([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003E9)
    ]
    VARIANT_BOOL onchange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003EE)
    ]
    void onselect([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003EB)
    ]
    void onload([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003EA)
    ]
    void onerror([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003E8)
    ]
    void onabort([in] IHTMLEventObj * pEvtObj  );
  };

  [
    uuid(3050F61B-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface HTMLInputImageEvents2
  {
    properties:
    methods:
    [
    id(0x8001000A)
    ]
    VARIANT_BOOL onhelp([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA8)
    ]
    VARIANT_BOOL onclick([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA7)
    ]
    VARIANT_BOOL ondblclick([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA5)
    ]
    VARIANT_BOOL onkeypress([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA6)
    ]
    void onkeydown([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA4)
    ]
    void onkeyup([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010009)
    ]
    void onmouseout([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010008)
    ]
    void onmouseover([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA2)
    ]
    void onmousemove([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA3)
    ]
    void onmousedown([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA1)
    ]
    void onmouseup([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000C)
    ]
    VARIANT_BOOL onselectstart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010011)
    ]
    void onfilterchange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000B)
    ]
    VARIANT_BOOL ondragstart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010004)
    ]
    VARIANT_BOOL onbeforeupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010005)
    ]
    void onafterupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000D)
    ]
    VARIANT_BOOL onerrorupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010006)
    ]
    VARIANT_BOOL onrowexit([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010007)
    ]
    void onrowenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000E)
    ]
    void ondatasetchanged([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000F)
    ]
    void ondataavailable([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010010)
    ]
    void ondatasetcomplete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010012)
    ]
    void onlosecapture([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010013)
    ]
    void onpropertychange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003F6)
    ]
    void onscroll([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010001)
    ]
    void onfocus([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010000)
    ]
    void onblur([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003F8)
    ]
    void onresize([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010014)
    ]
    VARIANT_BOOL ondrag([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010015)
    ]
    void ondragend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010016)
    ]
    VARIANT_BOOL ondragenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010017)
    ]
    VARIANT_BOOL ondragover([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010018)
    ]
    void ondragleave([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010019)
    ]
    VARIANT_BOOL ondrop([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001D)
    ]
    VARIANT_BOOL onbeforecut([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001A)
    ]
    VARIANT_BOOL oncut([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001E)
    ]
    VARIANT_BOOL onbeforecopy([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001B)
    ]
    VARIANT_BOOL oncopy([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001F)
    ]
    VARIANT_BOOL onbeforepaste([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001C)
    ]
    VARIANT_BOOL onpaste([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003FF)
    ]
    VARIANT_BOOL oncontextmenu([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010020)
    ]
    void onrowsdelete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010021)
    ]
    void onrowsinserted([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010022)
    ]
    void oncellchange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFD9F)
    ]
    void onreadystatechange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000406)
    ]
    void onlayoutcomplete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000407)
    ]
    void onpage([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000412)
    ]
    void onmouseenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000413)
    ]
    void onmouseleave([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000414)
    ]
    void onactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000415)
    ]
    void ondeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040A)
    ]
    VARIANT_BOOL onbeforedeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000417)
    ]
    VARIANT_BOOL onbeforeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000418)
    ]
    void onfocusin([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000419)
    ]
    void onfocusout([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040B)
    ]
    void onmove([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040C)
    ]
    VARIANT_BOOL oncontrolselect([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040E)
    ]
    VARIANT_BOOL onmovestart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040F)
    ]
    void onmoveend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000410)
    ]
    VARIANT_BOOL onresizestart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000411)
    ]
    void onresizeend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000409)
    ]
    VARIANT_BOOL onmousewheel([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003EB)
    ]
    void onload([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003EA)
    ]
    void onerror([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003E8)
    ]
    void onabort([in] IHTMLEventObj * pEvtObj  );
  };

  [
    uuid(3050F5D2-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLInputElement: IDispatch
  {
    [
    propput, 
    id(0x000007D0)
    ]
    HRESULT _stdcall type([in] BSTR p );
    [
    propget, 
    id(0x000007D0)
    ]
    HRESULT _stdcall type([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113ED), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall value([in] BSTR p );
    [
    propget, 
    id(0x800113ED), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall value([out, retval] BSTR * p );
    [
    propput, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall name([in] BSTR p );
    [
    propget, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall name([out, retval] BSTR * p );
    [
    propput, 
    id(0x000007D1)
    ]
    HRESULT _stdcall status([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x000007D1)
    ]
    HRESULT _stdcall status([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall disabled([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall disabled([out, retval] VARIANT_BOOL * p );
    [
    propget, 
    id(0x800107D4)
    ]
    HRESULT _stdcall form([out, retval] IHTMLFormElement ** p  );
    [
    propput, 
    id(0x000007D2), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall size([in] long p );
    [
    propget, 
    id(0x000007D2), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall size([out, retval] long * p );
    [
    propput, 
    id(0x000007D3), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall maxLength([in] long p );
    [
    propget, 
    id(0x000007D3), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall maxLength([out, retval] long * p );
    [
    id(0x000007D4)
    ]
    HRESULT _stdcall select( void );
    [
    propput, 
    id(0x8001178E), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onchange([in] VARIANT p );
    [
    propget, 
    id(0x8001178E), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onchange([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001177A), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onselect([in] VARIANT p );
    [
    propget, 
    id(0x8001177A), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onselect([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113DB), 
    bindable, 
    displaybind, 
    hidden
    ]
    HRESULT _stdcall defaultValue([in] BSTR p );
    [
    propget, 
    id(0x800113DB), 
    bindable, 
    displaybind, 
    hidden
    ]
    HRESULT _stdcall defaultValue([out, retval] BSTR * p );
    [
    propput, 
    id(0x000007D5), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall readOnly([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x000007D5), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall readOnly([out, retval] VARIANT_BOOL * p );
    [
    id(0x000007D6)
    ]
    HRESULT _stdcall createTextRange([out, retval] IHTMLTxtRange ** range  );
    [
    propput, 
    id(0x000007D7), 
    bindable
    ]
    HRESULT _stdcall indeterminate([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x000007D7), 
    bindable
    ]
    HRESULT _stdcall indeterminate([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x000007D8), 
    bindable
    ]
    HRESULT _stdcall defaultChecked([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x000007D8), 
    bindable
    ]
    HRESULT _stdcall defaultChecked([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x000007D9), 
    bindable
    ]
    HRESULT _stdcall checked([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x000007D9), 
    bindable
    ]
    HRESULT _stdcall checked([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x000007DC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall border([in] VARIANT p );
    [
    propget, 
    id(0x000007DC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall border([out, retval] VARIANT * p );
    [
    propput, 
    id(0x000007DD), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall vspace([in] long p );
    [
    propget, 
    id(0x000007DD), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall vspace([out, retval] long * p );
    [
    propput, 
    id(0x000007DE), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall hspace([in] long p );
    [
    propget, 
    id(0x000007DE), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall hspace([out, retval] long * p );
    [
    propput, 
    id(0x000007DA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall alt([in] BSTR p );
    [
    propget, 
    id(0x000007DA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall alt([out, retval] BSTR * p );
    [
    propput, 
    id(0x000007DB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall src([in] BSTR p );
    [
    propget, 
    id(0x000007DB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall src([out, retval] BSTR * p );
    [
    propput, 
    id(0x000007DF), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall lowsrc([in] BSTR p );
    [
    propget, 
    id(0x000007DF), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall lowsrc([out, retval] BSTR * p );
    [
    propput, 
    id(0x000007E0), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall vrml([in] BSTR p );
    [
    propget, 
    id(0x000007E0), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall vrml([out, retval] BSTR * p );
    [
    propput, 
    id(0x000007E1), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall dynsrc([in] BSTR p );
    [
    propget, 
    id(0x000007E1), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall dynsrc([out, retval] BSTR * p );
    [
    propget, 
    id(0x800113FC)
    ]
    HRESULT _stdcall readyState([out, retval] BSTR * p );
    [
    propget, 
    id(0x000007E2)
    ]
    HRESULT _stdcall complete([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x000007E3), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall loop([in] VARIANT p );
    [
    propget, 
    id(0x000007E3), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall loop([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80010049), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall align([in] BSTR p );
    [
    propget, 
    id(0x80010049), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall align([out, retval] BSTR * p );
    [
    propput, 
    id(0x80011790), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onload([in] VARIANT p );
    [
    propget, 
    id(0x80011790), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onload([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001178D), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onerror([in] VARIANT p );
    [
    propget, 
    id(0x8001178D), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onerror([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001178C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onabort([in] VARIANT p );
    [
    propget, 
    id(0x8001178C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onabort([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80010005)
    ]
    HRESULT _stdcall width([in] long p );
    [
    propget, 
    id(0x80010005)
    ]
    HRESULT _stdcall width([out, retval] long * p );
    [
    propput, 
    id(0x80010006)
    ]
    HRESULT _stdcall height([in] long p );
    [
    propget, 
    id(0x80010006)
    ]
    HRESULT _stdcall height([out, retval] long * p );
    [
    propput, 
    id(0x000007E4), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall Start([in] BSTR p );
    [
    propget, 
    id(0x000007E4), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall Start([out, retval] BSTR * p );
  };

  [
    uuid(3050F2B2-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLInputButtonElement: IDispatch
  {
    [
    propget, 
    id(0x000007D0)
    ]
    HRESULT _stdcall type([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113ED), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall value([in] BSTR p );
    [
    propget, 
    id(0x800113ED), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall value([out, retval] BSTR * p );
    [
    propput, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall name([in] BSTR p );
    [
    propget, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall name([out, retval] BSTR * p );
    [
    propput, 
    id(0x000007E5)
    ]
    HRESULT _stdcall status([in] VARIANT p );
    [
    propget, 
    id(0x000007E5)
    ]
    HRESULT _stdcall status([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall disabled([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall disabled([out, retval] VARIANT_BOOL * p );
    [
    propget, 
    id(0x800107D4)
    ]
    HRESULT _stdcall form([out, retval] IHTMLFormElement ** p  );
    [
    id(0x000007D6)
    ]
    HRESULT _stdcall createTextRange([out, retval] IHTMLTxtRange ** range  );
  };

  [
    uuid(3050F2A4-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLInputHiddenElement: IDispatch
  {
    [
    propget, 
    id(0x000007D0)
    ]
    HRESULT _stdcall type([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113ED), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall value([in] BSTR p );
    [
    propget, 
    id(0x800113ED), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall value([out, retval] BSTR * p );
    [
    propput, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall name([in] BSTR p );
    [
    propget, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall name([out, retval] BSTR * p );
    [
    propput, 
    id(0x000007E5)
    ]
    HRESULT _stdcall status([in] VARIANT p );
    [
    propget, 
    id(0x000007E5)
    ]
    HRESULT _stdcall status([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall disabled([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall disabled([out, retval] VARIANT_BOOL * p );
    [
    propget, 
    id(0x800107D4)
    ]
    HRESULT _stdcall form([out, retval] IHTMLFormElement ** p  );
    [
    id(0x000007D6)
    ]
    HRESULT _stdcall createTextRange([out, retval] IHTMLTxtRange ** range  );
  };

  [
    uuid(3050F2A6-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLInputTextElement: IDispatch
  {
    [
    propget, 
    id(0x000007D0)
    ]
    HRESULT _stdcall type([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113ED), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall value([in] BSTR p );
    [
    propget, 
    id(0x800113ED), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall value([out, retval] BSTR * p );
    [
    propput, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall name([in] BSTR p );
    [
    propget, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall name([out, retval] BSTR * p );
    [
    propput, 
    id(0x000007E5)
    ]
    HRESULT _stdcall status([in] VARIANT p );
    [
    propget, 
    id(0x000007E5)
    ]
    HRESULT _stdcall status([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall disabled([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall disabled([out, retval] VARIANT_BOOL * p );
    [
    propget, 
    id(0x800107D4)
    ]
    HRESULT _stdcall form([out, retval] IHTMLFormElement ** p  );
    [
    propput, 
    id(0x800113DB), 
    bindable, 
    displaybind, 
    hidden
    ]
    HRESULT _stdcall defaultValue([in] BSTR p );
    [
    propget, 
    id(0x800113DB), 
    bindable, 
    displaybind, 
    hidden
    ]
    HRESULT _stdcall defaultValue([out, retval] BSTR * p );
    [
    propput, 
    id(0x000007D2), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall size([in] long p );
    [
    propget, 
    id(0x000007D2), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall size([out, retval] long * p );
    [
    propput, 
    id(0x000007D3), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall maxLength([in] long p );
    [
    propget, 
    id(0x000007D3), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall maxLength([out, retval] long * p );
    [
    id(0x000007D4)
    ]
    HRESULT _stdcall select( void );
    [
    propput, 
    id(0x8001178E), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onchange([in] VARIANT p );
    [
    propget, 
    id(0x8001178E), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onchange([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001177A), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onselect([in] VARIANT p );
    [
    propget, 
    id(0x8001177A), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onselect([out, retval] VARIANT * p );
    [
    propput, 
    id(0x000007D5), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall readOnly([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x000007D5), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall readOnly([out, retval] VARIANT_BOOL * p );
    [
    id(0x000007D6)
    ]
    HRESULT _stdcall createTextRange([out, retval] IHTMLTxtRange ** range  );
  };

  [
    uuid(3050F2AD-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLInputFileElement: IDispatch
  {
    [
    propget, 
    id(0x000007D0)
    ]
    HRESULT _stdcall type([out, retval] BSTR * p );
    [
    propput, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall name([in] BSTR p );
    [
    propget, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall name([out, retval] BSTR * p );
    [
    propput, 
    id(0x000007E5)
    ]
    HRESULT _stdcall status([in] VARIANT p );
    [
    propget, 
    id(0x000007E5)
    ]
    HRESULT _stdcall status([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall disabled([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall disabled([out, retval] VARIANT_BOOL * p );
    [
    propget, 
    id(0x800107D4)
    ]
    HRESULT _stdcall form([out, retval] IHTMLFormElement ** p  );
    [
    propput, 
    id(0x000007D2), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall size([in] long p );
    [
    propget, 
    id(0x000007D2), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall size([out, retval] long * p );
    [
    propput, 
    id(0x000007D3), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall maxLength([in] long p );
    [
    propget, 
    id(0x000007D3), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall maxLength([out, retval] long * p );
    [
    id(0x000007D4)
    ]
    HRESULT _stdcall select( void );
    [
    propput, 
    id(0x8001178E), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onchange([in] VARIANT p );
    [
    propget, 
    id(0x8001178E), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onchange([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001177A), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onselect([in] VARIANT p );
    [
    propget, 
    id(0x8001177A), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onselect([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113ED), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall value([in] BSTR p );
    [
    propget, 
    id(0x800113ED), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall value([out, retval] BSTR * p );
  };

  [
    uuid(3050F2BC-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLOptionButtonElement: IDispatch
  {
    [
    propput, 
    id(0x800113ED), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall value([in] BSTR p );
    [
    propget, 
    id(0x800113ED), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall value([out, retval] BSTR * p );
    [
    propget, 
    id(0x000007D0)
    ]
    HRESULT _stdcall type([out, retval] BSTR * p );
    [
    propput, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall name([in] BSTR p );
    [
    propget, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall name([out, retval] BSTR * p );
    [
    propput, 
    id(0x000007D9), 
    bindable
    ]
    HRESULT _stdcall checked([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x000007D9), 
    bindable
    ]
    HRESULT _stdcall checked([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x000007D8), 
    bindable
    ]
    HRESULT _stdcall defaultChecked([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x000007D8), 
    bindable
    ]
    HRESULT _stdcall defaultChecked([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x8001178E), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onchange([in] VARIANT p );
    [
    propget, 
    id(0x8001178E), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onchange([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall disabled([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall disabled([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x000007D1)
    ]
    HRESULT _stdcall status([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x000007D1)
    ]
    HRESULT _stdcall status([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x000007D7), 
    bindable
    ]
    HRESULT _stdcall indeterminate([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x000007D7), 
    bindable
    ]
    HRESULT _stdcall indeterminate([out, retval] VARIANT_BOOL * p );
    [
    propget, 
    id(0x800107D4)
    ]
    HRESULT _stdcall form([out, retval] IHTMLFormElement ** p  );
  };

  [
    uuid(3050F57D-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLInputElement
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x800103FD)
    ]
    void dataFld(BSTR Param1 );
    [
    propget, 
    id(0x800103FD)
    ]
    BSTR dataFld( void );
    [
    propput, 
    id(0x800103FE)
    ]
    void dataSrc(BSTR Param1 );
    [
    propget, 
    id(0x800103FE)
    ]
    BSTR dataSrc( void );
    [
    propput, 
    id(0x800103FF)
    ]
    void dataFormatAs(BSTR Param1 );
    [
    propget, 
    id(0x800103FF)
    ]
    BSTR dataFormatAs( void );
    [
    propput, 
    id(0x000007D0)
    ]
    void type(BSTR Param1 );
    [
    propget, 
    id(0x000007D0)
    ]
    BSTR type( void );
    [
    propput, 
    id(0x800113ED), 
    bindable, 
    displaybind
    ]
    void value(BSTR Param1 );
    [
    propget, 
    id(0x800113ED), 
    bindable, 
    displaybind
    ]
    BSTR value( void );
    [
    propput, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    void name(BSTR Param1 );
    [
    propget, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    BSTR name( void );
    [
    propput, 
    id(0x000007D1)
    ]
    void status(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x000007D1)
    ]
    VARIANT_BOOL status( void );
    [
    propget, 
    id(0x800107D4)
    ]
    IHTMLFormElement * form( void );
    [
    propput, 
    id(0x000007D2), 
    bindable, 
    displaybind
    ]
    void size(long Param1 );
    [
    propget, 
    id(0x000007D2), 
    bindable, 
    displaybind
    ]
    long size( void );
    [
    propput, 
    id(0x000007D3), 
    bindable, 
    displaybind
    ]
    void maxLength(long Param1 );
    [
    propget, 
    id(0x000007D3), 
    bindable, 
    displaybind
    ]
    long maxLength( void );
    [
    id(0x000007D4)
    ]
    void select( void );
    [
    propput, 
    id(0x8001178E), 
    bindable, 
    displaybind
    ]
    void onchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001178E), 
    bindable, 
    displaybind
    ]
    VARIANT onchange( void );
    [
    propput, 
    id(0x8001177A), 
    bindable, 
    displaybind
    ]
    void onselect(VARIANT Param1 );
    [
    propget, 
    id(0x8001177A), 
    bindable, 
    displaybind
    ]
    VARIANT onselect( void );
    [
    propput, 
    id(0x800113DB), 
    bindable, 
    displaybind, 
    hidden
    ]
    void defaultValue(BSTR Param1 );
    [
    propget, 
    id(0x800113DB), 
    bindable, 
    displaybind, 
    hidden
    ]
    BSTR defaultValue( void );
    [
    propput, 
    id(0x000007D5), 
    bindable, 
    displaybind
    ]
    void readOnly(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x000007D5), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL readOnly( void );
    [
    id(0x000007D6)
    ]
    IHTMLTxtRange * createTextRange( void );
    [
    propput, 
    id(0x000007D7), 
    bindable
    ]
    void indeterminate(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x000007D7), 
    bindable
    ]
    VARIANT_BOOL indeterminate( void );
    [
    propput, 
    id(0x000007D8), 
    bindable
    ]
    void defaultChecked(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x000007D8), 
    bindable
    ]
    VARIANT_BOOL defaultChecked( void );
    [
    propput, 
    id(0x000007D9), 
    bindable
    ]
    void checked(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x000007D9), 
    bindable
    ]
    VARIANT_BOOL checked( void );
    [
    propput, 
    id(0x000007DC), 
    bindable, 
    displaybind
    ]
    void border(VARIANT Param1 );
    [
    propget, 
    id(0x000007DC), 
    bindable, 
    displaybind
    ]
    VARIANT border( void );
    [
    propput, 
    id(0x000007DD), 
    bindable, 
    displaybind
    ]
    void vspace(long Param1 );
    [
    propget, 
    id(0x000007DD), 
    bindable, 
    displaybind
    ]
    long vspace( void );
    [
    propput, 
    id(0x000007DE), 
    bindable, 
    displaybind
    ]
    void hspace(long Param1 );
    [
    propget, 
    id(0x000007DE), 
    bindable, 
    displaybind
    ]
    long hspace( void );
    [
    propput, 
    id(0x000007DA), 
    bindable, 
    displaybind
    ]
    void alt(BSTR Param1 );
    [
    propget, 
    id(0x000007DA), 
    bindable, 
    displaybind
    ]
    BSTR alt( void );
    [
    propput, 
    id(0x000007DB), 
    bindable, 
    displaybind
    ]
    void src(BSTR Param1 );
    [
    propget, 
    id(0x000007DB), 
    bindable, 
    displaybind
    ]
    BSTR src( void );
    [
    propput, 
    id(0x000007DF), 
    bindable, 
    displaybind
    ]
    void lowsrc(BSTR Param1 );
    [
    propget, 
    id(0x000007DF), 
    bindable, 
    displaybind
    ]
    BSTR lowsrc( void );
    [
    propput, 
    id(0x000007E0), 
    bindable, 
    displaybind
    ]
    void vrml(BSTR Param1 );
    [
    propget, 
    id(0x000007E0), 
    bindable, 
    displaybind
    ]
    BSTR vrml( void );
    [
    propput, 
    id(0x000007E1), 
    bindable, 
    displaybind
    ]
    void dynsrc(BSTR Param1 );
    [
    propget, 
    id(0x000007E1), 
    bindable, 
    displaybind
    ]
    BSTR dynsrc( void );
    [
    propget, 
    id(0x000007E2)
    ]
    VARIANT_BOOL complete( void );
    [
    propput, 
    id(0x000007E3), 
    bindable, 
    displaybind
    ]
    void loop(VARIANT Param1 );
    [
    propget, 
    id(0x000007E3), 
    bindable, 
    displaybind
    ]
    VARIANT loop( void );
    [
    propput, 
    id(0x80010049), 
    bindable, 
    displaybind
    ]
    void align(BSTR Param1 );
    [
    propget, 
    id(0x80010049), 
    bindable, 
    displaybind
    ]
    BSTR align( void );
    [
    propput, 
    id(0x80011790), 
    bindable, 
    displaybind
    ]
    void onload(VARIANT Param1 );
    [
    propget, 
    id(0x80011790), 
    bindable, 
    displaybind
    ]
    VARIANT onload( void );
    [
    propput, 
    id(0x8001178D), 
    bindable, 
    displaybind
    ]
    void onerror(VARIANT Param1 );
    [
    propget, 
    id(0x8001178D), 
    bindable, 
    displaybind
    ]
    VARIANT onerror( void );
    [
    propput, 
    id(0x8001178C), 
    bindable, 
    displaybind
    ]
    void onabort(VARIANT Param1 );
    [
    propget, 
    id(0x8001178C), 
    bindable, 
    displaybind
    ]
    VARIANT onabort( void );
    [
    propput, 
    id(0x80010005)
    ]
    void width(long Param1 );
    [
    propget, 
    id(0x80010005)
    ]
    long width( void );
    [
    propput, 
    id(0x80010006)
    ]
    void height(long Param1 );
    [
    propget, 
    id(0x80010006)
    ]
    long height( void );
    [
    propput, 
    id(0x000007E4), 
    bindable, 
    displaybind
    ]
    void Start(BSTR Param1 );
    [
    propget, 
    id(0x000007E4), 
    bindable, 
    displaybind
    ]
    BSTR Start( void );
    [
    propput, 
    id(0x000007E6), 
    bindable, 
    displaybind
    ]
    void accept(BSTR Param1 );
    [
    propget, 
    id(0x000007E6), 
    bindable, 
    displaybind
    ]
    BSTR accept( void );
    [
    propput, 
    id(0x000007E7), 
    bindable, 
    displaybind
    ]
    void useMap(BSTR Param1 );
    [
    propget, 
    id(0x000007E7), 
    bindable, 
    displaybind
    ]
    BSTR useMap( void );
  };

  [
    uuid(3050F2AA-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLTextAreaElement: IDispatch
  {
    [
    propget, 
    id(0x000007D0)
    ]
    HRESULT _stdcall type([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113ED), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall value([in] BSTR p );
    [
    propget, 
    id(0x800113ED), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall value([out, retval] BSTR * p );
    [
    propput, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall name([in] BSTR p );
    [
    propget, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall name([out, retval] BSTR * p );
    [
    propput, 
    id(0x000007D1)
    ]
    HRESULT _stdcall status([in] VARIANT p );
    [
    propget, 
    id(0x000007D1)
    ]
    HRESULT _stdcall status([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall disabled([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall disabled([out, retval] VARIANT_BOOL * p );
    [
    propget, 
    id(0x800107D4)
    ]
    HRESULT _stdcall form([out, retval] IHTMLFormElement ** p  );
    [
    propput, 
    id(0x800113DB), 
    bindable, 
    displaybind, 
    hidden
    ]
    HRESULT _stdcall defaultValue([in] BSTR p );
    [
    propget, 
    id(0x800113DB), 
    bindable, 
    displaybind, 
    hidden
    ]
    HRESULT _stdcall defaultValue([out, retval] BSTR * p );
    [
    id(0x00001B5D)
    ]
    HRESULT _stdcall select( void );
    [
    propput, 
    id(0x8001178E), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onchange([in] VARIANT p );
    [
    propget, 
    id(0x8001178E), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onchange([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001177A), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onselect([in] VARIANT p );
    [
    propget, 
    id(0x8001177A), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onselect([out, retval] VARIANT * p );
    [
    propput, 
    id(0x00001B5C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall readOnly([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x00001B5C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall readOnly([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x00001B59), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall rows([in] long p );
    [
    propget, 
    id(0x00001B59), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall rows([out, retval] long * p );
    [
    propput, 
    id(0x00001B5A), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall cols([in] long p );
    [
    propget, 
    id(0x00001B5A), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall cols([out, retval] long * p );
    [
    propput, 
    id(0x00001B5B), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall wrap([in] BSTR p );
    [
    propget, 
    id(0x00001B5B), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall wrap([out, retval] BSTR * p );
    [
    id(0x00001B5E)
    ]
    HRESULT _stdcall createTextRange([out, retval] IHTMLTxtRange ** range  );
  };

  [
    uuid(3050F521-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLTextAreaElement
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x800103FD)
    ]
    void dataFld(BSTR Param1 );
    [
    propget, 
    id(0x800103FD)
    ]
    BSTR dataFld( void );
    [
    propput, 
    id(0x800103FE)
    ]
    void dataSrc(BSTR Param1 );
    [
    propget, 
    id(0x800103FE)
    ]
    BSTR dataSrc( void );
    [
    propput, 
    id(0x800103FF)
    ]
    void dataFormatAs(BSTR Param1 );
    [
    propget, 
    id(0x800103FF)
    ]
    BSTR dataFormatAs( void );
    [
    propget, 
    id(0x000007D0)
    ]
    BSTR type( void );
    [
    propput, 
    id(0x800113ED), 
    bindable, 
    displaybind
    ]
    void value(BSTR Param1 );
    [
    propget, 
    id(0x800113ED), 
    bindable, 
    displaybind
    ]
    BSTR value( void );
    [
    propput, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    void name(BSTR Param1 );
    [
    propget, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    BSTR name( void );
    [
    propput, 
    id(0x000007D1)
    ]
    void status(VARIANT Param1 );
    [
    propget, 
    id(0x000007D1)
    ]
    VARIANT status( void );
    [
    propget, 
    id(0x800107D4)
    ]
    IHTMLFormElement * form( void );
    [
    propput, 
    id(0x800113DB), 
    bindable, 
    displaybind, 
    hidden
    ]
    void defaultValue(BSTR Param1 );
    [
    propget, 
    id(0x800113DB), 
    bindable, 
    displaybind, 
    hidden
    ]
    BSTR defaultValue( void );
    [
    id(0x00001B5D)
    ]
    void select( void );
    [
    propput, 
    id(0x8001178E), 
    bindable, 
    displaybind
    ]
    void onchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001178E), 
    bindable, 
    displaybind
    ]
    VARIANT onchange( void );
    [
    propput, 
    id(0x8001177A), 
    bindable, 
    displaybind
    ]
    void onselect(VARIANT Param1 );
    [
    propget, 
    id(0x8001177A), 
    bindable, 
    displaybind
    ]
    VARIANT onselect( void );
    [
    propput, 
    id(0x00001B5C), 
    bindable, 
    displaybind
    ]
    void readOnly(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x00001B5C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL readOnly( void );
    [
    propput, 
    id(0x00001B59), 
    bindable, 
    displaybind
    ]
    void rows(long Param1 );
    [
    propget, 
    id(0x00001B59), 
    bindable, 
    displaybind
    ]
    long rows( void );
    [
    propput, 
    id(0x00001B5A), 
    bindable, 
    displaybind
    ]
    void cols(long Param1 );
    [
    propget, 
    id(0x00001B5A), 
    bindable, 
    displaybind
    ]
    long cols( void );
    [
    propput, 
    id(0x00001B5B), 
    bindable, 
    displaybind
    ]
    void wrap(BSTR Param1 );
    [
    propget, 
    id(0x00001B5B), 
    bindable, 
    displaybind
    ]
    BSTR wrap( void );
    [
    id(0x00001B5E)
    ]
    IHTMLTxtRange * createTextRange( void );
  };

  [
    uuid(3050F54D-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLRichtextElement
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x800103FD)
    ]
    void dataFld(BSTR Param1 );
    [
    propget, 
    id(0x800103FD)
    ]
    BSTR dataFld( void );
    [
    propput, 
    id(0x800103FE)
    ]
    void dataSrc(BSTR Param1 );
    [
    propget, 
    id(0x800103FE)
    ]
    BSTR dataSrc( void );
    [
    propput, 
    id(0x800103FF)
    ]
    void dataFormatAs(BSTR Param1 );
    [
    propget, 
    id(0x800103FF)
    ]
    BSTR dataFormatAs( void );
    [
    propget, 
    id(0x000007D0)
    ]
    BSTR type( void );
    [
    propput, 
    id(0x800113ED), 
    bindable, 
    displaybind
    ]
    void value(BSTR Param1 );
    [
    propget, 
    id(0x800113ED), 
    bindable, 
    displaybind
    ]
    BSTR value( void );
    [
    propput, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    void name(BSTR Param1 );
    [
    propget, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    BSTR name( void );
    [
    propput, 
    id(0x000007D1)
    ]
    void status(VARIANT Param1 );
    [
    propget, 
    id(0x000007D1)
    ]
    VARIANT status( void );
    [
    propget, 
    id(0x800107D4)
    ]
    IHTMLFormElement * form( void );
    [
    propput, 
    id(0x800113DB), 
    bindable, 
    displaybind, 
    hidden
    ]
    void defaultValue(BSTR Param1 );
    [
    propget, 
    id(0x800113DB), 
    bindable, 
    displaybind, 
    hidden
    ]
    BSTR defaultValue( void );
    [
    id(0x00001B5D)
    ]
    void select( void );
    [
    propput, 
    id(0x8001178E), 
    bindable, 
    displaybind
    ]
    void onchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001178E), 
    bindable, 
    displaybind
    ]
    VARIANT onchange( void );
    [
    propput, 
    id(0x8001177A), 
    bindable, 
    displaybind
    ]
    void onselect(VARIANT Param1 );
    [
    propget, 
    id(0x8001177A), 
    bindable, 
    displaybind
    ]
    VARIANT onselect( void );
    [
    propput, 
    id(0x00001B5C), 
    bindable, 
    displaybind
    ]
    void readOnly(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x00001B5C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL readOnly( void );
    [
    propput, 
    id(0x00001B59), 
    bindable, 
    displaybind
    ]
    void rows(long Param1 );
    [
    propget, 
    id(0x00001B59), 
    bindable, 
    displaybind
    ]
    long rows( void );
    [
    propput, 
    id(0x00001B5A), 
    bindable, 
    displaybind
    ]
    void cols(long Param1 );
    [
    propget, 
    id(0x00001B5A), 
    bindable, 
    displaybind
    ]
    long cols( void );
    [
    propput, 
    id(0x00001B5B), 
    bindable, 
    displaybind
    ]
    void wrap(BSTR Param1 );
    [
    propget, 
    id(0x00001B5B), 
    bindable, 
    displaybind
    ]
    BSTR wrap( void );
    [
    id(0x00001B5E)
    ]
    IHTMLTxtRange * createTextRange( void );
  };

  [
    uuid(3050F2BB-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLButtonElement: IDispatch
  {
    [
    propget, 
    id(0x000007D0)
    ]
    HRESULT _stdcall type([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113ED), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall value([in] BSTR p );
    [
    propget, 
    id(0x800113ED), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall value([out, retval] BSTR * p );
    [
    propput, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall name([in] BSTR p );
    [
    propget, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall name([out, retval] BSTR * p );
    [
    propput, 
    id(0x00001F41)
    ]
    HRESULT _stdcall status([in] VARIANT p );
    [
    propget, 
    id(0x00001F41)
    ]
    HRESULT _stdcall status([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall disabled([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall disabled([out, retval] VARIANT_BOOL * p );
    [
    propget, 
    id(0x800107D4)
    ]
    HRESULT _stdcall form([out, retval] IHTMLFormElement ** p  );
    [
    id(0x00001F42)
    ]
    HRESULT _stdcall createTextRange([out, retval] IHTMLTxtRange ** range  );
  };

  [
    uuid(3050F51F-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLButtonElement
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x800103FD)
    ]
    void dataFld(BSTR Param1 );
    [
    propget, 
    id(0x800103FD)
    ]
    BSTR dataFld( void );
    [
    propput, 
    id(0x800103FE)
    ]
    void dataSrc(BSTR Param1 );
    [
    propget, 
    id(0x800103FE)
    ]
    BSTR dataSrc( void );
    [
    propput, 
    id(0x800103FF)
    ]
    void dataFormatAs(BSTR Param1 );
    [
    propget, 
    id(0x800103FF)
    ]
    BSTR dataFormatAs( void );
    [
    propget, 
    id(0x000007D0)
    ]
    BSTR type( void );
    [
    propput, 
    id(0x800113ED), 
    bindable, 
    displaybind
    ]
    void value(BSTR Param1 );
    [
    propget, 
    id(0x800113ED), 
    bindable, 
    displaybind
    ]
    BSTR value( void );
    [
    propput, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    void name(BSTR Param1 );
    [
    propget, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    BSTR name( void );
    [
    propput, 
    id(0x00001F41)
    ]
    void status(VARIANT Param1 );
    [
    propget, 
    id(0x00001F41)
    ]
    VARIANT status( void );
    [
    propget, 
    id(0x800107D4)
    ]
    IHTMLFormElement * form( void );
    [
    id(0x00001F42)
    ]
    IHTMLTxtRange * createTextRange( void );
  };

  [
    uuid(3050F61F-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface HTMLMarqueeElementEvents2
  {
    properties:
    methods:
    [
    id(0x8001000A)
    ]
    VARIANT_BOOL onhelp([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA8)
    ]
    VARIANT_BOOL onclick([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA7)
    ]
    VARIANT_BOOL ondblclick([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA5)
    ]
    VARIANT_BOOL onkeypress([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA6)
    ]
    void onkeydown([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA4)
    ]
    void onkeyup([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010009)
    ]
    void onmouseout([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010008)
    ]
    void onmouseover([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA2)
    ]
    void onmousemove([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA3)
    ]
    void onmousedown([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA1)
    ]
    void onmouseup([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000C)
    ]
    VARIANT_BOOL onselectstart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010011)
    ]
    void onfilterchange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000B)
    ]
    VARIANT_BOOL ondragstart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010004)
    ]
    VARIANT_BOOL onbeforeupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010005)
    ]
    void onafterupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000D)
    ]
    VARIANT_BOOL onerrorupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010006)
    ]
    VARIANT_BOOL onrowexit([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010007)
    ]
    void onrowenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000E)
    ]
    void ondatasetchanged([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000F)
    ]
    void ondataavailable([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010010)
    ]
    void ondatasetcomplete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010012)
    ]
    void onlosecapture([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010013)
    ]
    void onpropertychange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003F6)
    ]
    void onscroll([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010001)
    ]
    void onfocus([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010000)
    ]
    void onblur([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003F8)
    ]
    void onresize([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010014)
    ]
    VARIANT_BOOL ondrag([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010015)
    ]
    void ondragend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010016)
    ]
    VARIANT_BOOL ondragenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010017)
    ]
    VARIANT_BOOL ondragover([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010018)
    ]
    void ondragleave([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010019)
    ]
    VARIANT_BOOL ondrop([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001D)
    ]
    VARIANT_BOOL onbeforecut([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001A)
    ]
    VARIANT_BOOL oncut([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001E)
    ]
    VARIANT_BOOL onbeforecopy([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001B)
    ]
    VARIANT_BOOL oncopy([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001F)
    ]
    VARIANT_BOOL onbeforepaste([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001C)
    ]
    VARIANT_BOOL onpaste([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003FF)
    ]
    VARIANT_BOOL oncontextmenu([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010020)
    ]
    void onrowsdelete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010021)
    ]
    void onrowsinserted([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010022)
    ]
    void oncellchange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFD9F)
    ]
    void onreadystatechange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000406)
    ]
    void onlayoutcomplete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000407)
    ]
    void onpage([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000412)
    ]
    void onmouseenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000413)
    ]
    void onmouseleave([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000414)
    ]
    void onactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000415)
    ]
    void ondeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040A)
    ]
    VARIANT_BOOL onbeforedeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000417)
    ]
    VARIANT_BOOL onbeforeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000418)
    ]
    void onfocusin([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000419)
    ]
    void onfocusout([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040B)
    ]
    void onmove([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040C)
    ]
    VARIANT_BOOL oncontrolselect([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040E)
    ]
    VARIANT_BOOL onmovestart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040F)
    ]
    void onmoveend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000410)
    ]
    VARIANT_BOOL onresizestart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000411)
    ]
    void onresizeend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000409)
    ]
    VARIANT_BOOL onmousewheel([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003E9)
    ]
    void onchange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003EE)
    ]
    void onselect([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003F1)
    ]
    void onbounce([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003F2)
    ]
    void onfinish([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003F3)
    ]
    void onstart([in] IHTMLEventObj * pEvtObj  );
  };

  [
    uuid(3050F527-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLMarqueeElement
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x800103FD)
    ]
    void dataFld(BSTR Param1 );
    [
    propget, 
    id(0x800103FD)
    ]
    BSTR dataFld( void );
    [
    propput, 
    id(0x800103FE)
    ]
    void dataSrc(BSTR Param1 );
    [
    propget, 
    id(0x800103FE)
    ]
    BSTR dataSrc( void );
    [
    propput, 
    id(0x800103FF)
    ]
    void dataFormatAs(BSTR Param1 );
    [
    propget, 
    id(0x800103FF)
    ]
    BSTR dataFormatAs( void );
    [
    propput, 
    id(0xFFFFFE0B)
    ]
    void bgColor(VARIANT Param1 );
    [
    propget, 
    id(0xFFFFFE0B)
    ]
    VARIANT bgColor( void );
    [
    propput, 
    id(0x00001770)
    ]
    void scrollDelay(long Param1 );
    [
    propget, 
    id(0x00001770)
    ]
    long scrollDelay( void );
    [
    propput, 
    id(0x00001771)
    ]
    void direction(BSTR Param1 );
    [
    propget, 
    id(0x00001771)
    ]
    BSTR direction( void );
    [
    propput, 
    id(0x00001772)
    ]
    void behavior(BSTR Param1 );
    [
    propget, 
    id(0x00001772)
    ]
    BSTR behavior( void );
    [
    propput, 
    id(0x00001773)
    ]
    void scrollAmount(long Param1 );
    [
    propget, 
    id(0x00001773)
    ]
    long scrollAmount( void );
    [
    propput, 
    id(0x00001774)
    ]
    void loop(long Param1 );
    [
    propget, 
    id(0x00001774)
    ]
    long loop( void );
    [
    propput, 
    id(0x00001775)
    ]
    void vspace(long Param1 );
    [
    propget, 
    id(0x00001775)
    ]
    long vspace( void );
    [
    propput, 
    id(0x00001776)
    ]
    void hspace(long Param1 );
    [
    propget, 
    id(0x00001776)
    ]
    long hspace( void );
    [
    propput, 
    id(0x8001178A), 
    bindable, 
    displaybind
    ]
    void onfinish(VARIANT Param1 );
    [
    propget, 
    id(0x8001178A), 
    bindable, 
    displaybind
    ]
    VARIANT onfinish( void );
    [
    propput, 
    id(0x8001178B), 
    bindable, 
    displaybind
    ]
    void onstart(VARIANT Param1 );
    [
    propget, 
    id(0x8001178B), 
    bindable, 
    displaybind
    ]
    VARIANT onstart( void );
    [
    propput, 
    id(0x80011784), 
    bindable, 
    displaybind
    ]
    void onbounce(VARIANT Param1 );
    [
    propget, 
    id(0x80011784), 
    bindable, 
    displaybind
    ]
    VARIANT onbounce( void );
    [
    propput, 
    id(0x80010005)
    ]
    void width(VARIANT Param1 );
    [
    propget, 
    id(0x80010005)
    ]
    VARIANT width( void );
    [
    propput, 
    id(0x80010006)
    ]
    void height(VARIANT Param1 );
    [
    propget, 
    id(0x80010006)
    ]
    VARIANT height( void );
    [
    propput, 
    id(0x00001777), 
    bindable, 
    displaybind
    ]
    void trueSpeed(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x00001777), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL trueSpeed( void );
    [
    id(0x0000177A)
    ]
    void Start( void );
    [
    id(0x0000177B)
    ]
    void stop( void );
  };

  [
    uuid(3050F82F-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLIsIndexElement2: IDispatch
  {
    [
    propget, 
    id(0x000003F4)
    ]
    HRESULT _stdcall form([out, retval] IHTMLFormElement ** p  );
  };

  [
    uuid(3050F560-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLHtmlElement
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x000003E9), 
    bindable, 
    displaybind
    ]
    void version(BSTR Param1 );
    [
    propget, 
    id(0x000003E9), 
    bindable, 
    displaybind
    ]
    BSTR version( void );
  };

  [
    uuid(3050F561-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLHeadElement
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x000003E9), 
    bindable, 
    displaybind
    ]
    void profile(BSTR Param1 );
    [
    propget, 
    id(0x000003E9), 
    bindable, 
    displaybind
    ]
    BSTR profile( void );
  };

  [
    uuid(3050F516-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLTitleElement
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x800113ED), 
    bindable
    ]
    void text(BSTR Param1 );
    [
    propget, 
    id(0x800113ED), 
    bindable
    ]
    BSTR text( void );
  };

  [
    uuid(3050F517-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLMetaElement
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x000003E9), 
    bindable, 
    displaybind
    ]
    void httpEquiv(BSTR Param1 );
    [
    propget, 
    id(0x000003E9), 
    bindable, 
    displaybind
    ]
    BSTR httpEquiv( void );
    [
    propput, 
    id(0x000003EA), 
    bindable, 
    displaybind
    ]
    void content(BSTR Param1 );
    [
    propget, 
    id(0x000003EA), 
    bindable, 
    displaybind
    ]
    BSTR content( void );
    [
    propput, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    void name(BSTR Param1 );
    [
    propget, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    BSTR name( void );
    [
    propput, 
    id(0x000003EB), 
    bindable, 
    displaybind
    ]
    void url(BSTR Param1 );
    [
    propget, 
    id(0x000003EB), 
    bindable, 
    displaybind
    ]
    BSTR url( void );
    [
    propput, 
    id(0x000003F5), 
    bindable, 
    displaybind
    ]
    void charset(BSTR Param1 );
    [
    propget, 
    id(0x000003F5), 
    bindable, 
    displaybind
    ]
    BSTR charset( void );
    [
    propput, 
    id(0x000003FC), 
    bindable, 
    displaybind
    ]
    void scheme(BSTR Param1 );
    [
    propget, 
    id(0x000003FC), 
    bindable, 
    displaybind
    ]
    BSTR scheme( void );
  };

  [
    uuid(3050F518-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLBaseElement
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x000003EB), 
    bindable, 
    displaybind
    ]
    void href(BSTR Param1 );
    [
    propget, 
    id(0x000003EB), 
    bindable, 
    displaybind
    ]
    BSTR href( void );
    [
    propput, 
    id(0x000003EC), 
    bindable, 
    displaybind
    ]
    void target(BSTR Param1 );
    [
    propget, 
    id(0x000003EC), 
    bindable, 
    displaybind
    ]
    BSTR target( void );
  };

  [
    uuid(3050F519-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLIsIndexElement
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x000003F2), 
    bindable, 
    displaybind
    ]
    void prompt(BSTR Param1 );
    [
    propget, 
    id(0x000003F2), 
    bindable, 
    displaybind
    ]
    BSTR prompt( void );
    [
    propput, 
    id(0x000003F3), 
    bindable, 
    displaybind
    ]
    void action(BSTR Param1 );
    [
    propget, 
    id(0x000003F3), 
    bindable, 
    displaybind
    ]
    BSTR action( void );
    [
    propget, 
    id(0x000003F4)
    ]
    IHTMLFormElement * form( void );
  };

  [
    uuid(3050F51A-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLNextIdElement
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x000003F4), 
    bindable, 
    displaybind
    ]
    void n(BSTR Param1 );
    [
    propget, 
    id(0x000003F4), 
    bindable, 
    displaybind
    ]
    BSTR n( void );
  };

  [
    uuid(3050F504-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLBaseFontElement
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x8001138A), 
    bindable, 
    displaybind
    ]
    void color(VARIANT Param1 );
    [
    propget, 
    id(0x8001138A), 
    bindable, 
    displaybind
    ]
    VARIANT color( void );
    [
    propput, 
    id(0x8001139A), 
    bindable, 
    displaybind
    ]
    void face(BSTR Param1 );
    [
    propget, 
    id(0x8001139A), 
    bindable, 
    displaybind
    ]
    BSTR face( void );
    [
    propput, 
    id(0x800113A2), 
    bindable, 
    displaybind
    ]
    void size(long Param1 );
    [
    propget, 
    id(0x800113A2), 
    bindable, 
    displaybind
    ]
    long size( void );
  };

  [
    uuid(3050F539-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLUnknownElement
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
  };

  [
    uuid(FECEAAA2-8405-11CF-8BA1-00AA00476DA6), 
    dual, 
    oleautomation
  ]
   interface IOmHistory: IDispatch
  {
    [
    propget, 
    id(0x00000001)
    ]
    HRESULT _stdcall length([out, retval] short * p );
    [
    id(0x00000002)
    ]
    HRESULT _stdcall back([in, optional] VARIANT * pvargdistance );
    [
    id(0x00000003)
    ]
    HRESULT _stdcall forward([in, optional] VARIANT * pvargdistance );
    [
    id(0x00000004)
    ]
    HRESULT _stdcall go([in, optional] VARIANT * pvargdistance );
  };

  [
    uuid(FECEAAA5-8405-11CF-8BA1-00AA00476DA6), 
    dual, 
    oleautomation
  ]
   interface IOmNavigator: IDispatch
  {
    [
    propget, 
    id(0x00000001)
    ]
    HRESULT _stdcall appCodeName([out, retval] BSTR * p );
    [
    propget, 
    id(0x00000002)
    ]
    HRESULT _stdcall appName([out, retval] BSTR * p );
    [
    propget, 
    id(0x00000003)
    ]
    HRESULT _stdcall appVersion([out, retval] BSTR * p );
    [
    propget, 
    id(0x00000004)
    ]
    HRESULT _stdcall userAgent([out, retval] BSTR * p );
    [
    id(0x00000005)
    ]
    HRESULT _stdcall javaEnabled([out, retval] VARIANT_BOOL * enabled );
    [
    id(0x00000006)
    ]
    HRESULT _stdcall taintEnabled([out, retval] VARIANT_BOOL * enabled );
    [
    propget, 
    id(0x00000007)
    ]
    HRESULT _stdcall mimeTypes([out, retval] IHTMLMimeTypesCollection ** p  );
    [
    propget, 
    id(0x00000008)
    ]
    HRESULT _stdcall plugins([out, retval] IHTMLPluginsCollection ** p  );
    [
    propget, 
    id(0x00000009)
    ]
    HRESULT _stdcall cookieEnabled([out, retval] VARIANT_BOOL * p );
    [
    propget, 
    id(0x0000000A)
    ]
    HRESULT _stdcall opsProfile([out, retval] IHTMLOpsProfile ** p  );
    [
    id(0x0000000B)
    ]
    HRESULT _stdcall toString([out, retval] BSTR * String );
    [
    propget, 
    id(0x0000000C)
    ]
    HRESULT _stdcall cpuClass([out, retval] BSTR * p );
    [
    propget, 
    id(0x0000000D)
    ]
    HRESULT _stdcall systemLanguage([out, retval] BSTR * p );
    [
    propget, 
    id(0x0000000E), 
    hidden
    ]
    HRESULT _stdcall browserLanguage([out, retval] BSTR * p );
    [
    propget, 
    id(0x0000000F)
    ]
    HRESULT _stdcall userLanguage([out, retval] BSTR * p );
    [
    propget, 
    id(0x00000010)
    ]
    HRESULT _stdcall platform([out, retval] BSTR * p );
    [
    propget, 
    id(0x00000011)
    ]
    HRESULT _stdcall appMinorVersion([out, retval] BSTR * p );
    [
    propget, 
    id(0x00000012), 
    hidden
    ]
    HRESULT _stdcall connectionSpeed([out, retval] long * p );
    [
    propget, 
    id(0x00000013)
    ]
    HRESULT _stdcall onLine([out, retval] VARIANT_BOOL * p );
    [
    propget, 
    id(0x00000014)
    ]
    HRESULT _stdcall userProfile([out, retval] IHTMLOpsProfile ** p  );
  };

  [
    uuid(3050F4B3-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLDataTransfer: IDispatch
  {
    [
    id(0x000003E9)
    ]
    HRESULT _stdcall setData([in] BSTR format, [in] VARIANT * data, [out, retval] VARIANT_BOOL * pret );
    [
    id(0x000003EA)
    ]
    HRESULT _stdcall getData([in] BSTR format, [out, retval] VARIANT * pvarRet );
    [
    id(0x000003EB)
    ]
    HRESULT _stdcall clearData([in] BSTR format, [out, retval] VARIANT_BOOL * pret );
    [
    propput, 
    id(0x000003EC)
    ]
    HRESULT _stdcall dropEffect([in] BSTR p );
    [
    propget, 
    id(0x000003EC)
    ]
    HRESULT _stdcall dropEffect([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003ED)
    ]
    HRESULT _stdcall effectAllowed([in] BSTR p );
    [
    propget, 
    id(0x000003ED)
    ]
    HRESULT _stdcall effectAllowed([out, retval] BSTR * p );
  };

  [
    uuid(3050F48B-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLEventObj2: IDispatch
  {
    [
    id(0x800101F5)
    ]
    HRESULT _stdcall setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    HRESULT _stdcall getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags, [out, retval] VARIANT * AttributeValue );
    [
    id(0x800101F7)
    ]
    HRESULT _stdcall removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags, [out, retval] VARIANT_BOOL * pfSuccess );
    [
    propput, 
    id(0x00000403)
    ]
    HRESULT _stdcall propertyName([in] BSTR p );
    [
    propget, 
    id(0x00000403)
    ]
    HRESULT _stdcall propertyName([out, retval] BSTR * p );
    [
    propputref, 
    id(0x00000407)
    ]
    HRESULT _stdcall bookmarks([in] IHTMLBookmarkCollection * p  );
    [
    propget, 
    id(0x00000407)
    ]
    HRESULT _stdcall bookmarks([out, retval] IHTMLBookmarkCollection ** p  );
    [
    propputref, 
    id(0x00000408)
    ]
    HRESULT _stdcall recordset([in]  IDispatch * p );
    [
    propget, 
    id(0x00000408)
    ]
    HRESULT _stdcall recordset([out, retval]  IDispatch ** p );
    [
    propput, 
    id(0x00000409)
    ]
    HRESULT _stdcall dataFld([in] BSTR p );
    [
    propget, 
    id(0x00000409)
    ]
    HRESULT _stdcall dataFld([out, retval] BSTR * p );
    [
    propputref, 
    id(0x0000040A)
    ]
    HRESULT _stdcall boundElements([in] IHTMLElementCollection * p  );
    [
    propget, 
    id(0x0000040A)
    ]
    HRESULT _stdcall boundElements([out, retval] IHTMLElementCollection ** p  );
    [
    propput, 
    id(0x0000040B)
    ]
    HRESULT _stdcall repeat([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x0000040B)
    ]
    HRESULT _stdcall repeat([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x0000040C)
    ]
    HRESULT _stdcall srcUrn([in] BSTR p );
    [
    propget, 
    id(0x0000040C)
    ]
    HRESULT _stdcall srcUrn([out, retval] BSTR * p );
    [
    propputref, 
    id(0x000003E9)
    ]
    HRESULT _stdcall srcElement([in] IHTMLElement * p  );
    [
    propget, 
    id(0x000003E9)
    ]
    HRESULT _stdcall srcElement([out, retval] IHTMLElement ** p  );
    [
    propput, 
    id(0x000003EA)
    ]
    HRESULT _stdcall altKey([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x000003EA)
    ]
    HRESULT _stdcall altKey([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x000003EB)
    ]
    HRESULT _stdcall ctrlKey([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x000003EB)
    ]
    HRESULT _stdcall ctrlKey([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x000003EC)
    ]
    HRESULT _stdcall shiftKey([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x000003EC)
    ]
    HRESULT _stdcall shiftKey([out, retval] VARIANT_BOOL * p );
    [
    propputref, 
    id(0x000003F1)
    ]
    HRESULT _stdcall fromElement([in] IHTMLElement * p  );
    [
    propget, 
    id(0x000003F1)
    ]
    HRESULT _stdcall fromElement([out, retval] IHTMLElement ** p  );
    [
    propputref, 
    id(0x000003F2)
    ]
    HRESULT _stdcall toElement([in] IHTMLElement * p  );
    [
    propget, 
    id(0x000003F2)
    ]
    HRESULT _stdcall toElement([out, retval] IHTMLElement ** p  );
    [
    propput, 
    id(0x000003F4)
    ]
    HRESULT _stdcall button([in] long p );
    [
    propget, 
    id(0x000003F4)
    ]
    HRESULT _stdcall button([out, retval] long * p );
    [
    propput, 
    id(0x000003F5)
    ]
    HRESULT _stdcall type([in] BSTR p );
    [
    propget, 
    id(0x000003F5)
    ]
    HRESULT _stdcall type([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003F6)
    ]
    HRESULT _stdcall qualifier([in] BSTR p );
    [
    propget, 
    id(0x000003F6)
    ]
    HRESULT _stdcall qualifier([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003F7)
    ]
    HRESULT _stdcall reason([in] long p );
    [
    propget, 
    id(0x000003F7)
    ]
    HRESULT _stdcall reason([out, retval] long * p );
    [
    propput, 
    id(0x000003ED)
    ]
    HRESULT _stdcall x([in] long p );
    [
    propget, 
    id(0x000003ED)
    ]
    HRESULT _stdcall x([out, retval] long * p );
    [
    propput, 
    id(0x000003EE)
    ]
    HRESULT _stdcall y([in] long p );
    [
    propget, 
    id(0x000003EE)
    ]
    HRESULT _stdcall y([out, retval] long * p );
    [
    propput, 
    id(0x000003FC)
    ]
    HRESULT _stdcall clientX([in] long p );
    [
    propget, 
    id(0x000003FC)
    ]
    HRESULT _stdcall clientX([out, retval] long * p );
    [
    propput, 
    id(0x000003FD)
    ]
    HRESULT _stdcall clientY([in] long p );
    [
    propget, 
    id(0x000003FD)
    ]
    HRESULT _stdcall clientY([out, retval] long * p );
    [
    propput, 
    id(0x000003FE)
    ]
    HRESULT _stdcall offsetX([in] long p );
    [
    propget, 
    id(0x000003FE)
    ]
    HRESULT _stdcall offsetX([out, retval] long * p );
    [
    propput, 
    id(0x000003FF)
    ]
    HRESULT _stdcall offsetY([in] long p );
    [
    propget, 
    id(0x000003FF)
    ]
    HRESULT _stdcall offsetY([out, retval] long * p );
    [
    propput, 
    id(0x00000400)
    ]
    HRESULT _stdcall screenX([in] long p );
    [
    propget, 
    id(0x00000400)
    ]
    HRESULT _stdcall screenX([out, retval] long * p );
    [
    propput, 
    id(0x00000401)
    ]
    HRESULT _stdcall screenY([in] long p );
    [
    propget, 
    id(0x00000401)
    ]
    HRESULT _stdcall screenY([out, retval] long * p );
    [
    propputref, 
    id(0x00000402)
    ]
    HRESULT _stdcall srcFilter([in]  IDispatch * p );
    [
    propget, 
    id(0x00000402)
    ]
    HRESULT _stdcall srcFilter([out, retval]  IDispatch ** p );
    [
    propget, 
    id(0x0000040D)
    ]
    HRESULT _stdcall dataTransfer([out, retval] IHTMLDataTransfer ** p  );
  };

  [
    uuid(3050F680-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLEventObj3: IDispatch
  {
    [
    propget, 
    id(0x0000040E)
    ]
    HRESULT _stdcall contentOverflow([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x0000040F)
    ]
    HRESULT _stdcall shiftLeft([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x0000040F)
    ]
    HRESULT _stdcall shiftLeft([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x00000410)
    ]
    HRESULT _stdcall altLeft([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x00000410)
    ]
    HRESULT _stdcall altLeft([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x00000411)
    ]
    HRESULT _stdcall ctrlLeft([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x00000411)
    ]
    HRESULT _stdcall ctrlLeft([out, retval] VARIANT_BOOL * p );
    [
    propget, 
    id(0x00000412), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    HRESULT _stdcall imeCompositionChange([out, retval] LONG_PTR * p  );
    [
    propget, 
    id(0x00000413), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    HRESULT _stdcall imeNotifyCommand([out, retval] LONG_PTR * p  );
    [
    propget, 
    id(0x00000414), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    HRESULT _stdcall imeNotifyData([out, retval] LONG_PTR * p  );
    [
    propget, 
    id(0x00000416), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    HRESULT _stdcall imeRequest([out, retval] LONG_PTR * p  );
    [
    propget, 
    id(0x00000417), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    HRESULT _stdcall imeRequestData([out, retval] LONG_PTR * p  );
    [
    propget, 
    id(0x00000415), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    HRESULT _stdcall keyboardLayout([out, retval] LONG_PTR * p  );
    [
    propget, 
    id(0x00000418)
    ]
    HRESULT _stdcall behaviorCookie([out, retval] long * p );
    [
    propget, 
    id(0x00000419)
    ]
    HRESULT _stdcall behaviorPart([out, retval] long * p );
    [
    propget, 
    id(0x0000041A)
    ]
    HRESULT _stdcall nextPage([out, retval] BSTR * p );
  };

  [
    uuid(3050F558-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispCEventObj
  {
    properties:
    methods:
    [
    propput, 
    id(0x000003EF)
    ]
    void returnValue(VARIANT Param1 );
    [
    propget, 
    id(0x000003EF)
    ]
    VARIANT returnValue( void );
    [
    propput, 
    id(0x000003F0)
    ]
    void cancelBubble(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x000003F0)
    ]
    VARIANT_BOOL cancelBubble( void );
    [
    propput, 
    id(0x000003F3)
    ]
    void keyCode(long Param1 );
    [
    propget, 
    id(0x000003F3)
    ]
    long keyCode( void );
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x00000403)
    ]
    void propertyName(BSTR Param1 );
    [
    propget, 
    id(0x00000403)
    ]
    BSTR propertyName( void );
    [
    propputref, 
    id(0x00000407)
    ]
    void bookmarks(IHTMLBookmarkCollection * Param1  );
    [
    propget, 
    id(0x00000407)
    ]
    IHTMLBookmarkCollection * bookmarks( void );
    [
    propputref, 
    id(0x00000408)
    ]
    void recordset( IDispatch * Param1 );
    [
    propget, 
    id(0x00000408)
    ]
     IDispatch * recordset( void );
    [
    propput, 
    id(0x00000409)
    ]
    void dataFld(BSTR Param1 );
    [
    propget, 
    id(0x00000409)
    ]
    BSTR dataFld( void );
    [
    propputref, 
    id(0x0000040A)
    ]
    void boundElements(IHTMLElementCollection * Param1  );
    [
    propget, 
    id(0x0000040A)
    ]
    IHTMLElementCollection * boundElements( void );
    [
    propput, 
    id(0x0000040B)
    ]
    void repeat(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x0000040B)
    ]
    VARIANT_BOOL repeat( void );
    [
    propput, 
    id(0x0000040C)
    ]
    void srcUrn(BSTR Param1 );
    [
    propget, 
    id(0x0000040C)
    ]
    BSTR srcUrn( void );
    [
    propputref, 
    id(0x000003E9)
    ]
    void srcElement(IHTMLElement * Param1  );
    [
    propget, 
    id(0x000003E9)
    ]
    IHTMLElement * srcElement( void );
    [
    propput, 
    id(0x000003EA)
    ]
    void altKey(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x000003EA)
    ]
    VARIANT_BOOL altKey( void );
    [
    propput, 
    id(0x000003EB)
    ]
    void ctrlKey(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x000003EB)
    ]
    VARIANT_BOOL ctrlKey( void );
    [
    propput, 
    id(0x000003EC)
    ]
    void shiftKey(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x000003EC)
    ]
    VARIANT_BOOL shiftKey( void );
    [
    propputref, 
    id(0x000003F1)
    ]
    void fromElement(IHTMLElement * Param1  );
    [
    propget, 
    id(0x000003F1)
    ]
    IHTMLElement * fromElement( void );
    [
    propputref, 
    id(0x000003F2)
    ]
    void toElement(IHTMLElement * Param1  );
    [
    propget, 
    id(0x000003F2)
    ]
    IHTMLElement * toElement( void );
    [
    propput, 
    id(0x000003F4)
    ]
    void button(long Param1 );
    [
    propget, 
    id(0x000003F4)
    ]
    long button( void );
    [
    propput, 
    id(0x000003F5)
    ]
    void type(BSTR Param1 );
    [
    propget, 
    id(0x000003F5)
    ]
    BSTR type( void );
    [
    propput, 
    id(0x000003F6)
    ]
    void qualifier(BSTR Param1 );
    [
    propget, 
    id(0x000003F6)
    ]
    BSTR qualifier( void );
    [
    propput, 
    id(0x000003F7)
    ]
    void reason(long Param1 );
    [
    propget, 
    id(0x000003F7)
    ]
    long reason( void );
    [
    propput, 
    id(0x000003ED)
    ]
    void x(long Param1 );
    [
    propget, 
    id(0x000003ED)
    ]
    long x( void );
    [
    propput, 
    id(0x000003EE)
    ]
    void y(long Param1 );
    [
    propget, 
    id(0x000003EE)
    ]
    long y( void );
    [
    propput, 
    id(0x000003FC)
    ]
    void clientX(long Param1 );
    [
    propget, 
    id(0x000003FC)
    ]
    long clientX( void );
    [
    propput, 
    id(0x000003FD)
    ]
    void clientY(long Param1 );
    [
    propget, 
    id(0x000003FD)
    ]
    long clientY( void );
    [
    propput, 
    id(0x000003FE)
    ]
    void offsetX(long Param1 );
    [
    propget, 
    id(0x000003FE)
    ]
    long offsetX( void );
    [
    propput, 
    id(0x000003FF)
    ]
    void offsetY(long Param1 );
    [
    propget, 
    id(0x000003FF)
    ]
    long offsetY( void );
    [
    propput, 
    id(0x00000400)
    ]
    void screenX(long Param1 );
    [
    propget, 
    id(0x00000400)
    ]
    long screenX( void );
    [
    propput, 
    id(0x00000401)
    ]
    void screenY(long Param1 );
    [
    propget, 
    id(0x00000401)
    ]
    long screenY( void );
    [
    propputref, 
    id(0x00000402)
    ]
    void srcFilter( IDispatch * Param1 );
    [
    propget, 
    id(0x00000402)
    ]
     IDispatch * srcFilter( void );
    [
    propget, 
    id(0x0000040D)
    ]
    IHTMLDataTransfer * dataTransfer( void );
    [
    propget, 
    id(0x0000040E)
    ]
    VARIANT_BOOL contentOverflow( void );
    [
    propput, 
    id(0x0000040F)
    ]
    void shiftLeft(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x0000040F)
    ]
    VARIANT_BOOL shiftLeft( void );
    [
    propput, 
    id(0x00000410)
    ]
    void altLeft(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x00000410)
    ]
    VARIANT_BOOL altLeft( void );
    [
    propput, 
    id(0x00000411)
    ]
    void ctrlLeft(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x00000411)
    ]
    VARIANT_BOOL ctrlLeft( void );
    [
    propget, 
    id(0x00000412), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    LONG_PTR imeCompositionChange( void );
    [
    propget, 
    id(0x00000413), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    LONG_PTR imeNotifyCommand( void );
    [
    propget, 
    id(0x00000414), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    LONG_PTR imeNotifyData( void );
    [
    propget, 
    id(0x00000416), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    LONG_PTR imeRequest( void );
    [
    propget, 
    id(0x00000417), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    LONG_PTR imeRequestData( void );
    [
    propget, 
    id(0x00000415), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    LONG_PTR keyboardLayout( void );
    [
    propget, 
    id(0x00000418)
    ]
    long behaviorCookie( void );
    [
    propget, 
    id(0x00000419)
    ]
    long behaviorPart( void );
    [
    propget, 
    id(0x0000041A)
    ]
    BSTR nextPage( void );
    [
    propget, 
    id(0x0000041B)
    ]
    long wheelDelta( void );
  };

  [
    uuid(3050F625-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface HTMLWindowEvents2
  {
    properties:
    methods:
    [
    id(0x000003EB)
    ]
    void onload([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003F0)
    ]
    void onunload([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000A)
    ]
    VARIANT_BOOL onhelp([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010001)
    ]
    void onfocus([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010000)
    ]
    void onblur([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003EA)
    ]
    void onerror([in] BSTR description, [in] BSTR url, [in] long line );
    [
    id(0x000003F8)
    ]
    void onresize([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003F6)
    ]
    void onscroll([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003F9)
    ]
    void onbeforeunload([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000400)
    ]
    void onbeforeprint([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000401)
    ]
    void onafterprint([in] IHTMLEventObj * pEvtObj  );
  };

  [
    uuid(332C4425-26CB-11D0-B483-00C04FD90119), 
    dual, 
    oleautomation
  ]
   interface IHTMLDocument2: IHTMLDocument
  {
    [
    propget, 
    id(0x000003EB)
    ]
    HRESULT _stdcall all([out, retval] IHTMLElementCollection ** p  );
    [
    propget, 
    id(0x000003EC)
    ]
    HRESULT _stdcall body([out, retval] IHTMLElement ** p  );
    [
    propget, 
    id(0x000003ED)
    ]
    HRESULT _stdcall activeElement([out, retval] IHTMLElement ** p  );
    [
    propget, 
    id(0x000003F3)
    ]
    HRESULT _stdcall images([out, retval] IHTMLElementCollection ** p  );
    [
    propget, 
    id(0x000003F0)
    ]
    HRESULT _stdcall applets([out, retval] IHTMLElementCollection ** p  );
    [
    propget, 
    id(0x000003F1)
    ]
    HRESULT _stdcall links([out, retval] IHTMLElementCollection ** p  );
    [
    propget, 
    id(0x000003F2)
    ]
    HRESULT _stdcall forms([out, retval] IHTMLElementCollection ** p  );
    [
    propget, 
    id(0x000003EF)
    ]
    HRESULT _stdcall anchors([out, retval] IHTMLElementCollection ** p  );
    [
    propput, 
    id(0x000003F4)
    ]
    HRESULT _stdcall title([in] BSTR p );
    [
    propget, 
    id(0x000003F4)
    ]
    HRESULT _stdcall title([out, retval] BSTR * p );
    [
    propget, 
    id(0x000003F5)
    ]
    HRESULT _stdcall scripts([out, retval] IHTMLElementCollection ** p  );
    [
    propput, 
    id(0x000003F6), 
    hidden
    ]
    HRESULT _stdcall designMode([in] BSTR p );
    [
    propget, 
    id(0x000003F6), 
    hidden
    ]
    HRESULT _stdcall designMode([out, retval] BSTR * p );
    [
    propget, 
    id(0x000003F9)
    ]
    HRESULT _stdcall selection([out, retval] IHTMLSelectionObject ** p  );
    [
    propget, 
    id(0x000003FA), 
    bindable
    ]
    HRESULT _stdcall readyState([out, retval] BSTR * p );
    [
    propget, 
    id(0x000003FB)
    ]
    HRESULT _stdcall frames([out, retval] IHTMLFramesCollection2 ** p  );
    [
    propget, 
    id(0x000003F7)
    ]
    HRESULT _stdcall embeds([out, retval] IHTMLElementCollection ** p  );
    [
    propget, 
    id(0x000003FD)
    ]
    HRESULT _stdcall plugins([out, retval] IHTMLElementCollection ** p  );
    [
    propput, 
    id(0x000003FE)
    ]
    HRESULT _stdcall alinkColor([in] VARIANT p );
    [
    propget, 
    id(0x000003FE)
    ]
    HRESULT _stdcall alinkColor([out, retval] VARIANT * p );
    [
    propput, 
    id(0xFFFFFE0B)
    ]
    HRESULT _stdcall bgColor([in] VARIANT p );
    [
    propget, 
    id(0xFFFFFE0B)
    ]
    HRESULT _stdcall bgColor([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001138A)
    ]
    HRESULT _stdcall fgColor([in] VARIANT p );
    [
    propget, 
    id(0x8001138A)
    ]
    HRESULT _stdcall fgColor([out, retval] VARIANT * p );
    [
    propput, 
    id(0x00000400)
    ]
    HRESULT _stdcall linkColor([in] VARIANT p );
    [
    propget, 
    id(0x00000400)
    ]
    HRESULT _stdcall linkColor([out, retval] VARIANT * p );
    [
    propput, 
    id(0x000003FF)
    ]
    HRESULT _stdcall vlinkColor([in] VARIANT p );
    [
    propget, 
    id(0x000003FF)
    ]
    HRESULT _stdcall vlinkColor([out, retval] VARIANT * p );
    [
    propget, 
    id(0x00000403)
    ]
    HRESULT _stdcall referrer([out, retval] BSTR * p );
    [
    propget, 
    id(0x00000402)
    ]
    HRESULT _stdcall location([out, retval] IHTMLLocation ** p  );
    [
    propget, 
    id(0x00000404)
    ]
    HRESULT _stdcall lastModified([out, retval] BSTR * p );
    [
    propput, 
    id(0x00000401)
    ]
    HRESULT _stdcall url([in] BSTR p );
    [
    propget, 
    id(0x00000401)
    ]
    HRESULT _stdcall url([out, retval] BSTR * p );
    [
    propput, 
    id(0x00000405)
    ]
    HRESULT _stdcall domain([in] BSTR p );
    [
    propget, 
    id(0x00000405)
    ]
    HRESULT _stdcall domain([out, retval] BSTR * p );
    [
    propput, 
    id(0x00000406)
    ]
    HRESULT _stdcall cookie([in] BSTR p );
    [
    propget, 
    id(0x00000406)
    ]
    HRESULT _stdcall cookie([out, retval] BSTR * p );
    [
    propput, 
    id(0x00000407), 
    bindable, 
    hidden
    ]
    HRESULT _stdcall expando([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x00000407), 
    bindable, 
    hidden
    ]
    HRESULT _stdcall expando([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x00000408), 
    hidden
    ]
    HRESULT _stdcall charset([in] BSTR p );
    [
    propget, 
    id(0x00000408), 
    hidden
    ]
    HRESULT _stdcall charset([out, retval] BSTR * p );
    [
    propput, 
    id(0x00000409)
    ]
    HRESULT _stdcall defaultCharset([in] BSTR p );
    [
    propget, 
    id(0x00000409)
    ]
    HRESULT _stdcall defaultCharset([out, retval] BSTR * p );
    [
    propget, 
    id(0x00000411)
    ]
    HRESULT _stdcall mimeType([out, retval] BSTR * p );
    [
    propget, 
    id(0x00000412)
    ]
    HRESULT _stdcall fileSize([out, retval] BSTR * p );
    [
    propget, 
    id(0x00000413)
    ]
    HRESULT _stdcall fileCreatedDate([out, retval] BSTR * p );
    [
    propget, 
    id(0x00000414)
    ]
    HRESULT _stdcall fileModifiedDate([out, retval] BSTR * p );
    [
    propget, 
    id(0x00000415)
    ]
    HRESULT _stdcall fileUpdatedDate([out, retval] BSTR * p );
    [
    propget, 
    id(0x00000416)
    ]
    HRESULT _stdcall security([out, retval] BSTR * p );
    [
    propget, 
    id(0x00000417)
    ]
    HRESULT _stdcall protocol([out, retval] BSTR * p );
    [
    propget, 
    id(0x00000418)
    ]
    HRESULT _stdcall nameProp([out, retval] BSTR * p );
    [
    id(0x0000041E), 
    vararg
    ]
    HRESULT _stdcall write([in] SAFEARRAY(VARIANT) psarray );
    [
    id(0x0000041F), 
    vararg
    ]
    HRESULT _stdcall writeln([in] SAFEARRAY(VARIANT) psarray );
    [
    id(0x00000420)
    ]
    HRESULT _stdcall open([in, optional, defaultvalue("text/html")] BSTR url, [in, optional] VARIANT name, [in, optional] VARIANT features, [in, optional] VARIANT replace, [out, retval]  IDispatch ** pomWindowResult );
    [
    id(0x00000421)
    ]
    HRESULT _stdcall close( void );
    [
    id(0x00000422)
    ]
    HRESULT _stdcall clear( void );
    [
    id(0x00000423)
    ]
    HRESULT _stdcall queryCommandSupported([in] BSTR cmdID, [out, retval] VARIANT_BOOL * pfRet );
    [
    id(0x00000424)
    ]
    HRESULT _stdcall queryCommandEnabled([in] BSTR cmdID, [out, retval] VARIANT_BOOL * pfRet );
    [
    id(0x00000425)
    ]
    HRESULT _stdcall queryCommandState([in] BSTR cmdID, [out, retval] VARIANT_BOOL * pfRet );
    [
    id(0x00000426)
    ]
    HRESULT _stdcall queryCommandIndeterm([in] BSTR cmdID, [out, retval] VARIANT_BOOL * pfRet );
    [
    id(0x00000427)
    ]
    HRESULT _stdcall queryCommandText([in] BSTR cmdID, [out, retval] BSTR * pcmdText );
    [
    id(0x00000428)
    ]
    HRESULT _stdcall queryCommandValue([in] BSTR cmdID, [out, retval] VARIANT * pcmdValue );
    [
    id(0x00000429)
    ]
    HRESULT _stdcall execCommand([in] BSTR cmdID, [in, optional, defaultvalue(False)] VARIANT_BOOL showUI, [in, optional] VARIANT value, [out, retval] VARIANT_BOOL * pfRet );
    [
    id(0x0000042A)
    ]
    HRESULT _stdcall execCommandShowHelp([in] BSTR cmdID, [out, retval] VARIANT_BOOL * pfRet );
    [
    id(0x0000042B)
    ]
    HRESULT _stdcall createElement([in] BSTR eTag, [out, retval] IHTMLElement ** newElem  );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onhelp([in] VARIANT p );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onhelp([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onclick([in] VARIANT p );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onclick([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall ondblclick([in] VARIANT p );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall ondblclick([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onkeyup([in] VARIANT p );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onkeyup([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onkeydown([in] VARIANT p );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onkeydown([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onkeypress([in] VARIANT p );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onkeypress([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onmouseup([in] VARIANT p );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onmouseup([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onmousedown([in] VARIANT p );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onmousedown([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onmousemove([in] VARIANT p );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onmousemove([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onmouseout([in] VARIANT p );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onmouseout([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onmouseover([in] VARIANT p );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onmouseover([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onreadystatechange([in] VARIANT p );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onreadystatechange([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onafterupdate([in] VARIANT p );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onafterupdate([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onrowexit([in] VARIANT p );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onrowexit([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onrowenter([in] VARIANT p );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onrowenter([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall ondragstart([in] VARIANT p );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall ondragstart([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onselectstart([in] VARIANT p );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onselectstart([out, retval] VARIANT * p );
    [
    id(0x0000042C)
    ]
    HRESULT _stdcall elementFromPoint([in] long x, [in] long y, [out, retval] IHTMLElement ** elementHit  );
    [
    propget, 
    id(0x0000040A)
    ]
    HRESULT _stdcall parentWindow([out, retval] IHTMLWindow2 ** p  );
    [
    propget, 
    id(0x0000042D)
    ]
    HRESULT _stdcall styleSheets([out, retval] IHTMLStyleSheetsCollection ** p  );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onbeforeupdate([in] VARIANT p );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onbeforeupdate([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onerrorupdate([in] VARIANT p );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onerrorupdate([out, retval] VARIANT * p );
    [
    id(0x0000042E)
    ]
    HRESULT _stdcall toString([out, retval] BSTR * String );
    [
    id(0x0000042F)
    ]
    HRESULT _stdcall createStyleSheet([in, optional, defaultvalue("")] BSTR bstrHref, [in, optional, defaultvalue(-1)] long lIndex, [out, retval] IHTMLStyleSheet ** ppnewStyleSheet  );
  };

  [
    uuid(332C4426-26CB-11D0-B483-00C04FD90119), 
    dual, 
    oleautomation
  ]
   interface IHTMLFramesCollection2: IDispatch
  {
    [
    id(0x00000000)
    ]
    HRESULT _stdcall item([in] VARIANT * pvarIndex, [out, retval] VARIANT * pvarResult );
    [
    propget, 
    id(0x000003E9)
    ]
    HRESULT _stdcall length([out, retval] long * p );
  };

  [
    uuid(332C4427-26CB-11D0-B483-00C04FD90119), 
    dual, 
    oleautomation
  ]
   interface IHTMLWindow2: IHTMLFramesCollection2
  {
    [
    propget, 
    id(0x0000044C)
    ]
    HRESULT _stdcall frames([out, retval] IHTMLFramesCollection2 ** p  );
    [
    propput, 
    id(0x0000044D)
    ]
    HRESULT _stdcall defaultStatus([in] BSTR p );
    [
    propget, 
    id(0x0000044D)
    ]
    HRESULT _stdcall defaultStatus([out, retval] BSTR * p );
    [
    propput, 
    id(0x0000044E)
    ]
    HRESULT _stdcall status([in] BSTR p );
    [
    propget, 
    id(0x0000044E)
    ]
    HRESULT _stdcall status([out, retval] BSTR * p );
    [
    id(0x00000494)
    ]
    HRESULT _stdcall setTimeout([in] BSTR expression, [in] long msec, [in, optional] VARIANT * language, [out, retval] long * timerID );
    [
    id(0x00000450)
    ]
    HRESULT _stdcall clearTimeout([in] long timerID );
    [
    id(0x00000451)
    ]
    HRESULT _stdcall alert([in, optional, defaultvalue("")] BSTR message );
    [
    id(0x00000456)
    ]
    HRESULT _stdcall confirm([in, optional, defaultvalue("")] BSTR message, [out, retval] VARIANT_BOOL * confirmed );
    [
    id(0x00000457)
    ]
    HRESULT _stdcall prompt([in, optional, defaultvalue("")] BSTR message, [in, optional, defaultvalue("undefined")] BSTR defstr, [out, retval] VARIANT * textdata );
    [
    propget, 
    id(0x00000465)
    ]
    HRESULT _stdcall Image([out, retval] IHTMLImageElementFactory ** p  );
    [
    propget, 
    id(0x0000000E)
    ]
    HRESULT _stdcall location([out, retval] IHTMLLocation ** p  );
    [
    propget, 
    id(0x00000002)
    ]
    HRESULT _stdcall history([out, retval] IOmHistory ** p  );
    [
    id(0x00000003)
    ]
    HRESULT _stdcall close( void );
    [
    propput, 
    id(0x00000004)
    ]
    HRESULT _stdcall opener([in] VARIANT p );
    [
    propget, 
    id(0x00000004)
    ]
    HRESULT _stdcall opener([out, retval] VARIANT * p );
    [
    propget, 
    id(0x00000005)
    ]
    HRESULT _stdcall navigator([out, retval] IOmNavigator ** p  );
    [
    propput, 
    id(0x0000000B)
    ]
    HRESULT _stdcall name([in] BSTR p );
    [
    propget, 
    id(0x0000000B)
    ]
    HRESULT _stdcall name([out, retval] BSTR * p );
    [
    propget, 
    id(0x0000000C)
    ]
    HRESULT _stdcall parent([out, retval] IHTMLWindow2 ** p  );
    [
    id(0x0000000D)
    ]
    HRESULT _stdcall open([in, optional, defaultvalue("")] BSTR url, [in, optional, defaultvalue("")] BSTR name, [in, optional, defaultvalue("")] BSTR features, [in, optional, defaultvalue(False)] VARIANT_BOOL replace, [out, retval] IHTMLWindow2 ** pomWindowResult  );
    [
    propget, 
    id(0x00000014)
    ]
    HRESULT _stdcall self([out, retval] IHTMLWindow2 ** p  );
    [
    propget, 
    id(0x00000015)
    ]
    HRESULT _stdcall top([out, retval] IHTMLWindow2 ** p  );
    [
    propget, 
    id(0x00000016)
    ]
    HRESULT _stdcall window([out, retval] IHTMLWindow2 ** p  );
    [
    id(0x00000019)
    ]
    HRESULT _stdcall navigate([in] BSTR url );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onfocus([in] VARIANT p );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onfocus([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onblur([in] VARIANT p );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onblur([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011790), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onload([in] VARIANT p );
    [
    propget, 
    id(0x80011790), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onload([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011797), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onbeforeunload([in] VARIANT p );
    [
    propget, 
    id(0x80011797), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onbeforeunload([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011791), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onunload([in] VARIANT p );
    [
    propget, 
    id(0x80011791), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onunload([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onhelp([in] VARIANT p );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onhelp([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001178D), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onerror([in] VARIANT p );
    [
    propget, 
    id(0x8001178D), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onerror([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onresize([in] VARIANT p );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onresize([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onscroll([in] VARIANT p );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onscroll([out, retval] VARIANT * p );
    [
    propget, 
    id(0x0000047F), 
    source
    ]
    HRESULT _stdcall document([out, retval] IHTMLDocument2 ** p  );
    [
    propget, 
    id(0x00000480)
    ]
    HRESULT _stdcall event([out, retval] IHTMLEventObj ** p  );
    [
    propget, 
    id(0x00000481), 
    restricted, 
    hidden
    ]
    HRESULT _stdcall _newEnum([out, retval]  IUnknown ** p );
    [
    id(0x00000482)
    ]
    HRESULT _stdcall showModalDialog([in] BSTR dialog, [in, optional] VARIANT * varArgIn, [in, optional] VARIANT * varOptions, [out, retval] VARIANT * varArgOut );
    [
    id(0x00000483)
    ]
    HRESULT _stdcall showHelp([in] BSTR helpURL, [in, optional] VARIANT helpArg, [in, optional, defaultvalue("")] BSTR features );
    [
    propget, 
    id(0x00000484)
    ]
    HRESULT _stdcall screen([out, retval] IHTMLScreen ** p  );
    [
    propget, 
    id(0x00000485)
    ]
    HRESULT _stdcall Option([out, retval] IHTMLOptionElementFactory ** p  );
    [
    id(0x00000486)
    ]
    HRESULT _stdcall focus( void );
    [
    propget, 
    id(0x00000017)
    ]
    HRESULT _stdcall closed([out, retval] VARIANT_BOOL * p );
    [
    id(0x00000487)
    ]
    HRESULT _stdcall blur( void );
    [
    id(0x00000488)
    ]
    HRESULT _stdcall scroll([in] long x, [in] long y );
    [
    propget, 
    id(0x00000489)
    ]
    HRESULT _stdcall clientInformation([out, retval] IOmNavigator ** p  );
    [
    id(0x00000495)
    ]
    HRESULT _stdcall setInterval([in] BSTR expression, [in] long msec, [in, optional] VARIANT * language, [out, retval] long * timerID );
    [
    id(0x0000048B)
    ]
    HRESULT _stdcall clearInterval([in] long timerID );
    [
    propput, 
    id(0x0000048C)
    ]
    HRESULT _stdcall offscreenBuffering([in] VARIANT p );
    [
    propget, 
    id(0x0000048C)
    ]
    HRESULT _stdcall offscreenBuffering([out, retval] VARIANT * p );
    [
    id(0x0000048D)
    ]
    HRESULT _stdcall execScript([in] BSTR code, [in, optional, defaultvalue("JScript")] BSTR language, [out, retval] VARIANT * pvarRet );
    [
    id(0x0000048E)
    ]
    HRESULT _stdcall toString([out, retval] BSTR * String );
    [
    id(0x0000048F)
    ]
    HRESULT _stdcall scrollBy([in] long x, [in] long y );
    [
    id(0x00000490)
    ]
    HRESULT _stdcall scrollTo([in] long x, [in] long y );
    [
    id(0x00000006)
    ]
    HRESULT _stdcall moveTo([in] long x, [in] long y );
    [
    id(0x00000007)
    ]
    HRESULT _stdcall moveBy([in] long x, [in] long y );
    [
    id(0x00000009)
    ]
    HRESULT _stdcall resizeTo([in] long x, [in] long y );
    [
    id(0x00000008)
    ]
    HRESULT _stdcall resizeBy([in] long x, [in] long y );
    [
    propget, 
    id(0x00000491)
    ]
    HRESULT _stdcall external([out, retval]  IDispatch ** p );
  };

  [
    uuid(3050F4AE-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLWindow3: IDispatch
  {
    [
    propget, 
    id(0x00000492)
    ]
    HRESULT _stdcall screenLeft([out, retval] long * p );
    [
    propget, 
    id(0x00000493)
    ]
    HRESULT _stdcall screenTop([out, retval] long * p );
    [
    id(0x800101FB)
    ]
    HRESULT _stdcall attachEvent([in] BSTR event, [in]  IDispatch * pdisp, [out, retval] VARIANT_BOOL * pfResult );
    [
    id(0x800101FC)
    ]
    HRESULT _stdcall detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x0000044F)
    ]
    HRESULT _stdcall setTimeout([in] VARIANT * expression, [in] long msec, [in, optional] VARIANT * language, [out, retval] long * timerID );
    [
    id(0x0000048A)
    ]
    HRESULT _stdcall setInterval([in] VARIANT * expression, [in] long msec, [in, optional] VARIANT * language, [out, retval] long * timerID );
    [
    id(0x00000496)
    ]
    HRESULT _stdcall print( void );
    [
    propput, 
    id(0x800117B2), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onbeforeprint([in] VARIANT p );
    [
    propget, 
    id(0x800117B2), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onbeforeprint([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800117B3), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onafterprint([in] VARIANT p );
    [
    propget, 
    id(0x800117B3), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onafterprint([out, retval] VARIANT * p );
    [
    propget, 
    id(0x00000497)
    ]
    HRESULT _stdcall clipboardData([out, retval] IHTMLDataTransfer ** p  );
    [
    id(0x00000498)
    ]
    HRESULT _stdcall showModelessDialog([in, optional, defaultvalue("")] BSTR url, [in, optional] VARIANT * varArgIn, [in, optional] VARIANT * options, [out, retval] IHTMLWindow2 ** pDialog  );
  };

  [
    uuid(3050F6CF-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLWindow4: IDispatch
  {
    [
    id(0x0000049C)
    ]
    HRESULT _stdcall createPopup([in, optional] VARIANT * varArgIn, [out, retval]  IDispatch ** ppPopup );
    [
    propget, 
    id(0x0000049D)
    ]
    HRESULT _stdcall frameElement([out, retval] IHTMLFrameBase ** p  );
  };

  [
    uuid(3050F55D-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLWindow2
  {
    properties:
    methods:
    [
    id(0x00000000)
    ]
    VARIANT item([in] VARIANT * pvarIndex );
    [
    propget, 
    id(0x000003E9)
    ]
    long length( void );
    [
    propget, 
    id(0x0000044C)
    ]
    IHTMLFramesCollection2 * frames( void );
    [
    propput, 
    id(0x0000044D)
    ]
    void defaultStatus(BSTR Param1 );
    [
    propget, 
    id(0x0000044D)
    ]
    BSTR defaultStatus( void );
    [
    propput, 
    id(0x0000044E)
    ]
    void status(BSTR Param1 );
    [
    propget, 
    id(0x0000044E)
    ]
    BSTR status( void );
    [
    id(0x00000450)
    ]
    void clearTimeout([in] long timerID );
    [
    id(0x00000451)
    ]
    void alert([in, optional, defaultvalue("")] BSTR message );
    [
    id(0x00000456)
    ]
    VARIANT_BOOL confirm([in, optional, defaultvalue("")] BSTR message );
    [
    id(0x00000457)
    ]
    VARIANT prompt([in, optional, defaultvalue("")] BSTR message, [in, optional, defaultvalue("undefined")] BSTR defstr );
    [
    propget, 
    id(0x00000465)
    ]
    IHTMLImageElementFactory * Image( void );
    [
    propget, 
    id(0x0000000E)
    ]
    IHTMLLocation * location( void );
    [
    propget, 
    id(0x00000002)
    ]
    IOmHistory * history( void );
    [
    id(0x00000003)
    ]
    void close( void );
    [
    propput, 
    id(0x00000004)
    ]
    void opener(VARIANT Param1 );
    [
    propget, 
    id(0x00000004)
    ]
    VARIANT opener( void );
    [
    propget, 
    id(0x00000005)
    ]
    IOmNavigator * navigator( void );
    [
    propput, 
    id(0x0000000B)
    ]
    void name(BSTR Param1 );
    [
    propget, 
    id(0x0000000B)
    ]
    BSTR name( void );
    [
    propget, 
    id(0x0000000C)
    ]
    IHTMLWindow2 * parent( void );
    [
    id(0x0000000D)
    ]
    IHTMLWindow2 * open([in, optional, defaultvalue("")] BSTR url, [in, optional, defaultvalue("")] BSTR name, [in, optional, defaultvalue("")] BSTR features, [in, optional, defaultvalue(False)] VARIANT_BOOL replace );
    [
    propget, 
    id(0x00000014)
    ]
    IHTMLWindow2 * self( void );
    [
    propget, 
    id(0x00000015)
    ]
    IHTMLWindow2 * top( void );
    [
    propget, 
    id(0x00000016)
    ]
    IHTMLWindow2 * window( void );
    [
    id(0x00000019)
    ]
    void navigate([in] BSTR url );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x80011790), 
    bindable, 
    displaybind
    ]
    void onload(VARIANT Param1 );
    [
    propget, 
    id(0x80011790), 
    bindable, 
    displaybind
    ]
    VARIANT onload( void );
    [
    propput, 
    id(0x80011797), 
    bindable, 
    displaybind
    ]
    void onbeforeunload(VARIANT Param1 );
    [
    propget, 
    id(0x80011797), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeunload( void );
    [
    propput, 
    id(0x80011791), 
    bindable, 
    displaybind
    ]
    void onunload(VARIANT Param1 );
    [
    propget, 
    id(0x80011791), 
    bindable, 
    displaybind
    ]
    VARIANT onunload( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x8001178D), 
    bindable, 
    displaybind
    ]
    void onerror(VARIANT Param1 );
    [
    propget, 
    id(0x8001178D), 
    bindable, 
    displaybind
    ]
    VARIANT onerror( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propget, 
    id(0x0000047F), 
    source
    ]
    IHTMLDocument2 * document( void );
    [
    propget, 
    id(0x00000480)
    ]
    IHTMLEventObj * event( void );
    [
    propget, 
    id(0x00000481), 
    restricted, 
    hidden
    ]
     IUnknown * _newEnum( void );
    [
    id(0x00000482)
    ]
    VARIANT showModalDialog([in] BSTR dialog, [in, optional] VARIANT * varArgIn, [in, optional] VARIANT * varOptions );
    [
    id(0x00000483)
    ]
    void showHelp([in] BSTR helpURL, [in, optional] VARIANT helpArg, [in, optional, defaultvalue("")] BSTR features );
    [
    propget, 
    id(0x00000484)
    ]
    IHTMLScreen * screen( void );
    [
    propget, 
    id(0x00000485)
    ]
    IHTMLOptionElementFactory * Option( void );
    [
    id(0x00000486)
    ]
    void focus( void );
    [
    propget, 
    id(0x00000017)
    ]
    VARIANT_BOOL closed( void );
    [
    id(0x00000487)
    ]
    void blur( void );
    [
    id(0x00000488)
    ]
    void scroll([in] long x, [in] long y );
    [
    propget, 
    id(0x00000489)
    ]
    IOmNavigator * clientInformation( void );
    [
    id(0x0000048B)
    ]
    void clearInterval([in] long timerID );
    [
    propput, 
    id(0x0000048C)
    ]
    void offscreenBuffering(VARIANT Param1 );
    [
    propget, 
    id(0x0000048C)
    ]
    VARIANT offscreenBuffering( void );
    [
    id(0x0000048D)
    ]
    VARIANT execScript([in] BSTR code, [in, optional, defaultvalue("JScript")] BSTR language );
    [
    id(0x0000048E)
    ]
    BSTR toString( void );
    [
    id(0x0000048F)
    ]
    void scrollBy([in] long x, [in] long y );
    [
    id(0x00000490)
    ]
    void scrollTo([in] long x, [in] long y );
    [
    id(0x00000006)
    ]
    void moveTo([in] long x, [in] long y );
    [
    id(0x00000007)
    ]
    void moveBy([in] long x, [in] long y );
    [
    id(0x00000009)
    ]
    void resizeTo([in] long x, [in] long y );
    [
    id(0x00000008)
    ]
    void resizeBy([in] long x, [in] long y );
    [
    propget, 
    id(0x00000491)
    ]
     IDispatch * external( void );
    [
    propget, 
    id(0x00000492)
    ]
    long screenLeft( void );
    [
    propget, 
    id(0x00000493)
    ]
    long screenTop( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x0000044F)
    ]
    long setTimeout([in] VARIANT * expression, [in] long msec, [in, optional] VARIANT * language );
    [
    id(0x0000048A)
    ]
    long setInterval([in] VARIANT * expression, [in] long msec, [in, optional] VARIANT * language );
    [
    id(0x00000496)
    ]
    void print( void );
    [
    propput, 
    id(0x800117B2), 
    bindable, 
    displaybind
    ]
    void onbeforeprint(VARIANT Param1 );
    [
    propget, 
    id(0x800117B2), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeprint( void );
    [
    propput, 
    id(0x800117B3), 
    bindable, 
    displaybind
    ]
    void onafterprint(VARIANT Param1 );
    [
    propget, 
    id(0x800117B3), 
    bindable, 
    displaybind
    ]
    VARIANT onafterprint( void );
    [
    propget, 
    id(0x00000497)
    ]
    IHTMLDataTransfer * clipboardData( void );
    [
    id(0x00000498)
    ]
    IHTMLWindow2 * showModelessDialog([in, optional, defaultvalue("")] BSTR url, [in, optional] VARIANT * varArgIn, [in, optional] VARIANT * options );
    [
    id(0x0000049C)
    ]
     IDispatch * createPopup([in, optional] VARIANT * varArgIn );
    [
    propget, 
    id(0x0000049D)
    ]
    IHTMLFrameBase * frameElement( void );
  };

  [
    uuid(3050F55E-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLWindowProxy
  {
    properties:
    methods:
    [
    id(0x00000000)
    ]
    VARIANT item([in] VARIANT * pvarIndex );
    [
    propget, 
    id(0x000003E9)
    ]
    long length( void );
    [
    propget, 
    id(0x0000044C)
    ]
    IHTMLFramesCollection2 * frames( void );
    [
    propput, 
    id(0x0000044D)
    ]
    void defaultStatus(BSTR Param1 );
    [
    propget, 
    id(0x0000044D)
    ]
    BSTR defaultStatus( void );
    [
    propput, 
    id(0x0000044E)
    ]
    void status(BSTR Param1 );
    [
    propget, 
    id(0x0000044E)
    ]
    BSTR status( void );
    [
    id(0x00000450)
    ]
    void clearTimeout([in] long timerID );
    [
    id(0x00000451)
    ]
    void alert([in, optional, defaultvalue("")] BSTR message );
    [
    id(0x00000456)
    ]
    VARIANT_BOOL confirm([in, optional, defaultvalue("")] BSTR message );
    [
    id(0x00000457)
    ]
    VARIANT prompt([in, optional, defaultvalue("")] BSTR message, [in, optional, defaultvalue("undefined")] BSTR defstr );
    [
    propget, 
    id(0x00000465)
    ]
    IHTMLImageElementFactory * Image( void );
    [
    propget, 
    id(0x0000000E)
    ]
    IHTMLLocation * location( void );
    [
    propget, 
    id(0x00000002)
    ]
    IOmHistory * history( void );
    [
    id(0x00000003)
    ]
    void close( void );
    [
    propput, 
    id(0x00000004)
    ]
    void opener(VARIANT Param1 );
    [
    propget, 
    id(0x00000004)
    ]
    VARIANT opener( void );
    [
    propget, 
    id(0x00000005)
    ]
    IOmNavigator * navigator( void );
    [
    propput, 
    id(0x0000000B)
    ]
    void name(BSTR Param1 );
    [
    propget, 
    id(0x0000000B)
    ]
    BSTR name( void );
    [
    propget, 
    id(0x0000000C)
    ]
    IHTMLWindow2 * parent( void );
    [
    id(0x0000000D)
    ]
    IHTMLWindow2 * open([in, optional, defaultvalue("")] BSTR url, [in, optional, defaultvalue("")] BSTR name, [in, optional, defaultvalue("")] BSTR features, [in, optional, defaultvalue(False)] VARIANT_BOOL replace );
    [
    propget, 
    id(0x00000014)
    ]
    IHTMLWindow2 * self( void );
    [
    propget, 
    id(0x00000015)
    ]
    IHTMLWindow2 * top( void );
    [
    propget, 
    id(0x00000016)
    ]
    IHTMLWindow2 * window( void );
    [
    id(0x00000019)
    ]
    void navigate([in] BSTR url );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x80011790), 
    bindable, 
    displaybind
    ]
    void onload(VARIANT Param1 );
    [
    propget, 
    id(0x80011790), 
    bindable, 
    displaybind
    ]
    VARIANT onload( void );
    [
    propput, 
    id(0x80011797), 
    bindable, 
    displaybind
    ]
    void onbeforeunload(VARIANT Param1 );
    [
    propget, 
    id(0x80011797), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeunload( void );
    [
    propput, 
    id(0x80011791), 
    bindable, 
    displaybind
    ]
    void onunload(VARIANT Param1 );
    [
    propget, 
    id(0x80011791), 
    bindable, 
    displaybind
    ]
    VARIANT onunload( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x8001178D), 
    bindable, 
    displaybind
    ]
    void onerror(VARIANT Param1 );
    [
    propget, 
    id(0x8001178D), 
    bindable, 
    displaybind
    ]
    VARIANT onerror( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propget, 
    id(0x0000047F), 
    source
    ]
    IHTMLDocument2 * document( void );
    [
    propget, 
    id(0x00000480)
    ]
    IHTMLEventObj * event( void );
    [
    propget, 
    id(0x00000481), 
    restricted, 
    hidden
    ]
     IUnknown * _newEnum( void );
    [
    id(0x00000482)
    ]
    VARIANT showModalDialog([in] BSTR dialog, [in, optional] VARIANT * varArgIn, [in, optional] VARIANT * varOptions );
    [
    id(0x00000483)
    ]
    void showHelp([in] BSTR helpURL, [in, optional] VARIANT helpArg, [in, optional, defaultvalue("")] BSTR features );
    [
    propget, 
    id(0x00000484)
    ]
    IHTMLScreen * screen( void );
    [
    propget, 
    id(0x00000485)
    ]
    IHTMLOptionElementFactory * Option( void );
    [
    id(0x00000486)
    ]
    void focus( void );
    [
    propget, 
    id(0x00000017)
    ]
    VARIANT_BOOL closed( void );
    [
    id(0x00000487)
    ]
    void blur( void );
    [
    id(0x00000488)
    ]
    void scroll([in] long x, [in] long y );
    [
    propget, 
    id(0x00000489)
    ]
    IOmNavigator * clientInformation( void );
    [
    id(0x0000048B)
    ]
    void clearInterval([in] long timerID );
    [
    propput, 
    id(0x0000048C)
    ]
    void offscreenBuffering(VARIANT Param1 );
    [
    propget, 
    id(0x0000048C)
    ]
    VARIANT offscreenBuffering( void );
    [
    id(0x0000048D)
    ]
    VARIANT execScript([in] BSTR code, [in, optional, defaultvalue("JScript")] BSTR language );
    [
    id(0x0000048E)
    ]
    BSTR toString( void );
    [
    id(0x0000048F)
    ]
    void scrollBy([in] long x, [in] long y );
    [
    id(0x00000490)
    ]
    void scrollTo([in] long x, [in] long y );
    [
    id(0x00000006)
    ]
    void moveTo([in] long x, [in] long y );
    [
    id(0x00000007)
    ]
    void moveBy([in] long x, [in] long y );
    [
    id(0x00000009)
    ]
    void resizeTo([in] long x, [in] long y );
    [
    id(0x00000008)
    ]
    void resizeBy([in] long x, [in] long y );
    [
    propget, 
    id(0x00000491)
    ]
     IDispatch * external( void );
    [
    propget, 
    id(0x00000492)
    ]
    long screenLeft( void );
    [
    propget, 
    id(0x00000493)
    ]
    long screenTop( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x0000044F)
    ]
    long setTimeout([in] VARIANT * expression, [in] long msec, [in, optional] VARIANT * language );
    [
    id(0x0000048A)
    ]
    long setInterval([in] VARIANT * expression, [in] long msec, [in, optional] VARIANT * language );
    [
    id(0x00000496)
    ]
    void print( void );
    [
    propput, 
    id(0x800117B2), 
    bindable, 
    displaybind
    ]
    void onbeforeprint(VARIANT Param1 );
    [
    propget, 
    id(0x800117B2), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeprint( void );
    [
    propput, 
    id(0x800117B3), 
    bindable, 
    displaybind
    ]
    void onafterprint(VARIANT Param1 );
    [
    propget, 
    id(0x800117B3), 
    bindable, 
    displaybind
    ]
    VARIANT onafterprint( void );
    [
    propget, 
    id(0x00000497)
    ]
    IHTMLDataTransfer * clipboardData( void );
    [
    id(0x00000498)
    ]
    IHTMLWindow2 * showModelessDialog([in, optional, defaultvalue("")] BSTR url, [in, optional] VARIANT * varArgIn, [in, optional] VARIANT * options );
    [
    id(0x0000049C)
    ]
     IDispatch * createPopup([in, optional] VARIANT * varArgIn );
    [
    propget, 
    id(0x0000049D)
    ]
    IHTMLFrameBase * frameElement( void );
  };

  [
    uuid(3050F613-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface HTMLDocumentEvents2
  {
    properties:
    methods:
    [
    id(0x8001000A)
    ]
    VARIANT_BOOL onhelp([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA8)
    ]
    VARIANT_BOOL onclick([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA7)
    ]
    VARIANT_BOOL ondblclick([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA6)
    ]
    void onkeydown([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA4)
    ]
    void onkeyup([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA5)
    ]
    VARIANT_BOOL onkeypress([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA3)
    ]
    void onmousedown([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA2)
    ]
    void onmousemove([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA1)
    ]
    void onmouseup([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010009)
    ]
    void onmouseout([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010008)
    ]
    void onmouseover([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFD9F)
    ]
    void onreadystatechange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010004)
    ]
    VARIANT_BOOL onbeforeupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010005)
    ]
    void onafterupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010006)
    ]
    VARIANT_BOOL onrowexit([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010007)
    ]
    void onrowenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000B)
    ]
    VARIANT_BOOL ondragstart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000C)
    ]
    VARIANT_BOOL onselectstart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000D)
    ]
    VARIANT_BOOL onerrorupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003FF)
    ]
    VARIANT_BOOL oncontextmenu([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000402)
    ]
    VARIANT_BOOL onstop([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010020)
    ]
    void onrowsdelete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010021)
    ]
    void onrowsinserted([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010022)
    ]
    void oncellchange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010013)
    ]
    void onpropertychange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000E)
    ]
    void ondatasetchanged([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000F)
    ]
    void ondataavailable([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010010)
    ]
    void ondatasetcomplete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000403)
    ]
    void onbeforeeditfocus([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040D)
    ]
    void onselectionchange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040C)
    ]
    VARIANT_BOOL oncontrolselect([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000409)
    ]
    VARIANT_BOOL onmousewheel([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000418)
    ]
    void onfocusin([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000419)
    ]
    void onfocusout([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000414)
    ]
    void onactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000415)
    ]
    void ondeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000417)
    ]
    VARIANT_BOOL onbeforeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040A)
    ]
    VARIANT_BOOL onbeforedeactivate([in] IHTMLEventObj * pEvtObj  );
  };

  [
    uuid(3050F485-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLDocument3: IDispatch
  {
    [
    id(0x00000430)
    ]
    HRESULT _stdcall releaseCapture( void );
    [
    id(0x00000431)
    ]
    HRESULT _stdcall recalc([in, optional, defaultvalue(False)] VARIANT_BOOL fForce );
    [
    id(0x00000432)
    ]
    HRESULT _stdcall createTextNode([in] BSTR text, [out, retval] IHTMLDOMNode ** newTextNode  );
    [
    propget, 
    id(0x00000433)
    ]
    HRESULT _stdcall documentElement([out, retval] IHTMLElement ** p  );
    [
    propget, 
    id(0x00000435), 
    hidden
    ]
    HRESULT _stdcall uniqueID([out, retval] BSTR * p );
    [
    id(0x800101FB)
    ]
    HRESULT _stdcall attachEvent([in] BSTR event, [in]  IDispatch * pdisp, [out, retval] VARIANT_BOOL * pfResult );
    [
    id(0x800101FC)
    ]
    HRESULT _stdcall detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onrowsdelete([in] VARIANT p );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onrowsdelete([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onrowsinserted([in] VARIANT p );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onrowsinserted([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall oncellchange([in] VARIANT p );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall oncellchange([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall ondatasetchanged([in] VARIANT p );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall ondatasetchanged([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall ondataavailable([in] VARIANT p );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall ondataavailable([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall ondatasetcomplete([in] VARIANT p );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall ondatasetcomplete([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onpropertychange([in] VARIANT p );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onpropertychange([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113FD)
    ]
    HRESULT _stdcall dir([in] BSTR p );
    [
    propget, 
    id(0x800113FD)
    ]
    HRESULT _stdcall dir([out, retval] BSTR * p );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall oncontextmenu([in] VARIANT p );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall oncontextmenu([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800117B4), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onstop([in] VARIANT p );
    [
    propget, 
    id(0x800117B4), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onstop([out, retval] VARIANT * p );
    [
    id(0x00000434)
    ]
    HRESULT _stdcall createDocumentFragment([out, retval] IHTMLDocument2 ** pNewDoc  );
    [
    propget, 
    id(0x00000436), 
    restricted, 
    hidden
    ]
    HRESULT _stdcall parentDocument([out, retval] IHTMLDocument2 ** p  );
    [
    propput, 
    id(0x00000437), 
    restricted, 
    hidden
    ]
    HRESULT _stdcall enableDownload([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x00000437), 
    restricted, 
    hidden
    ]
    HRESULT _stdcall enableDownload([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x00000438), 
    restricted, 
    hidden
    ]
    HRESULT _stdcall baseUrl([in] BSTR p );
    [
    propget, 
    id(0x00000438), 
    restricted, 
    hidden
    ]
    HRESULT _stdcall baseUrl([out, retval] BSTR * p );
    [
    propget, 
    id(0x80010419)
    ]
    HRESULT _stdcall childNodes([out, retval]  IDispatch ** p );
    [
    propput, 
    id(0x0000043A), 
    restricted, 
    hidden
    ]
    HRESULT _stdcall inheritStyleSheets([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x0000043A), 
    restricted, 
    hidden
    ]
    HRESULT _stdcall inheritStyleSheets([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onbeforeeditfocus([in] VARIANT p );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onbeforeeditfocus([out, retval] VARIANT * p );
    [
    id(0x0000043E)
    ]
    HRESULT _stdcall getElementsByName([in] BSTR v, [out, retval] IHTMLElementCollection ** pelColl  );
    [
    id(0x00000440)
    ]
    HRESULT _stdcall getElementById([in] BSTR v, [out, retval] IHTMLElement ** pel  );
    [
    id(0x0000043F)
    ]
    HRESULT _stdcall getElementsByTagName([in] BSTR v, [out, retval] IHTMLElementCollection ** pelColl  );
  };

  [
    uuid(3050F69A-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLDocument4: IDispatch
  {
    [
    id(0x00000441)
    ]
    HRESULT _stdcall focus( void );
    [
    id(0x00000442)
    ]
    HRESULT _stdcall hasFocus([out, retval] VARIANT_BOOL * pfFocus );
    [
    propput, 
    id(0x800117C0), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onselectionchange([in] VARIANT p );
    [
    propget, 
    id(0x800117C0), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onselectionchange([out, retval] VARIANT * p );
    [
    propget, 
    id(0x00000443)
    ]
    HRESULT _stdcall namespaces([out, retval]  IDispatch ** p );
    [
    id(0x00000444)
    ]
    HRESULT _stdcall createDocumentFromUrl([in] BSTR bstrUrl, [in] BSTR bstrOptions, [out, retval] IHTMLDocument2 ** newDoc  );
    [
    propput, 
    id(0x00000445)
    ]
    HRESULT _stdcall media([in] BSTR p );
    [
    propget, 
    id(0x00000445)
    ]
    HRESULT _stdcall media([out, retval] BSTR * p );
    [
    id(0x00000446)
    ]
    HRESULT _stdcall CreateEventObject([in, optional] VARIANT * pvarEventObject, [out, retval] IHTMLEventObj ** ppEventObj  );
    [
    id(0x00000447)
    ]
    HRESULT _stdcall FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject, [out, retval] VARIANT_BOOL * pfCancelled );
    [
    id(0x00000448)
    ]
    HRESULT _stdcall createRenderStyle([in] BSTR v, [out, retval] IHTMLRenderStyle ** ppIHTMLRenderStyle  );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall oncontrolselect([in] VARIANT p );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall oncontrolselect([out, retval] VARIANT * p );
    [
    propget, 
    id(0x00000449)
    ]
    HRESULT _stdcall URLUnencoded([out, retval] BSTR * p );
  };

  [
    uuid(3050F80C-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLDocument5: IDispatch
  {
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onmousewheel([in] VARIANT p );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onmousewheel([out, retval] VARIANT * p );
    [
    propget, 
    id(0x0000044A)
    ]
    HRESULT _stdcall doctype([out, retval] IHTMLDOMNode ** p  );
    [
    propget, 
    id(0x0000044B)
    ]
    HRESULT _stdcall implementation([out, retval] IHTMLDOMImplementation ** p  );
    [
    id(0x0000044C)
    ]
    HRESULT _stdcall createAttribute([in] BSTR bstrattrName, [out, retval] IHTMLDOMAttribute ** ppAttribute  );
    [
    id(0x0000044D)
    ]
    HRESULT _stdcall createComment([in] BSTR bstrdata, [out, retval] IHTMLDOMNode ** ppRetNode  );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onfocusin([in] VARIANT p );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onfocusin([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onfocusout([in] VARIANT p );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onfocusout([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onactivate([in] VARIANT p );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onactivate([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall ondeactivate([in] VARIANT p );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall ondeactivate([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onbeforeactivate([in] VARIANT p );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onbeforeactivate([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onbeforedeactivate([in] VARIANT p );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onbeforedeactivate([out, retval] VARIANT * p );
    [
    propget, 
    id(0x0000044E)
    ]
    HRESULT _stdcall compatMode([out, retval] BSTR * p );
  };

  [
    uuid(3050F55F-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLDocument
  {
    properties:
    methods:
    [
    propget, 
    id(0x000003E9), 
    hidden, 
    nonbrowsable
    ]
     IDispatch * Script( void );
    [
    propget, 
    id(0x000003EB)
    ]
    IHTMLElementCollection * all( void );
    [
    propget, 
    id(0x000003EC)
    ]
    IHTMLElement * body( void );
    [
    propget, 
    id(0x000003ED)
    ]
    IHTMLElement * activeElement( void );
    [
    propget, 
    id(0x000003F3)
    ]
    IHTMLElementCollection * images( void );
    [
    propget, 
    id(0x000003F0)
    ]
    IHTMLElementCollection * applets( void );
    [
    propget, 
    id(0x000003F1)
    ]
    IHTMLElementCollection * links( void );
    [
    propget, 
    id(0x000003F2)
    ]
    IHTMLElementCollection * forms( void );
    [
    propget, 
    id(0x000003EF)
    ]
    IHTMLElementCollection * anchors( void );
    [
    propput, 
    id(0x000003F4)
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x000003F4)
    ]
    BSTR title( void );
    [
    propget, 
    id(0x000003F5)
    ]
    IHTMLElementCollection * scripts( void );
    [
    propput, 
    id(0x000003F6), 
    hidden
    ]
    void designMode(BSTR Param1 );
    [
    propget, 
    id(0x000003F6), 
    hidden
    ]
    BSTR designMode( void );
    [
    propget, 
    id(0x000003F9)
    ]
    IHTMLSelectionObject * selection( void );
    [
    propget, 
    id(0x000003FA), 
    bindable
    ]
    BSTR readyState( void );
    [
    propget, 
    id(0x000003FB)
    ]
    IHTMLFramesCollection2 * frames( void );
    [
    propget, 
    id(0x000003F7)
    ]
    IHTMLElementCollection * embeds( void );
    [
    propget, 
    id(0x000003FD)
    ]
    IHTMLElementCollection * plugins( void );
    [
    propput, 
    id(0x000003FE)
    ]
    void alinkColor(VARIANT Param1 );
    [
    propget, 
    id(0x000003FE)
    ]
    VARIANT alinkColor( void );
    [
    propput, 
    id(0xFFFFFE0B)
    ]
    void bgColor(VARIANT Param1 );
    [
    propget, 
    id(0xFFFFFE0B)
    ]
    VARIANT bgColor( void );
    [
    propput, 
    id(0x8001138A)
    ]
    void fgColor(VARIANT Param1 );
    [
    propget, 
    id(0x8001138A)
    ]
    VARIANT fgColor( void );
    [
    propput, 
    id(0x00000400)
    ]
    void linkColor(VARIANT Param1 );
    [
    propget, 
    id(0x00000400)
    ]
    VARIANT linkColor( void );
    [
    propput, 
    id(0x000003FF)
    ]
    void vlinkColor(VARIANT Param1 );
    [
    propget, 
    id(0x000003FF)
    ]
    VARIANT vlinkColor( void );
    [
    propget, 
    id(0x00000403)
    ]
    BSTR referrer( void );
    [
    propget, 
    id(0x00000402)
    ]
    IHTMLLocation * location( void );
    [
    propget, 
    id(0x00000404)
    ]
    BSTR lastModified( void );
    [
    propput, 
    id(0x00000401)
    ]
    void url(BSTR Param1 );
    [
    propget, 
    id(0x00000401)
    ]
    BSTR url( void );
    [
    propput, 
    id(0x00000405)
    ]
    void domain(BSTR Param1 );
    [
    propget, 
    id(0x00000405)
    ]
    BSTR domain( void );
    [
    propput, 
    id(0x00000406)
    ]
    void cookie(BSTR Param1 );
    [
    propget, 
    id(0x00000406)
    ]
    BSTR cookie( void );
    [
    propput, 
    id(0x00000407), 
    bindable, 
    hidden
    ]
    void expando(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x00000407), 
    bindable, 
    hidden
    ]
    VARIANT_BOOL expando( void );
    [
    propput, 
    id(0x00000408), 
    hidden
    ]
    void charset(BSTR Param1 );
    [
    propget, 
    id(0x00000408), 
    hidden
    ]
    BSTR charset( void );
    [
    propput, 
    id(0x00000409)
    ]
    void defaultCharset(BSTR Param1 );
    [
    propget, 
    id(0x00000409)
    ]
    BSTR defaultCharset( void );
    [
    propget, 
    id(0x00000411)
    ]
    BSTR mimeType( void );
    [
    propget, 
    id(0x00000412)
    ]
    BSTR fileSize( void );
    [
    propget, 
    id(0x00000413)
    ]
    BSTR fileCreatedDate( void );
    [
    propget, 
    id(0x00000414)
    ]
    BSTR fileModifiedDate( void );
    [
    propget, 
    id(0x00000415)
    ]
    BSTR fileUpdatedDate( void );
    [
    propget, 
    id(0x00000416)
    ]
    BSTR security( void );
    [
    propget, 
    id(0x00000417)
    ]
    BSTR protocol( void );
    [
    propget, 
    id(0x00000418)
    ]
    BSTR nameProp( void );
    [
    id(0x0000041E), 
    vararg
    ]
    void write([in] SAFEARRAY(VARIANT) psarray );
    [
    id(0x0000041F), 
    vararg
    ]
    void writeln([in] SAFEARRAY(VARIANT) psarray );
    [
    id(0x00000420)
    ]
     IDispatch * open([in, optional, defaultvalue("text/html")] BSTR url, [in, optional] VARIANT name, [in, optional] VARIANT features, [in, optional] VARIANT replace );
    [
    id(0x00000421)
    ]
    void close( void );
    [
    id(0x00000422)
    ]
    void clear( void );
    [
    id(0x00000423)
    ]
    VARIANT_BOOL queryCommandSupported([in] BSTR cmdID );
    [
    id(0x00000424)
    ]
    VARIANT_BOOL queryCommandEnabled([in] BSTR cmdID );
    [
    id(0x00000425)
    ]
    VARIANT_BOOL queryCommandState([in] BSTR cmdID );
    [
    id(0x00000426)
    ]
    VARIANT_BOOL queryCommandIndeterm([in] BSTR cmdID );
    [
    id(0x00000427)
    ]
    BSTR queryCommandText([in] BSTR cmdID );
    [
    id(0x00000428)
    ]
    VARIANT queryCommandValue([in] BSTR cmdID );
    [
    id(0x00000429)
    ]
    VARIANT_BOOL execCommand([in] BSTR cmdID, [in, optional, defaultvalue(False)] VARIANT_BOOL showUI, [in, optional] VARIANT value );
    [
    id(0x0000042A)
    ]
    VARIANT_BOOL execCommandShowHelp([in] BSTR cmdID );
    [
    id(0x0000042B)
    ]
    IHTMLElement * createElement([in] BSTR eTag );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x0000042C)
    ]
    IHTMLElement * elementFromPoint([in] long x, [in] long y );
    [
    propget, 
    id(0x0000040A)
    ]
    IHTMLWindow2 * parentWindow( void );
    [
    propget, 
    id(0x0000042D)
    ]
    IHTMLStyleSheetsCollection * styleSheets( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    id(0x0000042E)
    ]
    BSTR toString( void );
    [
    id(0x0000042F)
    ]
    IHTMLStyleSheet * createStyleSheet([in, optional, defaultvalue("")] BSTR bstrHref, [in, optional, defaultvalue(-1)] long lIndex );
    [
    id(0x00000430)
    ]
    void releaseCapture( void );
    [
    id(0x00000431)
    ]
    void recalc([in, optional, defaultvalue(False)] VARIANT_BOOL fForce );
    [
    id(0x00000432)
    ]
    IHTMLDOMNode * createTextNode([in] BSTR text );
    [
    propget, 
    id(0x00000433)
    ]
    IHTMLElement * documentElement( void );
    [
    propget, 
    id(0x00000435), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    propput, 
    id(0x800113FD)
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD)
    ]
    BSTR dir( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    propput, 
    id(0x800117B4), 
    bindable, 
    displaybind
    ]
    void onstop(VARIANT Param1 );
    [
    propget, 
    id(0x800117B4), 
    bindable, 
    displaybind
    ]
    VARIANT onstop( void );
    [
    id(0x00000434)
    ]
    IHTMLDocument2 * createDocumentFragment( void );
    [
    propget, 
    id(0x00000436), 
    restricted, 
    hidden
    ]
    IHTMLDocument2 * parentDocument( void );
    [
    propput, 
    id(0x00000437), 
    restricted, 
    hidden
    ]
    void enableDownload(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x00000437), 
    restricted, 
    hidden
    ]
    VARIANT_BOOL enableDownload( void );
    [
    propput, 
    id(0x00000438), 
    restricted, 
    hidden
    ]
    void baseUrl(BSTR Param1 );
    [
    propget, 
    id(0x00000438), 
    restricted, 
    hidden
    ]
    BSTR baseUrl( void );
    [
    propput, 
    id(0x0000043A), 
    restricted, 
    hidden
    ]
    void inheritStyleSheets(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x0000043A), 
    restricted, 
    hidden
    ]
    VARIANT_BOOL inheritStyleSheets( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    id(0x0000043E)
    ]
    IHTMLElementCollection * getElementsByName([in] BSTR v );
    [
    id(0x00000440)
    ]
    IHTMLElement * getElementById([in] BSTR v );
    [
    id(0x0000043F)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x00000441)
    ]
    void focus( void );
    [
    id(0x00000442)
    ]
    VARIANT_BOOL hasFocus( void );
    [
    propput, 
    id(0x800117C0), 
    bindable, 
    displaybind
    ]
    void onselectionchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117C0), 
    bindable, 
    displaybind
    ]
    VARIANT onselectionchange( void );
    [
    propget, 
    id(0x00000443)
    ]
     IDispatch * namespaces( void );
    [
    id(0x00000444)
    ]
    IHTMLDocument2 * createDocumentFromUrl([in] BSTR bstrUrl, [in] BSTR bstrOptions );
    [
    propput, 
    id(0x00000445)
    ]
    void media(BSTR Param1 );
    [
    propget, 
    id(0x00000445)
    ]
    BSTR media( void );
    [
    id(0x00000446)
    ]
    IHTMLEventObj * CreateEventObject([in, optional] VARIANT * pvarEventObject );
    [
    id(0x00000447)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    id(0x00000448)
    ]
    IHTMLRenderStyle * createRenderStyle([in] BSTR v );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    propget, 
    id(0x00000449)
    ]
    BSTR URLUnencoded( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    propget, 
    id(0x0000044A)
    ]
    IHTMLDOMNode * doctype( void );
    [
    propget, 
    id(0x0000044B)
    ]
    IHTMLDOMImplementation * implementation( void );
    [
    id(0x0000044C)
    ]
    IHTMLDOMAttribute * createAttribute([in] BSTR bstrattrName );
    [
    id(0x0000044D)
    ]
    IHTMLDOMNode * createComment([in] BSTR bstrdata );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    propget, 
    id(0x0000044E)
    ]
    BSTR compatMode( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
  };

  [
    uuid(3050F52E-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLEmbed
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x80010BC2)
    ]
    void hidden(BSTR Param1 );
    [
    propget, 
    id(0x80010BC2)
    ]
    BSTR hidden( void );
    [
    propget, 
    id(0x80010BBC)
    ]
    BSTR palette( void );
    [
    propget, 
    id(0x80010BBD)
    ]
    BSTR pluginspage( void );
    [
    propput, 
    id(0x80010BBE)
    ]
    void src(BSTR Param1 );
    [
    propget, 
    id(0x80010BBE)
    ]
    BSTR src( void );
    [
    propput, 
    id(0x80010BC0)
    ]
    void units(BSTR Param1 );
    [
    propget, 
    id(0x80010BC0)
    ]
    BSTR units( void );
    [
    propput, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    void name(BSTR Param1 );
    [
    propget, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    BSTR name( void );
    [
    propput, 
    id(0x80010005)
    ]
    void width(VARIANT Param1 );
    [
    propget, 
    id(0x80010005)
    ]
    VARIANT width( void );
    [
    propput, 
    id(0x80010006)
    ]
    void height(VARIANT Param1 );
    [
    propget, 
    id(0x80010006)
    ]
    VARIANT height( void );
  };

  [
    uuid(3050F61E-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface HTMLMapEvents2
  {
    properties:
    methods:
    [
    id(0x8001000A)
    ]
    VARIANT_BOOL onhelp([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA8)
    ]
    VARIANT_BOOL onclick([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA7)
    ]
    VARIANT_BOOL ondblclick([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA5)
    ]
    VARIANT_BOOL onkeypress([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA6)
    ]
    void onkeydown([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA4)
    ]
    void onkeyup([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010009)
    ]
    void onmouseout([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010008)
    ]
    void onmouseover([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA2)
    ]
    void onmousemove([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA3)
    ]
    void onmousedown([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA1)
    ]
    void onmouseup([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000C)
    ]
    VARIANT_BOOL onselectstart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010011)
    ]
    void onfilterchange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000B)
    ]
    VARIANT_BOOL ondragstart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010004)
    ]
    VARIANT_BOOL onbeforeupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010005)
    ]
    void onafterupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000D)
    ]
    VARIANT_BOOL onerrorupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010006)
    ]
    VARIANT_BOOL onrowexit([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010007)
    ]
    void onrowenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000E)
    ]
    void ondatasetchanged([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000F)
    ]
    void ondataavailable([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010010)
    ]
    void ondatasetcomplete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010012)
    ]
    void onlosecapture([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010013)
    ]
    void onpropertychange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003F6)
    ]
    void onscroll([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010001)
    ]
    void onfocus([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010000)
    ]
    void onblur([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003F8)
    ]
    void onresize([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010014)
    ]
    VARIANT_BOOL ondrag([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010015)
    ]
    void ondragend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010016)
    ]
    VARIANT_BOOL ondragenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010017)
    ]
    VARIANT_BOOL ondragover([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010018)
    ]
    void ondragleave([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010019)
    ]
    VARIANT_BOOL ondrop([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001D)
    ]
    VARIANT_BOOL onbeforecut([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001A)
    ]
    VARIANT_BOOL oncut([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001E)
    ]
    VARIANT_BOOL onbeforecopy([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001B)
    ]
    VARIANT_BOOL oncopy([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001F)
    ]
    VARIANT_BOOL onbeforepaste([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001C)
    ]
    VARIANT_BOOL onpaste([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003FF)
    ]
    VARIANT_BOOL oncontextmenu([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010020)
    ]
    void onrowsdelete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010021)
    ]
    void onrowsinserted([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010022)
    ]
    void oncellchange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFD9F)
    ]
    void onreadystatechange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000406)
    ]
    void onlayoutcomplete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000407)
    ]
    void onpage([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000412)
    ]
    void onmouseenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000413)
    ]
    void onmouseleave([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000414)
    ]
    void onactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000415)
    ]
    void ondeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040A)
    ]
    VARIANT_BOOL onbeforedeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000417)
    ]
    VARIANT_BOOL onbeforeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000418)
    ]
    void onfocusin([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000419)
    ]
    void onfocusout([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040B)
    ]
    void onmove([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040C)
    ]
    VARIANT_BOOL oncontrolselect([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040E)
    ]
    VARIANT_BOOL onmovestart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040F)
    ]
    void onmoveend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000410)
    ]
    VARIANT_BOOL onresizestart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000411)
    ]
    void onresizeend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000409)
    ]
    VARIANT_BOOL onmousewheel([in] IHTMLEventObj * pEvtObj  );
  };

  [
    uuid(3050F383-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLAreasCollection: IDispatch
  {
    [
    propput, 
    id(0x000005DC)
    ]
    HRESULT _stdcall length([in] long p );
    [
    propget, 
    id(0x000005DC)
    ]
    HRESULT _stdcall length([out, retval] long * p );
    [
    propget, 
    id(0xFFFFFFFC), 
    restricted, 
    hidden
    ]
    HRESULT _stdcall _newEnum([out, retval]  IUnknown ** p );
    [
    id(0x00000000)
    ]
    HRESULT _stdcall item([in, optional] VARIANT name, [in, optional] VARIANT index, [out, retval]  IDispatch ** pdisp );
    [
    id(0x000005DE)
    ]
    HRESULT _stdcall tags([in] VARIANT tagName, [out, retval]  IDispatch ** pdisp );
    [
    id(0x000005DF)
    ]
    HRESULT _stdcall add([in] IHTMLElement * element , [in, optional] VARIANT before );
    [
    id(0x000005E0)
    ]
    HRESULT _stdcall remove([in, optional, defaultvalue(-1)] long index );
  };

  [
    uuid(3050F266-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLMapElement: IDispatch
  {
    [
    propget, 
    id(0x000003EA)
    ]
    HRESULT _stdcall areas([out, retval] IHTMLAreasCollection ** p  );
    [
    propput, 
    id(0x80010000)
    ]
    HRESULT _stdcall name([in] BSTR p );
    [
    propget, 
    id(0x80010000)
    ]
    HRESULT _stdcall name([out, retval] BSTR * p );
  };

  [
    uuid(3050F56A-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLAreasCollection
  {
    properties:
    methods:
    [
    propput, 
    id(0x000005DC)
    ]
    void length(long Param1 );
    [
    propget, 
    id(0x000005DC)
    ]
    long length( void );
    [
    propget, 
    id(0xFFFFFFFC), 
    restricted, 
    hidden
    ]
     IUnknown * _newEnum( void );
    [
    id(0x00000000)
    ]
     IDispatch * item([in, optional] VARIANT name, [in, optional] VARIANT index );
    [
    id(0x000005DE)
    ]
     IDispatch * tags([in] VARIANT tagName );
    [
    id(0x000005DF)
    ]
    void add([in] IHTMLElement * element , [in, optional] VARIANT before );
    [
    id(0x000005E0)
    ]
    void remove([in, optional, defaultvalue(-1)] long index );
    [
    id(0x000005E1)
    ]
     IDispatch * urns([in] VARIANT urn );
    [
    id(0x000005E2)
    ]
     IDispatch * namedItem([in] BSTR name );
  };

  [
    uuid(3050F526-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLMapElement
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propget, 
    id(0x000003EA)
    ]
    IHTMLAreasCollection * areas( void );
    [
    propput, 
    id(0x80010000)
    ]
    void name(BSTR Param1 );
    [
    propget, 
    id(0x80010000)
    ]
    BSTR name( void );
  };

  [
    uuid(3050F611-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface HTMLAreaEvents2
  {
    properties:
    methods:
    [
    id(0x8001000A)
    ]
    VARIANT_BOOL onhelp([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA8)
    ]
    VARIANT_BOOL onclick([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA7)
    ]
    VARIANT_BOOL ondblclick([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA5)
    ]
    VARIANT_BOOL onkeypress([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA6)
    ]
    void onkeydown([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA4)
    ]
    void onkeyup([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010009)
    ]
    void onmouseout([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010008)
    ]
    void onmouseover([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA2)
    ]
    void onmousemove([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA3)
    ]
    void onmousedown([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA1)
    ]
    void onmouseup([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000C)
    ]
    VARIANT_BOOL onselectstart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010011)
    ]
    void onfilterchange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000B)
    ]
    VARIANT_BOOL ondragstart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010004)
    ]
    VARIANT_BOOL onbeforeupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010005)
    ]
    void onafterupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000D)
    ]
    VARIANT_BOOL onerrorupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010006)
    ]
    VARIANT_BOOL onrowexit([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010007)
    ]
    void onrowenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000E)
    ]
    void ondatasetchanged([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000F)
    ]
    void ondataavailable([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010010)
    ]
    void ondatasetcomplete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010012)
    ]
    void onlosecapture([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010013)
    ]
    void onpropertychange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003F6)
    ]
    void onscroll([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010001)
    ]
    void onfocus([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010000)
    ]
    void onblur([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003F8)
    ]
    void onresize([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010014)
    ]
    VARIANT_BOOL ondrag([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010015)
    ]
    void ondragend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010016)
    ]
    VARIANT_BOOL ondragenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010017)
    ]
    VARIANT_BOOL ondragover([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010018)
    ]
    void ondragleave([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010019)
    ]
    VARIANT_BOOL ondrop([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001D)
    ]
    VARIANT_BOOL onbeforecut([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001A)
    ]
    VARIANT_BOOL oncut([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001E)
    ]
    VARIANT_BOOL onbeforecopy([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001B)
    ]
    VARIANT_BOOL oncopy([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001F)
    ]
    VARIANT_BOOL onbeforepaste([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001C)
    ]
    VARIANT_BOOL onpaste([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003FF)
    ]
    VARIANT_BOOL oncontextmenu([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010020)
    ]
    void onrowsdelete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010021)
    ]
    void onrowsinserted([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010022)
    ]
    void oncellchange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFD9F)
    ]
    void onreadystatechange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000406)
    ]
    void onlayoutcomplete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000407)
    ]
    void onpage([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000412)
    ]
    void onmouseenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000413)
    ]
    void onmouseleave([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000414)
    ]
    void onactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000415)
    ]
    void ondeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040A)
    ]
    VARIANT_BOOL onbeforedeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000417)
    ]
    VARIANT_BOOL onbeforeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000418)
    ]
    void onfocusin([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000419)
    ]
    void onfocusout([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040B)
    ]
    void onmove([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040C)
    ]
    VARIANT_BOOL oncontrolselect([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040E)
    ]
    VARIANT_BOOL onmovestart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040F)
    ]
    void onmoveend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000410)
    ]
    VARIANT_BOOL onresizestart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000411)
    ]
    void onresizeend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000409)
    ]
    VARIANT_BOOL onmousewheel([in] IHTMLEventObj * pEvtObj  );
  };

  [
    uuid(3050F503-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLAreaElement
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x000003E9)
    ]
    void shape(BSTR Param1 );
    [
    propget, 
    id(0x000003E9)
    ]
    BSTR shape( void );
    [
    propput, 
    id(0x000003EA)
    ]
    void coords(BSTR Param1 );
    [
    propget, 
    id(0x000003EA)
    ]
    BSTR coords( void );
    [
    propput, 
    id(0x00000000)
    ]
    void href(BSTR Param1 );
    [
    propget, 
    id(0x00000000)
    ]
    BSTR href( void );
    [
    propput, 
    id(0x000003EC)
    ]
    void target(BSTR Param1 );
    [
    propget, 
    id(0x000003EC)
    ]
    BSTR target( void );
    [
    propput, 
    id(0x000003ED)
    ]
    void alt(BSTR Param1 );
    [
    propget, 
    id(0x000003ED)
    ]
    BSTR alt( void );
    [
    propput, 
    id(0x000003EE)
    ]
    void noHref(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x000003EE)
    ]
    VARIANT_BOOL noHref( void );
    [
    propput, 
    id(0x000003EF)
    ]
    void host(BSTR Param1 );
    [
    propget, 
    id(0x000003EF)
    ]
    BSTR host( void );
    [
    propput, 
    id(0x000003F0)
    ]
    void hostname(BSTR Param1 );
    [
    propget, 
    id(0x000003F0)
    ]
    BSTR hostname( void );
    [
    propput, 
    id(0x000003F1)
    ]
    void pathname(BSTR Param1 );
    [
    propget, 
    id(0x000003F1)
    ]
    BSTR pathname( void );
    [
    propput, 
    id(0x000003F2)
    ]
    void port(BSTR Param1 );
    [
    propget, 
    id(0x000003F2)
    ]
    BSTR port( void );
    [
    propput, 
    id(0x000003F3)
    ]
    void protocol(BSTR Param1 );
    [
    propget, 
    id(0x000003F3)
    ]
    BSTR protocol( void );
    [
    propput, 
    id(0x000003F4)
    ]
    void search(BSTR Param1 );
    [
    propget, 
    id(0x000003F4)
    ]
    BSTR search( void );
    [
    propput, 
    id(0x000003F5)
    ]
    void hash(BSTR Param1 );
    [
    propget, 
    id(0x000003F5)
    ]
    BSTR hash( void );
  };

  [
    uuid(3050F508-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLTableCaption
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x80010048)
    ]
    void align(BSTR Param1 );
    [
    propget, 
    id(0x80010048)
    ]
    BSTR align( void );
    [
    propput, 
    id(0x800113A7)
    ]
    void vAlign(BSTR Param1 );
    [
    propget, 
    id(0x800113A7)
    ]
    BSTR vAlign( void );
  };

  [
    uuid(3050F50A-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLCommentElement
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x000003E9), 
    bindable, 
    displaybind
    ]
    void text(BSTR Param1 );
    [
    propget, 
    id(0x000003E9), 
    bindable, 
    displaybind
    ]
    BSTR text( void );
    [
    propput, 
    id(0x000003EA), 
    bindable, 
    displaybind
    ]
    void atomic(long Param1 );
    [
    propget, 
    id(0x000003EA), 
    bindable, 
    displaybind
    ]
    long atomic( void );
    [
    propput, 
    id(0x000003EB)
    ]
    void data(BSTR Param1 );
    [
    propget, 
    id(0x000003EB)
    ]
    BSTR data( void );
    [
    propget, 
    id(0x000003EC)
    ]
    long length( void );
    [
    id(0x000003ED)
    ]
    BSTR substringData([in] long offset, [in] long Count );
    [
    id(0x000003EE)
    ]
    void appendData([in] BSTR bstrstring );
    [
    id(0x000003EF)
    ]
    void insertData([in] long offset, [in] BSTR bstrstring );
    [
    id(0x000003F0)
    ]
    void deleteData([in] long offset, [in] long Count );
    [
    id(0x000003F1)
    ]
    void replaceData([in] long offset, [in] long Count, [in] BSTR bstrstring );
  };

  [
    uuid(3050F52D-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLPhraseElement
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x000003E9), 
    bindable, 
    displaybind
    ]
    void cite(BSTR Param1 );
    [
    propget, 
    id(0x000003E9), 
    bindable, 
    displaybind
    ]
    BSTR cite( void );
    [
    propput, 
    id(0x000003EA), 
    bindable, 
    displaybind
    ]
    void dateTime(BSTR Param1 );
    [
    propget, 
    id(0x000003EA), 
    bindable, 
    displaybind
    ]
    BSTR dateTime( void );
  };

  [
    uuid(3050F548-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLSpanElement
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x800103FD)
    ]
    void dataFld(BSTR Param1 );
    [
    propget, 
    id(0x800103FD)
    ]
    BSTR dataFld( void );
    [
    propput, 
    id(0x800103FE)
    ]
    void dataSrc(BSTR Param1 );
    [
    propget, 
    id(0x800103FE)
    ]
    BSTR dataSrc( void );
    [
    propput, 
    id(0x800103FF)
    ]
    void dataFormatAs(BSTR Param1 );
    [
    propget, 
    id(0x800103FF)
    ]
    BSTR dataFormatAs( void );
  };

  [
    uuid(3050F623-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface HTMLTableEvents2
  {
    properties:
    methods:
    [
    id(0x8001000A)
    ]
    VARIANT_BOOL onhelp([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA8)
    ]
    VARIANT_BOOL onclick([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA7)
    ]
    VARIANT_BOOL ondblclick([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA5)
    ]
    VARIANT_BOOL onkeypress([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA6)
    ]
    void onkeydown([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA4)
    ]
    void onkeyup([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010009)
    ]
    void onmouseout([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010008)
    ]
    void onmouseover([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA2)
    ]
    void onmousemove([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA3)
    ]
    void onmousedown([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA1)
    ]
    void onmouseup([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000C)
    ]
    VARIANT_BOOL onselectstart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010011)
    ]
    void onfilterchange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000B)
    ]
    VARIANT_BOOL ondragstart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010004)
    ]
    VARIANT_BOOL onbeforeupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010005)
    ]
    void onafterupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000D)
    ]
    VARIANT_BOOL onerrorupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010006)
    ]
    VARIANT_BOOL onrowexit([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010007)
    ]
    void onrowenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000E)
    ]
    void ondatasetchanged([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000F)
    ]
    void ondataavailable([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010010)
    ]
    void ondatasetcomplete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010012)
    ]
    void onlosecapture([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010013)
    ]
    void onpropertychange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003F6)
    ]
    void onscroll([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010001)
    ]
    void onfocus([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010000)
    ]
    void onblur([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003F8)
    ]
    void onresize([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010014)
    ]
    VARIANT_BOOL ondrag([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010015)
    ]
    void ondragend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010016)
    ]
    VARIANT_BOOL ondragenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010017)
    ]
    VARIANT_BOOL ondragover([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010018)
    ]
    void ondragleave([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010019)
    ]
    VARIANT_BOOL ondrop([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001D)
    ]
    VARIANT_BOOL onbeforecut([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001A)
    ]
    VARIANT_BOOL oncut([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001E)
    ]
    VARIANT_BOOL onbeforecopy([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001B)
    ]
    VARIANT_BOOL oncopy([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001F)
    ]
    VARIANT_BOOL onbeforepaste([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001C)
    ]
    VARIANT_BOOL onpaste([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003FF)
    ]
    VARIANT_BOOL oncontextmenu([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010020)
    ]
    void onrowsdelete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010021)
    ]
    void onrowsinserted([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010022)
    ]
    void oncellchange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFD9F)
    ]
    void onreadystatechange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000406)
    ]
    void onlayoutcomplete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000407)
    ]
    void onpage([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000412)
    ]
    void onmouseenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000413)
    ]
    void onmouseleave([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000414)
    ]
    void onactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000415)
    ]
    void ondeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040A)
    ]
    VARIANT_BOOL onbeforedeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000417)
    ]
    VARIANT_BOOL onbeforeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000418)
    ]
    void onfocusin([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000419)
    ]
    void onfocusout([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040B)
    ]
    void onmove([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040C)
    ]
    VARIANT_BOOL oncontrolselect([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040E)
    ]
    VARIANT_BOOL onmovestart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040F)
    ]
    void onmoveend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000410)
    ]
    VARIANT_BOOL onresizestart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000411)
    ]
    void onresizeend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000409)
    ]
    VARIANT_BOOL onmousewheel([in] IHTMLEventObj * pEvtObj  );
  };

  [
    uuid(3050F23B-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLTableSection: IDispatch
  {
    [
    propput, 
    id(0x80010048)
    ]
    HRESULT _stdcall align([in] BSTR p );
    [
    propget, 
    id(0x80010048)
    ]
    HRESULT _stdcall align([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113A7)
    ]
    HRESULT _stdcall vAlign([in] BSTR p );
    [
    propget, 
    id(0x800113A7)
    ]
    HRESULT _stdcall vAlign([out, retval] BSTR * p );
    [
    propput, 
    id(0xFFFFFE0B)
    ]
    HRESULT _stdcall bgColor([in] VARIANT p );
    [
    propget, 
    id(0xFFFFFE0B)
    ]
    HRESULT _stdcall bgColor([out, retval] VARIANT * p );
    [
    propget, 
    id(0x000003E8)
    ]
    HRESULT _stdcall rows([out, retval] IHTMLElementCollection ** p  );
    [
    id(0x000003E9)
    ]
    HRESULT _stdcall insertRow([in, optional, defaultvalue(-1)] long index, [out, retval]  IDispatch ** row );
    [
    id(0x000003EA)
    ]
    HRESULT _stdcall deleteRow([in, optional, defaultvalue(-1)] long index );
  };

  [
    uuid(3050F21E-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLTable: IDispatch
  {
    [
    propput, 
    id(0x000003E9)
    ]
    HRESULT _stdcall cols([in] long p );
    [
    propget, 
    id(0x000003E9)
    ]
    HRESULT _stdcall cols([out, retval] long * p );
    [
    propput, 
    id(0x000003EA)
    ]
    HRESULT _stdcall border([in] VARIANT p );
    [
    propget, 
    id(0x000003EA)
    ]
    HRESULT _stdcall border([out, retval] VARIANT * p );
    [
    propput, 
    id(0x000003EC)
    ]
    HRESULT _stdcall frame([in] BSTR p );
    [
    propget, 
    id(0x000003EC)
    ]
    HRESULT _stdcall frame([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003EB)
    ]
    HRESULT _stdcall rules([in] BSTR p );
    [
    propget, 
    id(0x000003EB)
    ]
    HRESULT _stdcall rules([out, retval] BSTR * p );
    [
    propput, 
    id(0x000003ED)
    ]
    HRESULT _stdcall cellSpacing([in] VARIANT p );
    [
    propget, 
    id(0x000003ED)
    ]
    HRESULT _stdcall cellSpacing([out, retval] VARIANT * p );
    [
    propput, 
    id(0x000003EE)
    ]
    HRESULT _stdcall cellPadding([in] VARIANT p );
    [
    propget, 
    id(0x000003EE)
    ]
    HRESULT _stdcall cellPadding([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011389)
    ]
    HRESULT _stdcall background([in] BSTR p );
    [
    propget, 
    id(0x80011389)
    ]
    HRESULT _stdcall background([out, retval] BSTR * p );
    [
    propput, 
    id(0xFFFFFE0B)
    ]
    HRESULT _stdcall bgColor([in] VARIANT p );
    [
    propget, 
    id(0xFFFFFE0B)
    ]
    HRESULT _stdcall bgColor([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113A4)
    ]
    HRESULT _stdcall borderColor([in] VARIANT p );
    [
    propget, 
    id(0x800113A4)
    ]
    HRESULT _stdcall borderColor([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113A5)
    ]
    HRESULT _stdcall borderColorLight([in] VARIANT p );
    [
    propget, 
    id(0x800113A5)
    ]
    HRESULT _stdcall borderColorLight([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113A6)
    ]
    HRESULT _stdcall borderColorDark([in] VARIANT p );
    [
    propget, 
    id(0x800113A6)
    ]
    HRESULT _stdcall borderColorDark([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80010049)
    ]
    HRESULT _stdcall align([in] BSTR p );
    [
    propget, 
    id(0x80010049)
    ]
    HRESULT _stdcall align([out, retval] BSTR * p );
    [
    id(0x000003F7)
    ]
    HRESULT _stdcall refresh( void );
    [
    propget, 
    id(0x000003F8)
    ]
    HRESULT _stdcall rows([out, retval] IHTMLElementCollection ** p  );
    [
    propput, 
    id(0x80010005)
    ]
    HRESULT _stdcall width([in] VARIANT p );
    [
    propget, 
    id(0x80010005)
    ]
    HRESULT _stdcall width([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80010006)
    ]
    HRESULT _stdcall height([in] VARIANT p );
    [
    propget, 
    id(0x80010006)
    ]
    HRESULT _stdcall height([out, retval] VARIANT * p );
    [
    propput, 
    id(0x000003F9)
    ]
    HRESULT _stdcall dataPageSize([in] long p );
    [
    propget, 
    id(0x000003F9)
    ]
    HRESULT _stdcall dataPageSize([out, retval] long * p );
    [
    id(0x000003FA)
    ]
    HRESULT _stdcall nextPage( void );
    [
    id(0x000003FB)
    ]
    HRESULT _stdcall previousPage( void );
    [
    propget, 
    id(0x000003FC)
    ]
    HRESULT _stdcall tHead([out, retval] IHTMLTableSection ** p  );
    [
    propget, 
    id(0x000003FD)
    ]
    HRESULT _stdcall tFoot([out, retval] IHTMLTableSection ** p  );
    [
    propget, 
    id(0x00000400)
    ]
    HRESULT _stdcall tBodies([out, retval] IHTMLElementCollection ** p  );
    [
    propget, 
    id(0x00000401)
    ]
    HRESULT _stdcall caption([out, retval] IHTMLTableCaption ** p  );
    [
    id(0x00000402)
    ]
    HRESULT _stdcall createTHead([out, retval]  IDispatch ** head );
    [
    id(0x00000403)
    ]
    HRESULT _stdcall deleteTHead( void );
    [
    id(0x00000404)
    ]
    HRESULT _stdcall createTFoot([out, retval]  IDispatch ** foot );
    [
    id(0x00000405)
    ]
    HRESULT _stdcall deleteTFoot( void );
    [
    id(0x00000406)
    ]
    HRESULT _stdcall createCaption([out, retval] IHTMLTableCaption ** caption  );
    [
    id(0x00000407)
    ]
    HRESULT _stdcall deleteCaption( void );
    [
    id(0x00000408)
    ]
    HRESULT _stdcall insertRow([in, optional, defaultvalue(-1)] long index, [out, retval]  IDispatch ** row );
    [
    id(0x00000409)
    ]
    HRESULT _stdcall deleteRow([in, optional, defaultvalue(-1)] long index );
    [
    propget, 
    id(0x800113FC)
    ]
    HRESULT _stdcall readyState([out, retval] BSTR * p );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onreadystatechange([in] VARIANT p );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onreadystatechange([out, retval] VARIANT * p );
  };

  [
    uuid(3050F4AD-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLTable2: IDispatch
  {
    [
    id(0x0000040B)
    ]
    HRESULT _stdcall firstPage( void );
    [
    id(0x0000040C)
    ]
    HRESULT _stdcall lastPage( void );
    [
    propget, 
    id(0x0000040D)
    ]
    HRESULT _stdcall cells([out, retval] IHTMLElementCollection ** p  );
    [
    id(0x0000040E)
    ]
    HRESULT _stdcall moveRow([in, optional, defaultvalue(-1)] long indexFrom, [in, optional, defaultvalue(-1)] long indexTo, [out, retval]  IDispatch ** row );
  };

  [
    uuid(3050F23C-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLTableRow: IDispatch
  {
    [
    propput, 
    id(0x80010048)
    ]
    HRESULT _stdcall align([in] BSTR p );
    [
    propget, 
    id(0x80010048)
    ]
    HRESULT _stdcall align([out, retval] BSTR * p );
    [
    propput, 
    id(0x800113A7)
    ]
    HRESULT _stdcall vAlign([in] BSTR p );
    [
    propget, 
    id(0x800113A7)
    ]
    HRESULT _stdcall vAlign([out, retval] BSTR * p );
    [
    propput, 
    id(0xFFFFFE0B)
    ]
    HRESULT _stdcall bgColor([in] VARIANT p );
    [
    propget, 
    id(0xFFFFFE0B)
    ]
    HRESULT _stdcall bgColor([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113A4)
    ]
    HRESULT _stdcall borderColor([in] VARIANT p );
    [
    propget, 
    id(0x800113A4)
    ]
    HRESULT _stdcall borderColor([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113A5)
    ]
    HRESULT _stdcall borderColorLight([in] VARIANT p );
    [
    propget, 
    id(0x800113A5)
    ]
    HRESULT _stdcall borderColorLight([out, retval] VARIANT * p );
    [
    propput, 
    id(0x800113A6)
    ]
    HRESULT _stdcall borderColorDark([in] VARIANT p );
    [
    propget, 
    id(0x800113A6)
    ]
    HRESULT _stdcall borderColorDark([out, retval] VARIANT * p );
    [
    propget, 
    id(0x000003E8)
    ]
    HRESULT _stdcall rowIndex([out, retval] long * p );
    [
    propget, 
    id(0x000003E9)
    ]
    HRESULT _stdcall sectionRowIndex([out, retval] long * p );
    [
    propget, 
    id(0x000003EA)
    ]
    HRESULT _stdcall cells([out, retval] IHTMLElementCollection ** p  );
    [
    id(0x000003EB)
    ]
    HRESULT _stdcall insertCell([in, optional, defaultvalue(-1)] long index, [out, retval]  IDispatch ** row );
    [
    id(0x000003EC)
    ]
    HRESULT _stdcall deleteCell([in, optional, defaultvalue(-1)] long index );
  };

  [
    uuid(3050F532-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLTable
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x800103FD)
    ]
    void dataFld(BSTR Param1 );
    [
    propget, 
    id(0x800103FD)
    ]
    BSTR dataFld( void );
    [
    propput, 
    id(0x800103FE)
    ]
    void dataSrc(BSTR Param1 );
    [
    propget, 
    id(0x800103FE)
    ]
    BSTR dataSrc( void );
    [
    propput, 
    id(0x800103FF)
    ]
    void dataFormatAs(BSTR Param1 );
    [
    propget, 
    id(0x800103FF)
    ]
    BSTR dataFormatAs( void );
    [
    propput, 
    id(0x000003E9)
    ]
    void cols(long Param1 );
    [
    propget, 
    id(0x000003E9)
    ]
    long cols( void );
    [
    propput, 
    id(0x000003EA)
    ]
    void border(VARIANT Param1 );
    [
    propget, 
    id(0x000003EA)
    ]
    VARIANT border( void );
    [
    propput, 
    id(0x000003EC)
    ]
    void frame(BSTR Param1 );
    [
    propget, 
    id(0x000003EC)
    ]
    BSTR frame( void );
    [
    propput, 
    id(0x000003EB)
    ]
    void rules(BSTR Param1 );
    [
    propget, 
    id(0x000003EB)
    ]
    BSTR rules( void );
    [
    propput, 
    id(0x000003ED)
    ]
    void cellSpacing(VARIANT Param1 );
    [
    propget, 
    id(0x000003ED)
    ]
    VARIANT cellSpacing( void );
    [
    propput, 
    id(0x000003EE)
    ]
    void cellPadding(VARIANT Param1 );
    [
    propget, 
    id(0x000003EE)
    ]
    VARIANT cellPadding( void );
    [
    propput, 
    id(0x80011389)
    ]
    void background(BSTR Param1 );
    [
    propget, 
    id(0x80011389)
    ]
    BSTR background( void );
    [
    propput, 
    id(0xFFFFFE0B)
    ]
    void bgColor(VARIANT Param1 );
    [
    propget, 
    id(0xFFFFFE0B)
    ]
    VARIANT bgColor( void );
    [
    propput, 
    id(0x800113A4)
    ]
    void borderColor(VARIANT Param1 );
    [
    propget, 
    id(0x800113A4)
    ]
    VARIANT borderColor( void );
    [
    propput, 
    id(0x800113A5)
    ]
    void borderColorLight(VARIANT Param1 );
    [
    propget, 
    id(0x800113A5)
    ]
    VARIANT borderColorLight( void );
    [
    propput, 
    id(0x800113A6)
    ]
    void borderColorDark(VARIANT Param1 );
    [
    propget, 
    id(0x800113A6)
    ]
    VARIANT borderColorDark( void );
    [
    propput, 
    id(0x80010049)
    ]
    void align(BSTR Param1 );
    [
    propget, 
    id(0x80010049)
    ]
    BSTR align( void );
    [
    id(0x000003F7)
    ]
    void refresh( void );
    [
    propget, 
    id(0x000003F8)
    ]
    IHTMLElementCollection * rows( void );
    [
    propput, 
    id(0x80010005)
    ]
    void width(VARIANT Param1 );
    [
    propget, 
    id(0x80010005)
    ]
    VARIANT width( void );
    [
    propput, 
    id(0x80010006)
    ]
    void height(VARIANT Param1 );
    [
    propget, 
    id(0x80010006)
    ]
    VARIANT height( void );
    [
    propput, 
    id(0x000003F9)
    ]
    void dataPageSize(long Param1 );
    [
    propget, 
    id(0x000003F9)
    ]
    long dataPageSize( void );
    [
    id(0x000003FA)
    ]
    void nextPage( void );
    [
    id(0x000003FB)
    ]
    void previousPage( void );
    [
    propget, 
    id(0x000003FC)
    ]
    IHTMLTableSection * tHead( void );
    [
    propget, 
    id(0x000003FD)
    ]
    IHTMLTableSection * tFoot( void );
    [
    propget, 
    id(0x00000400)
    ]
    IHTMLElementCollection * tBodies( void );
    [
    propget, 
    id(0x00000401)
    ]
    IHTMLTableCaption * caption( void );
    [
    id(0x00000402)
    ]
     IDispatch * createTHead( void );
    [
    id(0x00000403)
    ]
    void deleteTHead( void );
    [
    id(0x00000404)
    ]
     IDispatch * createTFoot( void );
    [
    id(0x00000405)
    ]
    void deleteTFoot( void );
    [
    id(0x00000406)
    ]
    IHTMLTableCaption * createCaption( void );
    [
    id(0x00000407)
    ]
    void deleteCaption( void );
    [
    id(0x00000408)
    ]
     IDispatch * insertRow([in, optional, defaultvalue(-1)] long index );
    [
    id(0x00000409)
    ]
    void deleteRow([in, optional, defaultvalue(-1)] long index );
    [
    id(0x0000040B)
    ]
    void firstPage( void );
    [
    id(0x0000040C)
    ]
    void lastPage( void );
    [
    propget, 
    id(0x0000040D)
    ]
    IHTMLElementCollection * cells( void );
    [
    id(0x0000040E)
    ]
     IDispatch * moveRow([in, optional, defaultvalue(-1)] long indexFrom, [in, optional, defaultvalue(-1)] long indexTo );
    [
    propput, 
    id(0x0000040F), 
    bindable, 
    displaybind
    ]
    void summary(BSTR Param1 );
    [
    propget, 
    id(0x0000040F), 
    bindable, 
    displaybind
    ]
    BSTR summary( void );
  };

  [
    uuid(3050F533-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLTableCol
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x000003E9)
    ]
    void span(long Param1 );
    [
    propget, 
    id(0x000003E9)
    ]
    long span( void );
    [
    propput, 
    id(0x80010005)
    ]
    void width(VARIANT Param1 );
    [
    propget, 
    id(0x80010005)
    ]
    VARIANT width( void );
    [
    propput, 
    id(0x80010048)
    ]
    void align(BSTR Param1 );
    [
    propget, 
    id(0x80010048)
    ]
    BSTR align( void );
    [
    propput, 
    id(0x800113A7)
    ]
    void vAlign(BSTR Param1 );
    [
    propget, 
    id(0x800113A7)
    ]
    BSTR vAlign( void );
    [
    propput, 
    id(0x000003EA), 
    bindable, 
    displaybind
    ]
    void ch(BSTR Param1 );
    [
    propget, 
    id(0x000003EA), 
    bindable, 
    displaybind
    ]
    BSTR ch( void );
    [
    propput, 
    id(0x000003EB), 
    bindable, 
    displaybind
    ]
    void chOff(BSTR Param1 );
    [
    propget, 
    id(0x000003EB), 
    bindable, 
    displaybind
    ]
    BSTR chOff( void );
  };

  [
    uuid(3050F534-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLTableSection
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x80010048)
    ]
    void align(BSTR Param1 );
    [
    propget, 
    id(0x80010048)
    ]
    BSTR align( void );
    [
    propput, 
    id(0x800113A7)
    ]
    void vAlign(BSTR Param1 );
    [
    propget, 
    id(0x800113A7)
    ]
    BSTR vAlign( void );
    [
    propput, 
    id(0xFFFFFE0B)
    ]
    void bgColor(VARIANT Param1 );
    [
    propget, 
    id(0xFFFFFE0B)
    ]
    VARIANT bgColor( void );
    [
    propget, 
    id(0x000003E8)
    ]
    IHTMLElementCollection * rows( void );
    [
    id(0x000003E9)
    ]
     IDispatch * insertRow([in, optional, defaultvalue(-1)] long index );
    [
    id(0x000003EA)
    ]
    void deleteRow([in, optional, defaultvalue(-1)] long index );
    [
    id(0x000003EB)
    ]
     IDispatch * moveRow([in, optional, defaultvalue(-1)] long indexFrom, [in, optional, defaultvalue(-1)] long indexTo );
    [
    propput, 
    id(0x000003EC), 
    bindable, 
    displaybind
    ]
    void ch(BSTR Param1 );
    [
    propget, 
    id(0x000003EC), 
    bindable, 
    displaybind
    ]
    BSTR ch( void );
    [
    propput, 
    id(0x000003ED), 
    bindable, 
    displaybind
    ]
    void chOff(BSTR Param1 );
    [
    propget, 
    id(0x000003ED), 
    bindable, 
    displaybind
    ]
    BSTR chOff( void );
  };

  [
    uuid(3050F535-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLTableRow
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x80010048)
    ]
    void align(BSTR Param1 );
    [
    propget, 
    id(0x80010048)
    ]
    BSTR align( void );
    [
    propput, 
    id(0x800113A7)
    ]
    void vAlign(BSTR Param1 );
    [
    propget, 
    id(0x800113A7)
    ]
    BSTR vAlign( void );
    [
    propput, 
    id(0xFFFFFE0B)
    ]
    void bgColor(VARIANT Param1 );
    [
    propget, 
    id(0xFFFFFE0B)
    ]
    VARIANT bgColor( void );
    [
    propput, 
    id(0x800113A4)
    ]
    void borderColor(VARIANT Param1 );
    [
    propget, 
    id(0x800113A4)
    ]
    VARIANT borderColor( void );
    [
    propput, 
    id(0x800113A5)
    ]
    void borderColorLight(VARIANT Param1 );
    [
    propget, 
    id(0x800113A5)
    ]
    VARIANT borderColorLight( void );
    [
    propput, 
    id(0x800113A6)
    ]
    void borderColorDark(VARIANT Param1 );
    [
    propget, 
    id(0x800113A6)
    ]
    VARIANT borderColorDark( void );
    [
    propget, 
    id(0x000003E8)
    ]
    long rowIndex( void );
    [
    propget, 
    id(0x000003E9)
    ]
    long sectionRowIndex( void );
    [
    propget, 
    id(0x000003EA)
    ]
    IHTMLElementCollection * cells( void );
    [
    id(0x000003EB)
    ]
     IDispatch * insertCell([in, optional, defaultvalue(-1)] long index );
    [
    id(0x000003EC)
    ]
    void deleteCell([in, optional, defaultvalue(-1)] long index );
    [
    propput, 
    id(0x80010006)
    ]
    void height(VARIANT Param1 );
    [
    propget, 
    id(0x80010006)
    ]
    VARIANT height( void );
    [
    propput, 
    id(0x000003F1), 
    bindable, 
    displaybind
    ]
    void ch(BSTR Param1 );
    [
    propget, 
    id(0x000003F1), 
    bindable, 
    displaybind
    ]
    BSTR ch( void );
    [
    propput, 
    id(0x000003F2), 
    bindable, 
    displaybind
    ]
    void chOff(BSTR Param1 );
    [
    propget, 
    id(0x000003F2), 
    bindable, 
    displaybind
    ]
    BSTR chOff( void );
  };

  [
    uuid(3050F536-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLTableCell
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x000007D1)
    ]
    void rowSpan(long Param1 );
    [
    propget, 
    id(0x000007D1)
    ]
    long rowSpan( void );
    [
    propput, 
    id(0x000007D2)
    ]
    void colSpan(long Param1 );
    [
    propget, 
    id(0x000007D2)
    ]
    long colSpan( void );
    [
    propput, 
    id(0x80010048)
    ]
    void align(BSTR Param1 );
    [
    propget, 
    id(0x80010048)
    ]
    BSTR align( void );
    [
    propput, 
    id(0x800113A7)
    ]
    void vAlign(BSTR Param1 );
    [
    propget, 
    id(0x800113A7)
    ]
    BSTR vAlign( void );
    [
    propput, 
    id(0xFFFFFE0B)
    ]
    void bgColor(VARIANT Param1 );
    [
    propget, 
    id(0xFFFFFE0B)
    ]
    VARIANT bgColor( void );
    [
    propput, 
    id(0x8001138D)
    ]
    void noWrap(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001138D)
    ]
    VARIANT_BOOL noWrap( void );
    [
    propput, 
    id(0x80011389)
    ]
    void background(BSTR Param1 );
    [
    propget, 
    id(0x80011389)
    ]
    BSTR background( void );
    [
    propput, 
    id(0x800113A4)
    ]
    void borderColor(VARIANT Param1 );
    [
    propget, 
    id(0x800113A4)
    ]
    VARIANT borderColor( void );
    [
    propput, 
    id(0x800113A5)
    ]
    void borderColorLight(VARIANT Param1 );
    [
    propget, 
    id(0x800113A5)
    ]
    VARIANT borderColorLight( void );
    [
    propput, 
    id(0x800113A6)
    ]
    void borderColorDark(VARIANT Param1 );
    [
    propget, 
    id(0x800113A6)
    ]
    VARIANT borderColorDark( void );
    [
    propput, 
    id(0x80010005)
    ]
    void width(VARIANT Param1 );
    [
    propget, 
    id(0x80010005)
    ]
    VARIANT width( void );
    [
    propput, 
    id(0x80010006)
    ]
    void height(VARIANT Param1 );
    [
    propget, 
    id(0x80010006)
    ]
    VARIANT height( void );
    [
    propget, 
    id(0x000007D3)
    ]
    long cellIndex( void );
    [
    propput, 
    id(0x000007D4), 
    bindable, 
    displaybind
    ]
    void abbr(BSTR Param1 );
    [
    propget, 
    id(0x000007D4), 
    bindable, 
    displaybind
    ]
    BSTR abbr( void );
    [
    propput, 
    id(0x000007D5), 
    bindable, 
    displaybind
    ]
    void axis(BSTR Param1 );
    [
    propget, 
    id(0x000007D5), 
    bindable, 
    displaybind
    ]
    BSTR axis( void );
    [
    propput, 
    id(0x000007D6), 
    bindable, 
    displaybind
    ]
    void ch(BSTR Param1 );
    [
    propget, 
    id(0x000007D6), 
    bindable, 
    displaybind
    ]
    BSTR ch( void );
    [
    propput, 
    id(0x000007D7), 
    bindable, 
    displaybind
    ]
    void chOff(BSTR Param1 );
    [
    propget, 
    id(0x000007D7), 
    bindable, 
    displaybind
    ]
    BSTR chOff( void );
    [
    propput, 
    id(0x000007D8), 
    bindable, 
    displaybind
    ]
    void headers(BSTR Param1 );
    [
    propget, 
    id(0x000007D8), 
    bindable, 
    displaybind
    ]
    BSTR headers( void );
    [
    propput, 
    id(0x000007D9), 
    bindable, 
    displaybind
    ]
    void scope(BSTR Param1 );
    [
    propget, 
    id(0x000007D9), 
    bindable, 
    displaybind
    ]
    BSTR scope( void );
  };

  [
    uuid(3050F621-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface HTMLScriptEvents2
  {
    properties:
    methods:
    [
    id(0x8001000A)
    ]
    VARIANT_BOOL onhelp([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA8)
    ]
    VARIANT_BOOL onclick([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA7)
    ]
    VARIANT_BOOL ondblclick([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA5)
    ]
    VARIANT_BOOL onkeypress([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA6)
    ]
    void onkeydown([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA4)
    ]
    void onkeyup([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010009)
    ]
    void onmouseout([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010008)
    ]
    void onmouseover([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA2)
    ]
    void onmousemove([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA3)
    ]
    void onmousedown([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA1)
    ]
    void onmouseup([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000C)
    ]
    VARIANT_BOOL onselectstart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010011)
    ]
    void onfilterchange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000B)
    ]
    VARIANT_BOOL ondragstart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010004)
    ]
    VARIANT_BOOL onbeforeupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010005)
    ]
    void onafterupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000D)
    ]
    VARIANT_BOOL onerrorupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010006)
    ]
    VARIANT_BOOL onrowexit([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010007)
    ]
    void onrowenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000E)
    ]
    void ondatasetchanged([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000F)
    ]
    void ondataavailable([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010010)
    ]
    void ondatasetcomplete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010012)
    ]
    void onlosecapture([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010013)
    ]
    void onpropertychange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003F6)
    ]
    void onscroll([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010001)
    ]
    void onfocus([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010000)
    ]
    void onblur([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003F8)
    ]
    void onresize([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010014)
    ]
    VARIANT_BOOL ondrag([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010015)
    ]
    void ondragend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010016)
    ]
    VARIANT_BOOL ondragenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010017)
    ]
    VARIANT_BOOL ondragover([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010018)
    ]
    void ondragleave([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010019)
    ]
    VARIANT_BOOL ondrop([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001D)
    ]
    VARIANT_BOOL onbeforecut([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001A)
    ]
    VARIANT_BOOL oncut([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001E)
    ]
    VARIANT_BOOL onbeforecopy([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001B)
    ]
    VARIANT_BOOL oncopy([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001F)
    ]
    VARIANT_BOOL onbeforepaste([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001C)
    ]
    VARIANT_BOOL onpaste([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003FF)
    ]
    VARIANT_BOOL oncontextmenu([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010020)
    ]
    void onrowsdelete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010021)
    ]
    void onrowsinserted([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010022)
    ]
    void oncellchange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFD9F)
    ]
    void onreadystatechange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000406)
    ]
    void onlayoutcomplete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000407)
    ]
    void onpage([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000412)
    ]
    void onmouseenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000413)
    ]
    void onmouseleave([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000414)
    ]
    void onactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000415)
    ]
    void ondeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040A)
    ]
    VARIANT_BOOL onbeforedeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000417)
    ]
    VARIANT_BOOL onbeforeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000418)
    ]
    void onfocusin([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000419)
    ]
    void onfocusout([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040B)
    ]
    void onmove([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040C)
    ]
    VARIANT_BOOL oncontrolselect([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040E)
    ]
    VARIANT_BOOL onmovestart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040F)
    ]
    void onmoveend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000410)
    ]
    VARIANT_BOOL onresizestart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000411)
    ]
    void onresizeend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000409)
    ]
    VARIANT_BOOL onmousewheel([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003EA)
    ]
    void onerror([in] IHTMLEventObj * pEvtObj  );
  };

  [
    uuid(3050F530-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLScriptElement
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x000003E9), 
    bindable, 
    displaybind
    ]
    void src(BSTR Param1 );
    [
    propget, 
    id(0x000003E9), 
    bindable, 
    displaybind
    ]
    BSTR src( void );
    [
    propput, 
    id(0x000003EC), 
    bindable, 
    displaybind
    ]
    void htmlFor(BSTR Param1 );
    [
    propget, 
    id(0x000003EC), 
    bindable, 
    displaybind
    ]
    BSTR htmlFor( void );
    [
    propput, 
    id(0x000003ED), 
    bindable, 
    displaybind
    ]
    void event(BSTR Param1 );
    [
    propget, 
    id(0x000003ED), 
    bindable, 
    displaybind
    ]
    BSTR event( void );
    [
    propput, 
    id(0x000003EE), 
    bindable, 
    displaybind
    ]
    void text(BSTR Param1 );
    [
    propget, 
    id(0x000003EE), 
    bindable, 
    displaybind
    ]
    BSTR text( void );
    [
    propput, 
    id(0x000003EF), 
    bindable, 
    displaybind
    ]
    void defer(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x000003EF), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL defer( void );
    [
    propput, 
    id(0x8001178D), 
    bindable, 
    displaybind
    ]
    void onerror(VARIANT Param1 );
    [
    propget, 
    id(0x8001178D), 
    bindable, 
    displaybind
    ]
    VARIANT onerror( void );
    [
    propput, 
    id(0x000003F1), 
    bindable, 
    displaybind
    ]
    void type(BSTR Param1 );
    [
    propget, 
    id(0x000003F1), 
    bindable, 
    displaybind
    ]
    BSTR type( void );
    [
    propput, 
    id(0x000003F2), 
    bindable, 
    displaybind
    ]
    void charset(BSTR Param1 );
    [
    propget, 
    id(0x000003F2), 
    bindable, 
    displaybind
    ]
    BSTR charset( void );
  };

  [
    uuid(3050F528-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLNoShowElement
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
  };

  [
    uuid(3050F620-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface HTMLObjectElementEvents2
  {
    properties:
    methods:
    [
    id(0x80010004)
    ]
    VARIANT_BOOL onbeforeupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010005)
    ]
    void onafterupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000D)
    ]
    VARIANT_BOOL onerrorupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010006)
    ]
    VARIANT_BOOL onrowexit([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010007)
    ]
    void onrowenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000E)
    ]
    void ondatasetchanged([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000F)
    ]
    void ondataavailable([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010010)
    ]
    void ondatasetcomplete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010013)
    ]
    VARIANT_BOOL onerror([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010020)
    ]
    void onrowsdelete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010021)
    ]
    void onrowsinserted([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010022)
    ]
    void oncellchange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010014)
    ]
    void onreadystatechange([in] IHTMLEventObj * pEvtObj  );
  };

  [
    uuid(3050F24F-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLObjectElement: IDispatch
  {
    [
    propget, 
    id(0x80010BB9), 
    hidden
    ]
    HRESULT _stdcall object([out, retval]  IDispatch ** p );
    [
    propget, 
    id(0x80010BBA), 
    hidden
    ]
    HRESULT _stdcall classid([out, retval] BSTR * p );
    [
    propget, 
    id(0x80010BBB), 
    hidden
    ]
    HRESULT _stdcall data([out, retval] BSTR * p );
    [
    propputref, 
    id(0x80010BBD), 
    hidden
    ]
    HRESULT _stdcall recordset([in]  IDispatch * p );
    [
    propget, 
    id(0x80010BBD), 
    hidden
    ]
    HRESULT _stdcall recordset([out, retval]  IDispatch ** p );
    [
    propput, 
    id(0x80010049), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall align([in] BSTR p );
    [
    propget, 
    id(0x80010049), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall align([out, retval] BSTR * p );
    [
    propput, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall name([in] BSTR p );
    [
    propget, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall name([out, retval] BSTR * p );
    [
    propput, 
    id(0x80010BBE), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall codeBase([in] BSTR p );
    [
    propget, 
    id(0x80010BBE), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall codeBase([out, retval] BSTR * p );
    [
    propput, 
    id(0x80010BBF), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall codeType([in] BSTR p );
    [
    propget, 
    id(0x80010BBF), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall codeType([out, retval] BSTR * p );
    [
    propput, 
    id(0x80010BC0), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall code([in] BSTR p );
    [
    propget, 
    id(0x80010BC0), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall code([out, retval] BSTR * p );
    [
    propget, 
    id(0x80010002)
    ]
    HRESULT _stdcall BaseHref([out, retval] BSTR * p );
    [
    propput, 
    id(0x80010BC1), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall type([in] BSTR p );
    [
    propget, 
    id(0x80010BC1), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall type([out, retval] BSTR * p );
    [
    propget, 
    id(0x800107D4)
    ]
    HRESULT _stdcall form([out, retval] IHTMLFormElement ** p  );
    [
    propput, 
    id(0x80010005)
    ]
    HRESULT _stdcall width([in] VARIANT p );
    [
    propget, 
    id(0x80010005)
    ]
    HRESULT _stdcall width([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80010006)
    ]
    HRESULT _stdcall height([in] VARIANT p );
    [
    propget, 
    id(0x80010006)
    ]
    HRESULT _stdcall height([out, retval] VARIANT * p );
    [
    propget, 
    id(0x80010BC2), 
    hidden
    ]
    HRESULT _stdcall readyState([out, retval] long * p );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onreadystatechange([in] VARIANT p );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onreadystatechange([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001178D), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onerror([in] VARIANT p );
    [
    propget, 
    id(0x8001178D), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onerror([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80010BC3)
    ]
    HRESULT _stdcall altHtml([in] BSTR p );
    [
    propget, 
    id(0x80010BC3)
    ]
    HRESULT _stdcall altHtml([out, retval] BSTR * p );
    [
    propput, 
    id(0x80010BC4)
    ]
    HRESULT _stdcall vspace([in] long p );
    [
    propget, 
    id(0x80010BC4)
    ]
    HRESULT _stdcall vspace([out, retval] long * p );
    [
    propput, 
    id(0x80010BC5)
    ]
    HRESULT _stdcall hspace([in] long p );
    [
    propget, 
    id(0x80010BC5)
    ]
    HRESULT _stdcall hspace([out, retval] long * p );
  };

  [
    uuid(3050F4CD-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLObjectElement2: IDispatch
  {
    [
    id(0x80010BC6)
    ]
    HRESULT _stdcall namedRecordset([in] BSTR dataMember, [in, optional] VARIANT * hierarchy, [out, retval]  IDispatch ** ppRecordset );
    [
    propput, 
    id(0x80010BBA), 
    hidden
    ]
    HRESULT _stdcall classid([in] BSTR p );
    [
    propget, 
    id(0x80010BBA), 
    hidden
    ]
    HRESULT _stdcall classid([out, retval] BSTR * p );
    [
    propput, 
    id(0x80010BBB), 
    hidden
    ]
    HRESULT _stdcall data([in] BSTR p );
    [
    propget, 
    id(0x80010BBB), 
    hidden
    ]
    HRESULT _stdcall data([out, retval] BSTR * p );
  };

  [
    uuid(3050F529-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLObjectElement
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x800103FD)
    ]
    void dataFld(BSTR Param1 );
    [
    propget, 
    id(0x800103FD)
    ]
    BSTR dataFld( void );
    [
    propput, 
    id(0x800103FE)
    ]
    void dataSrc(BSTR Param1 );
    [
    propget, 
    id(0x800103FE)
    ]
    BSTR dataSrc( void );
    [
    propput, 
    id(0x800103FF)
    ]
    void dataFormatAs(BSTR Param1 );
    [
    propget, 
    id(0x800103FF)
    ]
    BSTR dataFormatAs( void );
    [
    propget, 
    id(0x80010BB9), 
    hidden
    ]
     IDispatch * object( void );
    [
    propputref, 
    id(0x80010BBD), 
    hidden
    ]
    void recordset( IDispatch * Param1 );
    [
    propget, 
    id(0x80010BBD), 
    hidden
    ]
     IDispatch * recordset( void );
    [
    propput, 
    id(0x80010049), 
    bindable, 
    displaybind
    ]
    void align(BSTR Param1 );
    [
    propget, 
    id(0x80010049), 
    bindable, 
    displaybind
    ]
    BSTR align( void );
    [
    propput, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    void name(BSTR Param1 );
    [
    propget, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    BSTR name( void );
    [
    propput, 
    id(0x80010BBE), 
    bindable, 
    displaybind
    ]
    void codeBase(BSTR Param1 );
    [
    propget, 
    id(0x80010BBE), 
    bindable, 
    displaybind
    ]
    BSTR codeBase( void );
    [
    propput, 
    id(0x80010BBF), 
    bindable, 
    displaybind
    ]
    void codeType(BSTR Param1 );
    [
    propget, 
    id(0x80010BBF), 
    bindable, 
    displaybind
    ]
    BSTR codeType( void );
    [
    propput, 
    id(0x80010BC0), 
    bindable, 
    displaybind
    ]
    void code(BSTR Param1 );
    [
    propget, 
    id(0x80010BC0), 
    bindable, 
    displaybind
    ]
    BSTR code( void );
    [
    propget, 
    id(0x80010002)
    ]
    BSTR BaseHref( void );
    [
    propput, 
    id(0x80010BC1), 
    bindable, 
    displaybind
    ]
    void type(BSTR Param1 );
    [
    propget, 
    id(0x80010BC1), 
    bindable, 
    displaybind
    ]
    BSTR type( void );
    [
    propget, 
    id(0x800107D4)
    ]
    IHTMLFormElement * form( void );
    [
    propput, 
    id(0x80010005)
    ]
    void width(VARIANT Param1 );
    [
    propget, 
    id(0x80010005)
    ]
    VARIANT width( void );
    [
    propput, 
    id(0x80010006)
    ]
    void height(VARIANT Param1 );
    [
    propget, 
    id(0x80010006)
    ]
    VARIANT height( void );
    [
    propput, 
    id(0x8001178D), 
    bindable, 
    displaybind
    ]
    void onerror(VARIANT Param1 );
    [
    propget, 
    id(0x8001178D), 
    bindable, 
    displaybind
    ]
    VARIANT onerror( void );
    [
    propput, 
    id(0x80010BC3)
    ]
    void altHtml(BSTR Param1 );
    [
    propget, 
    id(0x80010BC3)
    ]
    BSTR altHtml( void );
    [
    propput, 
    id(0x80010BC4)
    ]
    void vspace(long Param1 );
    [
    propget, 
    id(0x80010BC4)
    ]
    long vspace( void );
    [
    propput, 
    id(0x80010BC5)
    ]
    void hspace(long Param1 );
    [
    propget, 
    id(0x80010BC5)
    ]
    long hspace( void );
    [
    id(0x80010BC6)
    ]
     IDispatch * namedRecordset([in] BSTR dataMember, [in, optional] VARIANT * hierarchy );
    [
    propput, 
    id(0x80010BBA), 
    hidden
    ]
    void classid(BSTR Param1 );
    [
    propget, 
    id(0x80010BBA), 
    hidden
    ]
    BSTR classid( void );
    [
    propput, 
    id(0x80010BBB), 
    hidden
    ]
    void data(BSTR Param1 );
    [
    propget, 
    id(0x80010BBB), 
    hidden
    ]
    BSTR data( void );
    [
    propput, 
    id(0x80010BC7), 
    bindable, 
    displaybind
    ]
    void archive(BSTR Param1 );
    [
    propget, 
    id(0x80010BC7), 
    bindable, 
    displaybind
    ]
    BSTR archive( void );
    [
    propput, 
    id(0x80010BC8), 
    bindable, 
    displaybind
    ]
    void alt(BSTR Param1 );
    [
    propget, 
    id(0x80010BC8), 
    bindable, 
    displaybind
    ]
    BSTR alt( void );
    [
    propput, 
    id(0x80010BC9), 
    bindable, 
    displaybind
    ]
    void declare(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x80010BC9), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL declare( void );
    [
    propput, 
    id(0x80010BCA), 
    bindable, 
    displaybind
    ]
    void standby(BSTR Param1 );
    [
    propget, 
    id(0x80010BCA), 
    bindable, 
    displaybind
    ]
    BSTR standby( void );
    [
    propput, 
    id(0x80010BCB)
    ]
    void border(VARIANT Param1 );
    [
    propget, 
    id(0x80010BCB)
    ]
    VARIANT border( void );
    [
    propput, 
    id(0x80010BCC), 
    bindable, 
    displaybind
    ]
    void useMap(BSTR Param1 );
    [
    propget, 
    id(0x80010BCC), 
    bindable, 
    displaybind
    ]
    BSTR useMap( void );
  };

  [
    uuid(3050F590-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLParamElement
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x000003E9), 
    bindable, 
    displaybind
    ]
    void name(BSTR Param1 );
    [
    propget, 
    id(0x000003E9), 
    bindable, 
    displaybind
    ]
    BSTR name( void );
    [
    propput, 
    id(0x000003EA), 
    bindable, 
    displaybind
    ]
    void value(BSTR Param1 );
    [
    propget, 
    id(0x000003EA), 
    bindable, 
    displaybind
    ]
    BSTR value( void );
    [
    propput, 
    id(0x000003EB), 
    bindable, 
    displaybind
    ]
    void type(BSTR Param1 );
    [
    propget, 
    id(0x000003EB), 
    bindable, 
    displaybind
    ]
    BSTR type( void );
    [
    propput, 
    id(0x000003EC), 
    bindable, 
    displaybind
    ]
    void valueType(BSTR Param1 );
    [
    propget, 
    id(0x000003EC), 
    bindable, 
    displaybind
    ]
    BSTR valueType( void );
  };

  [
    uuid(3050F7FF-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface HTMLFrameSiteEvents2
  {
    properties:
    methods:
    [
    id(0x8001000A)
    ]
    VARIANT_BOOL onhelp([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA8)
    ]
    VARIANT_BOOL onclick([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA7)
    ]
    VARIANT_BOOL ondblclick([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA5)
    ]
    VARIANT_BOOL onkeypress([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA6)
    ]
    void onkeydown([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA4)
    ]
    void onkeyup([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010009)
    ]
    void onmouseout([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010008)
    ]
    void onmouseover([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA2)
    ]
    void onmousemove([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA3)
    ]
    void onmousedown([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA1)
    ]
    void onmouseup([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000C)
    ]
    VARIANT_BOOL onselectstart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010011)
    ]
    void onfilterchange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000B)
    ]
    VARIANT_BOOL ondragstart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010004)
    ]
    VARIANT_BOOL onbeforeupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010005)
    ]
    void onafterupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000D)
    ]
    VARIANT_BOOL onerrorupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010006)
    ]
    VARIANT_BOOL onrowexit([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010007)
    ]
    void onrowenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000E)
    ]
    void ondatasetchanged([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000F)
    ]
    void ondataavailable([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010010)
    ]
    void ondatasetcomplete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010012)
    ]
    void onlosecapture([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010013)
    ]
    void onpropertychange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003F6)
    ]
    void onscroll([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010001)
    ]
    void onfocus([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010000)
    ]
    void onblur([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003F8)
    ]
    void onresize([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010014)
    ]
    VARIANT_BOOL ondrag([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010015)
    ]
    void ondragend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010016)
    ]
    VARIANT_BOOL ondragenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010017)
    ]
    VARIANT_BOOL ondragover([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010018)
    ]
    void ondragleave([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010019)
    ]
    VARIANT_BOOL ondrop([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001D)
    ]
    VARIANT_BOOL onbeforecut([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001A)
    ]
    VARIANT_BOOL oncut([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001E)
    ]
    VARIANT_BOOL onbeforecopy([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001B)
    ]
    VARIANT_BOOL oncopy([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001F)
    ]
    VARIANT_BOOL onbeforepaste([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001C)
    ]
    VARIANT_BOOL onpaste([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003FF)
    ]
    VARIANT_BOOL oncontextmenu([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010020)
    ]
    void onrowsdelete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010021)
    ]
    void onrowsinserted([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010022)
    ]
    void oncellchange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFD9F)
    ]
    void onreadystatechange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000406)
    ]
    void onlayoutcomplete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000407)
    ]
    void onpage([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000412)
    ]
    void onmouseenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000413)
    ]
    void onmouseleave([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000414)
    ]
    void onactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000415)
    ]
    void ondeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040A)
    ]
    VARIANT_BOOL onbeforedeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000417)
    ]
    VARIANT_BOOL onbeforeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000418)
    ]
    void onfocusin([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000419)
    ]
    void onfocusout([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040B)
    ]
    void onmove([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040C)
    ]
    VARIANT_BOOL oncontrolselect([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040E)
    ]
    VARIANT_BOOL onmovestart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040F)
    ]
    void onmoveend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000410)
    ]
    VARIANT_BOOL onresizestart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000411)
    ]
    void onresizeend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000409)
    ]
    VARIANT_BOOL onmousewheel([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003EB)
    ]
    void onload([in] IHTMLEventObj * pEvtObj  );
  };

  [
    uuid(3050F6DB-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLFrameBase2: IDispatch
  {
    [
    propget, 
    id(0x80010BC1)
    ]
    HRESULT _stdcall contentWindow([out, retval] IHTMLWindow2 ** p  );
    [
    propput, 
    id(0x80011790), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onload([in] VARIANT p );
    [
    propget, 
    id(0x80011790), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onload([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onreadystatechange([in] VARIANT p );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onreadystatechange([out, retval] VARIANT * p );
    [
    propget, 
    id(0x800113FC)
    ]
    HRESULT _stdcall readyState([out, retval] BSTR * p );
    [
    propput, 
    id(0x80011456)
    ]
    HRESULT _stdcall allowTransparency([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x80011456)
    ]
    HRESULT _stdcall allowTransparency([out, retval] VARIANT_BOOL * p );
  };

  [
    uuid(3050F541-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLFrameBase
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x80010BB8)
    ]
    void src(BSTR Param1 );
    [
    propget, 
    id(0x80010BB8)
    ]
    BSTR src( void );
    [
    propput, 
    id(0x80010000)
    ]
    void name(BSTR Param1 );
    [
    propget, 
    id(0x80010000)
    ]
    BSTR name( void );
    [
    propput, 
    id(0x80010BBA)
    ]
    void border(VARIANT Param1 );
    [
    propget, 
    id(0x80010BBA)
    ]
    VARIANT border( void );
    [
    propput, 
    id(0x80010BBB)
    ]
    void frameBorder(BSTR Param1 );
    [
    propget, 
    id(0x80010BBB)
    ]
    BSTR frameBorder( void );
    [
    propput, 
    id(0x80010BBC)
    ]
    void frameSpacing(VARIANT Param1 );
    [
    propget, 
    id(0x80010BBC)
    ]
    VARIANT frameSpacing( void );
    [
    propput, 
    id(0x80010BBD)
    ]
    void marginWidth(VARIANT Param1 );
    [
    propget, 
    id(0x80010BBD)
    ]
    VARIANT marginWidth( void );
    [
    propput, 
    id(0x80010BBE)
    ]
    void marginHeight(VARIANT Param1 );
    [
    propget, 
    id(0x80010BBE)
    ]
    VARIANT marginHeight( void );
    [
    propput, 
    id(0x80010BBF)
    ]
    void noResize(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x80010BBF)
    ]
    VARIANT_BOOL noResize( void );
    [
    propput, 
    id(0x80010BC0)
    ]
    void scrolling(BSTR Param1 );
    [
    propget, 
    id(0x80010BC0)
    ]
    BSTR scrolling( void );
    [
    propget, 
    id(0x80010BC1)
    ]
    IHTMLWindow2 * contentWindow( void );
    [
    propput, 
    id(0x80011790), 
    bindable, 
    displaybind
    ]
    void onload(VARIANT Param1 );
    [
    propget, 
    id(0x80011790), 
    bindable, 
    displaybind
    ]
    VARIANT onload( void );
    [
    propput, 
    id(0x80011456)
    ]
    void allowTransparency(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x80011456)
    ]
    VARIANT_BOOL allowTransparency( void );
    [
    propput, 
    id(0x80010BC2), 
    bindable, 
    displaybind
    ]
    void longDesc(BSTR Param1 );
    [
    propget, 
    id(0x80010BC2), 
    bindable, 
    displaybind
    ]
    BSTR longDesc( void );
  };

  [
    uuid(3050F513-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLFrameElement
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x800103FD)
    ]
    void dataFld(BSTR Param1 );
    [
    propget, 
    id(0x800103FD)
    ]
    BSTR dataFld( void );
    [
    propput, 
    id(0x800103FE)
    ]
    void dataSrc(BSTR Param1 );
    [
    propget, 
    id(0x800103FE)
    ]
    BSTR dataSrc( void );
    [
    propput, 
    id(0x800103FF)
    ]
    void dataFormatAs(BSTR Param1 );
    [
    propget, 
    id(0x800103FF)
    ]
    BSTR dataFormatAs( void );
    [
    propput, 
    id(0x80010BB8)
    ]
    void src(BSTR Param1 );
    [
    propget, 
    id(0x80010BB8)
    ]
    BSTR src( void );
    [
    propput, 
    id(0x80010000)
    ]
    void name(BSTR Param1 );
    [
    propget, 
    id(0x80010000)
    ]
    BSTR name( void );
    [
    propput, 
    id(0x80010BBA)
    ]
    void border(VARIANT Param1 );
    [
    propget, 
    id(0x80010BBA)
    ]
    VARIANT border( void );
    [
    propput, 
    id(0x80010BBB)
    ]
    void frameBorder(BSTR Param1 );
    [
    propget, 
    id(0x80010BBB)
    ]
    BSTR frameBorder( void );
    [
    propput, 
    id(0x80010BBC)
    ]
    void frameSpacing(VARIANT Param1 );
    [
    propget, 
    id(0x80010BBC)
    ]
    VARIANT frameSpacing( void );
    [
    propput, 
    id(0x80010BBD)
    ]
    void marginWidth(VARIANT Param1 );
    [
    propget, 
    id(0x80010BBD)
    ]
    VARIANT marginWidth( void );
    [
    propput, 
    id(0x80010BBE)
    ]
    void marginHeight(VARIANT Param1 );
    [
    propget, 
    id(0x80010BBE)
    ]
    VARIANT marginHeight( void );
    [
    propput, 
    id(0x80010BBF)
    ]
    void noResize(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x80010BBF)
    ]
    VARIANT_BOOL noResize( void );
    [
    propput, 
    id(0x80010BC0)
    ]
    void scrolling(BSTR Param1 );
    [
    propget, 
    id(0x80010BC0)
    ]
    BSTR scrolling( void );
    [
    propget, 
    id(0x80010BC1)
    ]
    IHTMLWindow2 * contentWindow( void );
    [
    propput, 
    id(0x80011790), 
    bindable, 
    displaybind
    ]
    void onload(VARIANT Param1 );
    [
    propget, 
    id(0x80011790), 
    bindable, 
    displaybind
    ]
    VARIANT onload( void );
    [
    propput, 
    id(0x80011456)
    ]
    void allowTransparency(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x80011456)
    ]
    VARIANT_BOOL allowTransparency( void );
    [
    propput, 
    id(0x80010BC2), 
    bindable, 
    displaybind
    ]
    void longDesc(BSTR Param1 );
    [
    propget, 
    id(0x80010BC2), 
    bindable, 
    displaybind
    ]
    BSTR longDesc( void );
    [
    propput, 
    id(0x80010FA1)
    ]
    void borderColor(VARIANT Param1 );
    [
    propget, 
    id(0x80010FA1)
    ]
    VARIANT borderColor( void );
    [
    propput, 
    id(0x80010006)
    ]
    void height(VARIANT Param1 );
    [
    propget, 
    id(0x80010006)
    ]
    VARIANT height( void );
    [
    propput, 
    id(0x80010005)
    ]
    void width(VARIANT Param1 );
    [
    propget, 
    id(0x80010005)
    ]
    VARIANT width( void );
  };

  [
    uuid(3050F51B-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLIFrame
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x800103FD)
    ]
    void dataFld(BSTR Param1 );
    [
    propget, 
    id(0x800103FD)
    ]
    BSTR dataFld( void );
    [
    propput, 
    id(0x800103FE)
    ]
    void dataSrc(BSTR Param1 );
    [
    propget, 
    id(0x800103FE)
    ]
    BSTR dataSrc( void );
    [
    propput, 
    id(0x800103FF)
    ]
    void dataFormatAs(BSTR Param1 );
    [
    propget, 
    id(0x800103FF)
    ]
    BSTR dataFormatAs( void );
    [
    propput, 
    id(0x80010BB8)
    ]
    void src(BSTR Param1 );
    [
    propget, 
    id(0x80010BB8)
    ]
    BSTR src( void );
    [
    propput, 
    id(0x80010000)
    ]
    void name(BSTR Param1 );
    [
    propget, 
    id(0x80010000)
    ]
    BSTR name( void );
    [
    propput, 
    id(0x80010BBA)
    ]
    void border(VARIANT Param1 );
    [
    propget, 
    id(0x80010BBA)
    ]
    VARIANT border( void );
    [
    propput, 
    id(0x80010BBB)
    ]
    void frameBorder(BSTR Param1 );
    [
    propget, 
    id(0x80010BBB)
    ]
    BSTR frameBorder( void );
    [
    propput, 
    id(0x80010BBC)
    ]
    void frameSpacing(VARIANT Param1 );
    [
    propget, 
    id(0x80010BBC)
    ]
    VARIANT frameSpacing( void );
    [
    propput, 
    id(0x80010BBD)
    ]
    void marginWidth(VARIANT Param1 );
    [
    propget, 
    id(0x80010BBD)
    ]
    VARIANT marginWidth( void );
    [
    propput, 
    id(0x80010BBE)
    ]
    void marginHeight(VARIANT Param1 );
    [
    propget, 
    id(0x80010BBE)
    ]
    VARIANT marginHeight( void );
    [
    propput, 
    id(0x80010BBF)
    ]
    void noResize(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x80010BBF)
    ]
    VARIANT_BOOL noResize( void );
    [
    propput, 
    id(0x80010BC0)
    ]
    void scrolling(BSTR Param1 );
    [
    propget, 
    id(0x80010BC0)
    ]
    BSTR scrolling( void );
    [
    propget, 
    id(0x80010BC1)
    ]
    IHTMLWindow2 * contentWindow( void );
    [
    propput, 
    id(0x80011790), 
    bindable, 
    displaybind
    ]
    void onload(VARIANT Param1 );
    [
    propget, 
    id(0x80011790), 
    bindable, 
    displaybind
    ]
    VARIANT onload( void );
    [
    propput, 
    id(0x80011456)
    ]
    void allowTransparency(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x80011456)
    ]
    VARIANT_BOOL allowTransparency( void );
    [
    propput, 
    id(0x80010BC2), 
    bindable, 
    displaybind
    ]
    void longDesc(BSTR Param1 );
    [
    propget, 
    id(0x80010BC2), 
    bindable, 
    displaybind
    ]
    BSTR longDesc( void );
    [
    propput, 
    id(0x80010FA1)
    ]
    void vspace(long Param1 );
    [
    propget, 
    id(0x80010FA1)
    ]
    long vspace( void );
    [
    propput, 
    id(0x80010FA2)
    ]
    void hspace(long Param1 );
    [
    propget, 
    id(0x80010FA2)
    ]
    long hspace( void );
    [
    propput, 
    id(0x80010049), 
    bindable, 
    displaybind
    ]
    void align(BSTR Param1 );
    [
    propget, 
    id(0x80010049), 
    bindable, 
    displaybind
    ]
    BSTR align( void );
    [
    propput, 
    id(0x80010006)
    ]
    void height(VARIANT Param1 );
    [
    propget, 
    id(0x80010006)
    ]
    VARIANT height( void );
    [
    propput, 
    id(0x80010005)
    ]
    void width(VARIANT Param1 );
    [
    propget, 
    id(0x80010005)
    ]
    VARIANT width( void );
  };

  [
    uuid(3050F833-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLFieldSetElement2: IDispatch
  {
    [
    propget, 
    id(0x800107D4)
    ]
    HRESULT _stdcall form([out, retval] IHTMLFormElement ** p  );
  };

  [
    uuid(3050F834-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLLegendElement2: IDispatch
  {
    [
    propget, 
    id(0x800107D4)
    ]
    HRESULT _stdcall form([out, retval] IHTMLFormElement ** p  );
  };

  [
    uuid(3050F50F-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLDivPosition
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x800103FD)
    ]
    void dataFld(BSTR Param1 );
    [
    propget, 
    id(0x800103FD)
    ]
    BSTR dataFld( void );
    [
    propput, 
    id(0x800103FE)
    ]
    void dataSrc(BSTR Param1 );
    [
    propget, 
    id(0x800103FE)
    ]
    BSTR dataSrc( void );
    [
    propput, 
    id(0x800103FF)
    ]
    void dataFormatAs(BSTR Param1 );
    [
    propget, 
    id(0x800103FF)
    ]
    BSTR dataFormatAs( void );
    [
    propput, 
    id(0x80010049), 
    bindable, 
    displaybind
    ]
    void align(BSTR Param1 );
    [
    propget, 
    id(0x80010049), 
    bindable, 
    displaybind
    ]
    BSTR align( void );
  };

  [
    uuid(3050F545-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLFieldSetElement
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x80010049), 
    bindable, 
    displaybind
    ]
    void align(BSTR Param1 );
    [
    propget, 
    id(0x80010049), 
    bindable, 
    displaybind
    ]
    BSTR align( void );
    [
    propget, 
    id(0x800107D4)
    ]
    IHTMLFormElement * form( void );
  };

  [
    uuid(3050F546-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLLegendElement
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x800103FD)
    ]
    void dataFld(BSTR Param1 );
    [
    propget, 
    id(0x800103FD)
    ]
    BSTR dataFld( void );
    [
    propput, 
    id(0x800103FE)
    ]
    void dataSrc(BSTR Param1 );
    [
    propget, 
    id(0x800103FE)
    ]
    BSTR dataSrc( void );
    [
    propput, 
    id(0x800103FF)
    ]
    void dataFormatAs(BSTR Param1 );
    [
    propget, 
    id(0x800103FF)
    ]
    BSTR dataFormatAs( void );
    [
    propput, 
    id(0x80010049)
    ]
    void align(BSTR Param1 );
    [
    propget, 
    id(0x80010049)
    ]
    BSTR align( void );
    [
    propget, 
    id(0x800107D4)
    ]
    IHTMLFormElement * form( void );
  };

  [
    uuid(3050F544-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLSpanFlow
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x800103FD)
    ]
    void dataFld(BSTR Param1 );
    [
    propget, 
    id(0x800103FD)
    ]
    BSTR dataFld( void );
    [
    propput, 
    id(0x800103FE)
    ]
    void dataSrc(BSTR Param1 );
    [
    propget, 
    id(0x800103FE)
    ]
    BSTR dataSrc( void );
    [
    propput, 
    id(0x800103FF)
    ]
    void dataFormatAs(BSTR Param1 );
    [
    propget, 
    id(0x800103FF)
    ]
    BSTR dataFormatAs( void );
    [
    propput, 
    id(0x80010049), 
    bindable, 
    displaybind
    ]
    void align(BSTR Param1 );
    [
    propget, 
    id(0x80010049), 
    bindable, 
    displaybind
    ]
    BSTR align( void );
  };

  [
    uuid(3050F514-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLFrameSetSite
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x000003E8), 
    bindable, 
    displaybind
    ]
    void rows(BSTR Param1 );
    [
    propget, 
    id(0x000003E8), 
    bindable, 
    displaybind
    ]
    BSTR rows( void );
    [
    propput, 
    id(0x000003E9), 
    bindable, 
    displaybind
    ]
    void cols(BSTR Param1 );
    [
    propget, 
    id(0x000003E9), 
    bindable, 
    displaybind
    ]
    BSTR cols( void );
    [
    propput, 
    id(0x000003EA)
    ]
    void border(VARIANT Param1 );
    [
    propget, 
    id(0x000003EA)
    ]
    VARIANT border( void );
    [
    propput, 
    id(0x000003EB)
    ]
    void borderColor(VARIANT Param1 );
    [
    propget, 
    id(0x000003EB)
    ]
    VARIANT borderColor( void );
    [
    propput, 
    id(0x000003EC)
    ]
    void frameBorder(BSTR Param1 );
    [
    propget, 
    id(0x000003EC)
    ]
    BSTR frameBorder( void );
    [
    propput, 
    id(0x000003ED)
    ]
    void frameSpacing(VARIANT Param1 );
    [
    propget, 
    id(0x000003ED)
    ]
    VARIANT frameSpacing( void );
    [
    propput, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    void name(BSTR Param1 );
    [
    propget, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    BSTR name( void );
    [
    propput, 
    id(0x80011790), 
    bindable, 
    displaybind
    ]
    void onload(VARIANT Param1 );
    [
    propget, 
    id(0x80011790), 
    bindable, 
    displaybind
    ]
    VARIANT onload( void );
    [
    propput, 
    id(0x80011791), 
    bindable, 
    displaybind
    ]
    void onunload(VARIANT Param1 );
    [
    propget, 
    id(0x80011791), 
    bindable, 
    displaybind
    ]
    VARIANT onunload( void );
    [
    propput, 
    id(0x80011797), 
    bindable, 
    displaybind
    ]
    void onbeforeunload(VARIANT Param1 );
    [
    propget, 
    id(0x80011797), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeunload( void );
    [
    propput, 
    id(0x800117B2), 
    bindable, 
    displaybind
    ]
    void onbeforeprint(VARIANT Param1 );
    [
    propget, 
    id(0x800117B2), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeprint( void );
    [
    propput, 
    id(0x800117B3), 
    bindable, 
    displaybind
    ]
    void onafterprint(VARIANT Param1 );
    [
    propget, 
    id(0x800117B3), 
    bindable, 
    displaybind
    ]
    VARIANT onafterprint( void );
  };

  [
    uuid(3050F53C-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLBGsound
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x000003E9), 
    bindable, 
    displaybind
    ]
    void src(BSTR Param1 );
    [
    propget, 
    id(0x000003E9), 
    bindable, 
    displaybind
    ]
    BSTR src( void );
    [
    propput, 
    id(0x000003EA), 
    bindable, 
    displaybind
    ]
    void loop(VARIANT Param1 );
    [
    propget, 
    id(0x000003EA), 
    bindable, 
    displaybind
    ]
    VARIANT loop( void );
    [
    propput, 
    id(0x000003EB), 
    bindable, 
    displaybind
    ]
    void volume(VARIANT Param1 );
    [
    propget, 
    id(0x000003EB), 
    bindable, 
    displaybind
    ]
    VARIANT volume( void );
    [
    propput, 
    id(0x000003EC), 
    bindable, 
    displaybind
    ]
    void balance(VARIANT Param1 );
    [
    propget, 
    id(0x000003EC), 
    bindable, 
    displaybind
    ]
    VARIANT balance( void );
  };

  [
    uuid(3050F378-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLOptionsHolder: IDispatch
  {
    [
    propget, 
    id(0x000005DF), 
    hidden
    ]
    HRESULT _stdcall document([out, retval] IHTMLDocument2 ** p  );
    [
    propget, 
    id(0x000005E0), 
    hidden
    ]
    HRESULT _stdcall fonts([out, retval] IHTMLFontNamesCollection ** p  );
    [
    propput, 
    id(0x000005E1)
    ]
    HRESULT _stdcall execArg([in] VARIANT p );
    [
    propget, 
    id(0x000005E1)
    ]
    HRESULT _stdcall execArg([out, retval] VARIANT * p );
    [
    propput, 
    id(0x000005E2)
    ]
    HRESULT _stdcall errorLine([in] long p );
    [
    propget, 
    id(0x000005E2)
    ]
    HRESULT _stdcall errorLine([out, retval] long * p );
    [
    propput, 
    id(0x000005E3)
    ]
    HRESULT _stdcall errorCharacter([in] long p );
    [
    propget, 
    id(0x000005E3)
    ]
    HRESULT _stdcall errorCharacter([out, retval] long * p );
    [
    propput, 
    id(0x000005E4)
    ]
    HRESULT _stdcall errorCode([in] long p );
    [
    propget, 
    id(0x000005E4)
    ]
    HRESULT _stdcall errorCode([out, retval] long * p );
    [
    propput, 
    id(0x000005E5)
    ]
    HRESULT _stdcall errorMessage([in] BSTR p );
    [
    propget, 
    id(0x000005E5)
    ]
    HRESULT _stdcall errorMessage([out, retval] BSTR * p );
    [
    propput, 
    id(0x000005E6)
    ]
    HRESULT _stdcall errorDebug([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x000005E6)
    ]
    HRESULT _stdcall errorDebug([out, retval] VARIANT_BOOL * p );
    [
    propget, 
    id(0x000005E7), 
    hidden
    ]
    HRESULT _stdcall unsecuredWindowOfDocument([out, retval] IHTMLWindow2 ** p  );
    [
    propput, 
    id(0x000005E8)
    ]
    HRESULT _stdcall findText([in] BSTR p );
    [
    propget, 
    id(0x000005E8)
    ]
    HRESULT _stdcall findText([out, retval] BSTR * p );
    [
    propput, 
    id(0x000005E9)
    ]
    HRESULT _stdcall anythingAfterFrameset([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x000005E9)
    ]
    HRESULT _stdcall anythingAfterFrameset([out, retval] VARIANT_BOOL * p );
    [
    id(0x000005EA)
    ]
    HRESULT _stdcall sizes([in] BSTR fontName, [out, retval] IHTMLFontSizesCollection ** pSizesCollection  );
    [
    id(0x000005EB)
    ]
    HRESULT _stdcall openfiledlg([in, optional] VARIANT initFile, [in, optional] VARIANT initDir, [in, optional] VARIANT filter, [in, optional] VARIANT title, [out, retval] BSTR * pathname );
    [
    id(0x000005EC)
    ]
    HRESULT _stdcall savefiledlg([in, optional] VARIANT initFile, [in, optional] VARIANT initDir, [in, optional] VARIANT filter, [in, optional] VARIANT title, [out, retval] BSTR * pathname );
    [
    id(0x000005ED)
    ]
    HRESULT _stdcall choosecolordlg([in, optional] VARIANT initColor, [out, retval] long * rgbColor );
    [
    id(0x000005EE)
    ]
    HRESULT _stdcall showSecurityInfo( void );
    [
    id(0x000005EF)
    ]
    HRESULT _stdcall isApartmentModel([in] IHTMLObjectElement * object , [out, retval] VARIANT_BOOL * fApartment );
    [
    id(0x000005F0)
    ]
    HRESULT _stdcall getCharset([in] BSTR fontName, [out, retval] long * charset );
    [
    propget, 
    id(0x000005F1)
    ]
    HRESULT _stdcall secureConnectionInfo([out, retval] BSTR * p );
  };

  [
    uuid(3050F615-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface HTMLStyleElementEvents2
  {
    properties:
    methods:
    [
    id(0x8001000A)
    ]
    VARIANT_BOOL onhelp([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA8)
    ]
    VARIANT_BOOL onclick([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA7)
    ]
    VARIANT_BOOL ondblclick([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA5)
    ]
    VARIANT_BOOL onkeypress([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA6)
    ]
    void onkeydown([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA4)
    ]
    void onkeyup([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010009)
    ]
    void onmouseout([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010008)
    ]
    void onmouseover([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA2)
    ]
    void onmousemove([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA3)
    ]
    void onmousedown([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFDA1)
    ]
    void onmouseup([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000C)
    ]
    VARIANT_BOOL onselectstart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010011)
    ]
    void onfilterchange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000B)
    ]
    VARIANT_BOOL ondragstart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010004)
    ]
    VARIANT_BOOL onbeforeupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010005)
    ]
    void onafterupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000D)
    ]
    VARIANT_BOOL onerrorupdate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010006)
    ]
    VARIANT_BOOL onrowexit([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010007)
    ]
    void onrowenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000E)
    ]
    void ondatasetchanged([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001000F)
    ]
    void ondataavailable([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010010)
    ]
    void ondatasetcomplete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010012)
    ]
    void onlosecapture([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010013)
    ]
    void onpropertychange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003F6)
    ]
    void onscroll([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010001)
    ]
    void onfocus([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010000)
    ]
    void onblur([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003F8)
    ]
    void onresize([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010014)
    ]
    VARIANT_BOOL ondrag([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010015)
    ]
    void ondragend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010016)
    ]
    VARIANT_BOOL ondragenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010017)
    ]
    VARIANT_BOOL ondragover([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010018)
    ]
    void ondragleave([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010019)
    ]
    VARIANT_BOOL ondrop([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001D)
    ]
    VARIANT_BOOL onbeforecut([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001A)
    ]
    VARIANT_BOOL oncut([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001E)
    ]
    VARIANT_BOOL onbeforecopy([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001B)
    ]
    VARIANT_BOOL oncopy([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001F)
    ]
    VARIANT_BOOL onbeforepaste([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x8001001C)
    ]
    VARIANT_BOOL onpaste([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003FF)
    ]
    VARIANT_BOOL oncontextmenu([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010020)
    ]
    void onrowsdelete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010021)
    ]
    void onrowsinserted([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x80010022)
    ]
    void oncellchange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0xFFFFFD9F)
    ]
    void onreadystatechange([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000406)
    ]
    void onlayoutcomplete([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000407)
    ]
    void onpage([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000412)
    ]
    void onmouseenter([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000413)
    ]
    void onmouseleave([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000414)
    ]
    void onactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000415)
    ]
    void ondeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040A)
    ]
    VARIANT_BOOL onbeforedeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000417)
    ]
    VARIANT_BOOL onbeforeactivate([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000418)
    ]
    void onfocusin([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000419)
    ]
    void onfocusout([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040B)
    ]
    void onmove([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040C)
    ]
    VARIANT_BOOL oncontrolselect([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040E)
    ]
    VARIANT_BOOL onmovestart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x0000040F)
    ]
    void onmoveend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000410)
    ]
    VARIANT_BOOL onresizestart([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000411)
    ]
    void onresizeend([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x00000409)
    ]
    VARIANT_BOOL onmousewheel([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003EB)
    ]
    void onload([in] IHTMLEventObj * pEvtObj  );
    [
    id(0x000003EA)
    ]
    void onerror([in] IHTMLEventObj * pEvtObj  );
  };

  [
    uuid(3050F375-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLStyleElement: IDispatch
  {
    [
    propput, 
    id(0x000003EA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall type([in] BSTR p );
    [
    propget, 
    id(0x000003EA), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall type([out, retval] BSTR * p );
    [
    propget, 
    id(0x800113FC)
    ]
    HRESULT _stdcall readyState([out, retval] BSTR * p );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onreadystatechange([in] VARIANT p );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onreadystatechange([out, retval] VARIANT * p );
    [
    propput, 
    id(0x80011790), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onload([in] VARIANT p );
    [
    propget, 
    id(0x80011790), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onload([out, retval] VARIANT * p );
    [
    propput, 
    id(0x8001178D), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onerror([in] VARIANT p );
    [
    propget, 
    id(0x8001178D), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall onerror([out, retval] VARIANT * p );
    [
    propget, 
    id(0x000003EC)
    ]
    HRESULT _stdcall styleSheet([out, retval] IHTMLStyleSheet ** p  );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall disabled([in] VARIANT_BOOL p );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall disabled([out, retval] VARIANT_BOOL * p );
    [
    propput, 
    id(0x000003EE), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall media([in] BSTR p );
    [
    propget, 
    id(0x000003EE), 
    bindable, 
    displaybind
    ]
    HRESULT _stdcall media([out, retval] BSTR * p );
  };

  [
    uuid(3050F511-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLStyleElement
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propget, 
    id(0x8001040F)
    ]
    BSTR scopeName( void );
    [
    id(0x80010410)
    ]
    void setCapture([in, optional, defaultvalue(True)] VARIANT_BOOL containerCapture );
    [
    id(0x80010411)
    ]
    void releaseCapture( void );
    [
    propput, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    void onlosecapture(VARIANT Param1 );
    [
    propget, 
    id(0x8001179E), 
    bindable, 
    displaybind
    ]
    VARIANT onlosecapture( void );
    [
    id(0x80010412)
    ]
    BSTR componentFromPoint([in] long x, [in] long y );
    [
    id(0x80010413)
    ]
    void doScroll([in, optional] VARIANT component );
    [
    propput, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    void onscroll(VARIANT Param1 );
    [
    propget, 
    id(0x8001178F), 
    bindable, 
    displaybind
    ]
    VARIANT onscroll( void );
    [
    propput, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    void ondrag(VARIANT Param1 );
    [
    propget, 
    id(0x800117A1), 
    bindable, 
    displaybind
    ]
    VARIANT ondrag( void );
    [
    propput, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    void ondragend(VARIANT Param1 );
    [
    propget, 
    id(0x800117A2), 
    bindable, 
    displaybind
    ]
    VARIANT ondragend( void );
    [
    propput, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    void ondragenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117A3), 
    bindable, 
    displaybind
    ]
    VARIANT ondragenter( void );
    [
    propput, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    void ondragover(VARIANT Param1 );
    [
    propget, 
    id(0x800117A4), 
    bindable, 
    displaybind
    ]
    VARIANT ondragover( void );
    [
    propput, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    void ondragleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117A5), 
    bindable, 
    displaybind
    ]
    VARIANT ondragleave( void );
    [
    propput, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    void ondrop(VARIANT Param1 );
    [
    propget, 
    id(0x800117A6), 
    bindable, 
    displaybind
    ]
    VARIANT ondrop( void );
    [
    propput, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    void onbeforecut(VARIANT Param1 );
    [
    propget, 
    id(0x800117AA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecut( void );
    [
    propput, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    void oncut(VARIANT Param1 );
    [
    propget, 
    id(0x800117A7), 
    bindable, 
    displaybind
    ]
    VARIANT oncut( void );
    [
    propput, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    void onbeforecopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117AB), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforecopy( void );
    [
    propput, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    void oncopy(VARIANT Param1 );
    [
    propget, 
    id(0x800117A8), 
    bindable, 
    displaybind
    ]
    VARIANT oncopy( void );
    [
    propput, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    void onbeforepaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117AC), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforepaste( void );
    [
    propput, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    void onpaste(VARIANT Param1 );
    [
    propget, 
    id(0x800117A9), 
    bindable, 
    displaybind
    ]
    VARIANT onpaste( void );
    [
    propget, 
    id(0x800103EF), 
    nonbrowsable
    ]
    IHTMLCurrentStyle * currentStyle( void );
    [
    propput, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    void onpropertychange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179F), 
    bindable, 
    displaybind
    ]
    VARIANT onpropertychange( void );
    [
    id(0x80010414)
    ]
    IHTMLRectCollection * getClientRects( void );
    [
    id(0x80010415)
    ]
    IHTMLRect * getBoundingClientRect( void );
    [
    id(0x800101F8)
    ]
    void setExpression([in] BSTR propname, [in] BSTR expression, [in, optional, defaultvalue("")] BSTR language );
    [
    id(0x800101F9)
    ]
    VARIANT getExpression([in] BSTR propname );
    [
    id(0x800101FA)
    ]
    VARIANT_BOOL removeExpression([in] BSTR propname );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    id(0x800101FB)
    ]
    VARIANT_BOOL attachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    id(0x800101FC)
    ]
    void detachEvent([in] BSTR event, [in]  IDispatch * pdisp );
    [
    propget, 
    id(0x800113FC)
    ]
    VARIANT readyState( void );
    [
    propput, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    void onreadystatechange(VARIANT Param1 );
    [
    propget, 
    id(0x80011789), 
    bindable, 
    displaybind
    ]
    VARIANT onreadystatechange( void );
    [
    propput, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    void onrowsdelete(VARIANT Param1 );
    [
    propget, 
    id(0x800117AE), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsdelete( void );
    [
    propput, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    void onrowsinserted(VARIANT Param1 );
    [
    propget, 
    id(0x800117AF), 
    bindable, 
    displaybind
    ]
    VARIANT onrowsinserted( void );
    [
    propput, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    void oncellchange(VARIANT Param1 );
    [
    propget, 
    id(0x800117B0), 
    bindable, 
    displaybind
    ]
    VARIANT oncellchange( void );
    [
    propput, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    void dir(BSTR Param1 );
    [
    propget, 
    id(0x800113FD), 
    bindable, 
    displaybind
    ]
    BSTR dir( void );
    [
    id(0x80010420)
    ]
     IDispatch * createControlRange( void );
    [
    propget, 
    id(0x80010421), 
    bindable, 
    displaybind
    ]
    long scrollHeight( void );
    [
    propget, 
    id(0x80010422), 
    bindable, 
    displaybind
    ]
    long scrollWidth( void );
    [
    propput, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    void scrollTop(long Param1 );
    [
    propget, 
    id(0x80010423), 
    bindable, 
    displaybind
    ]
    long scrollTop( void );
    [
    propput, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    void scrollLeft(long Param1 );
    [
    propget, 
    id(0x80010424), 
    bindable, 
    displaybind
    ]
    long scrollLeft( void );
    [
    id(0x80010426)
    ]
    void clearAttributes( void );
    [
    propput, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    void oncontextmenu(VARIANT Param1 );
    [
    propget, 
    id(0x800117B1), 
    bindable, 
    displaybind
    ]
    VARIANT oncontextmenu( void );
    [
    id(0x8001042D)
    ]
    IHTMLElement * insertAdjacentElement([in] BSTR where, [in] IHTMLElement * insertedElement  );
    [
    id(0x80010429)
    ]
    IHTMLElement * applyElement([in] IHTMLElement * apply , [in] BSTR where );
    [
    id(0x8001042E)
    ]
    BSTR getAdjacentText([in] BSTR where );
    [
    id(0x8001042F)
    ]
    BSTR replaceAdjacentText([in] BSTR where, [in] BSTR newText );
    [
    propget, 
    id(0x80010430)
    ]
    VARIANT_BOOL canHaveChildren( void );
    [
    id(0x80010438)
    ]
    long addBehavior([in] BSTR bstrUrl, [in, optional] VARIANT * pvarFactory );
    [
    id(0x80010439)
    ]
    VARIANT_BOOL removeBehavior([in] long cookie );
    [
    propget, 
    id(0x80010428), 
    nonbrowsable
    ]
    IHTMLStyle * runtimeStyle( void );
    [
    propget, 
    id(0x8001043A)
    ]
     IDispatch * behaviorUrns( void );
    [
    propput, 
    id(0x8001043B)
    ]
    void tagUrn(BSTR Param1 );
    [
    propget, 
    id(0x8001043B)
    ]
    BSTR tagUrn( void );
    [
    propput, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    void onbeforeeditfocus(VARIANT Param1 );
    [
    propget, 
    id(0x800117B5), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeeditfocus( void );
    [
    propget, 
    id(0x8001043C), 
    restricted, 
    hidden
    ]
    long readyStateValue( void );
    [
    id(0x8001043D)
    ]
    IHTMLElementCollection * getElementsByTagName([in] BSTR v );
    [
    id(0x80010448)
    ]
    void mergeAttributes([in] IHTMLElement * mergeThis , [in, optional] VARIANT * pvarFlags );
    [
    propget, 
    id(0x80010449)
    ]
    VARIANT_BOOL isMultiLine( void );
    [
    propget, 
    id(0x8001044A)
    ]
    VARIANT_BOOL canHaveHTML( void );
    [
    propput, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    void onlayoutcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x800117B9), 
    bindable, 
    displaybind
    ]
    VARIANT onlayoutcomplete( void );
    [
    propput, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    void onpage(VARIANT Param1 );
    [
    propget, 
    id(0x800117BA), 
    bindable, 
    displaybind
    ]
    VARIANT onpage( void );
    [
    propput, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    void inflateBlock(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001044C), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    VARIANT_BOOL inflateBlock( void );
    [
    propput, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    void onbeforedeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117BD), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforedeactivate( void );
    [
    id(0x8001044D)
    ]
    void setActive( void );
    [
    propput, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    void contentEditable(BSTR Param1 );
    [
    propget, 
    id(0x8001142A), 
    bindable, 
    displaybind
    ]
    BSTR contentEditable( void );
    [
    propget, 
    id(0x8001044E)
    ]
    VARIANT_BOOL isContentEditable( void );
    [
    propput, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    void hideFocus(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001142B), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL hideFocus( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x80010451)
    ]
    VARIANT_BOOL isDisabled( void );
    [
    propput, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    void onmove(VARIANT Param1 );
    [
    propget, 
    id(0x800117BE), 
    bindable, 
    displaybind
    ]
    VARIANT onmove( void );
    [
    propput, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    void oncontrolselect(VARIANT Param1 );
    [
    propget, 
    id(0x800117BF), 
    bindable, 
    displaybind
    ]
    VARIANT oncontrolselect( void );
    [
    id(0x80010452)
    ]
    VARIANT_BOOL FireEvent([in] BSTR bstrEventName, [in, optional] VARIANT * pvarEventObject );
    [
    propput, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    void onresizestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C3), 
    bindable, 
    displaybind
    ]
    VARIANT onresizestart( void );
    [
    propput, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    void onresizeend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C4), 
    bindable, 
    displaybind
    ]
    VARIANT onresizeend( void );
    [
    propput, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    void onmovestart(VARIANT Param1 );
    [
    propget, 
    id(0x800117C1), 
    bindable, 
    displaybind
    ]
    VARIANT onmovestart( void );
    [
    propput, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    void onmoveend(VARIANT Param1 );
    [
    propget, 
    id(0x800117C2), 
    bindable, 
    displaybind
    ]
    VARIANT onmoveend( void );
    [
    propput, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    void onmouseenter(VARIANT Param1 );
    [
    propget, 
    id(0x800117C5), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseenter( void );
    [
    propput, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    void onmouseleave(VARIANT Param1 );
    [
    propget, 
    id(0x800117C6), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseleave( void );
    [
    propput, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    void onactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C7), 
    bindable, 
    displaybind
    ]
    VARIANT onactivate( void );
    [
    propput, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    void ondeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117C8), 
    bindable, 
    displaybind
    ]
    VARIANT ondeactivate( void );
    [
    id(0x80010453)
    ]
    VARIANT_BOOL dragDrop( void );
    [
    propget, 
    id(0x80010454), 
    restricted, 
    hidden, 
    nonbrowsable
    ]
    long glyphMode( void );
    [
    propput, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    void onmousewheel(VARIANT Param1 );
    [
    propget, 
    id(0x800117BC), 
    bindable, 
    displaybind
    ]
    VARIANT onmousewheel( void );
    [
    id(0x80010458)
    ]
    void normalize( void );
    [
    id(0x80010455)
    ]
    IHTMLDOMAttribute * getAttributeNode([in] BSTR bstrName );
    [
    id(0x80010456)
    ]
    IHTMLDOMAttribute * setAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    id(0x80010457)
    ]
    IHTMLDOMAttribute * removeAttributeNode([in] IHTMLDOMAttribute * pattr  );
    [
    propput, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    void onbeforeactivate(VARIANT Param1 );
    [
    propget, 
    id(0x800117CA), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeactivate( void );
    [
    propput, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    void onfocusin(VARIANT Param1 );
    [
    propget, 
    id(0x800117CB), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusin( void );
    [
    propput, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    void onfocusout(VARIANT Param1 );
    [
    propget, 
    id(0x800117CC), 
    bindable, 
    displaybind
    ]
    VARIANT onfocusout( void );
    [
    propget, 
    id(0x8001041E), 
    hidden
    ]
    long uniqueNumber( void );
    [
    propget, 
    id(0x8001041F), 
    hidden
    ]
    BSTR uniqueID( void );
    [
    propget, 
    id(0x80010416)
    ]
    long nodeType( void );
    [
    propget, 
    id(0x80010417)
    ]
    IHTMLDOMNode * parentNode( void );
    [
    id(0x80010418)
    ]
    VARIANT_BOOL hasChildNodes( void );
    [
    propget, 
    id(0x80010419)
    ]
     IDispatch * childNodes( void );
    [
    propget, 
    id(0x8001041A)
    ]
     IDispatch * attributes( void );
    [
    id(0x8001041B)
    ]
    IHTMLDOMNode * insertBefore([in] IHTMLDOMNode * newChild , [in, optional] VARIANT refChild );
    [
    id(0x8001041C)
    ]
    IHTMLDOMNode * removeChild([in] IHTMLDOMNode * oldChild  );
    [
    id(0x8001041D)
    ]
    IHTMLDOMNode * replaceChild([in] IHTMLDOMNode * newChild , [in] IHTMLDOMNode * oldChild  );
    [
    id(0x80010425)
    ]
    IHTMLDOMNode * cloneNode([in] VARIANT_BOOL fDeep );
    [
    id(0x8001042A)
    ]
    IHTMLDOMNode * removeNode([in, optional, defaultvalue(False)] VARIANT_BOOL fDeep );
    [
    id(0x8001042C)
    ]
    IHTMLDOMNode * swapNode([in] IHTMLDOMNode * otherNode  );
    [
    id(0x8001042B)
    ]
    IHTMLDOMNode * replaceNode([in] IHTMLDOMNode * replacement  );
    [
    id(0x80010431)
    ]
    IHTMLDOMNode * appendChild([in] IHTMLDOMNode * newChild  );
    [
    propget, 
    id(0x80010432)
    ]
    BSTR nodeName( void );
    [
    propput, 
    id(0x80010433)
    ]
    void nodeValue(VARIANT Param1 );
    [
    propget, 
    id(0x80010433)
    ]
    VARIANT nodeValue( void );
    [
    propget, 
    id(0x80010434)
    ]
    IHTMLDOMNode * firstChild( void );
    [
    propget, 
    id(0x80010435)
    ]
    IHTMLDOMNode * lastChild( void );
    [
    propget, 
    id(0x80010436)
    ]
    IHTMLDOMNode * previousSibling( void );
    [
    propget, 
    id(0x80010437)
    ]
    IHTMLDOMNode * nextSibling( void );
    [
    propget, 
    id(0x80010459)
    ]
     IDispatch * ownerDocument( void );
    [
    propput, 
    id(0x000003EA), 
    bindable, 
    displaybind
    ]
    void type(BSTR Param1 );
    [
    propget, 
    id(0x000003EA), 
    bindable, 
    displaybind
    ]
    BSTR type( void );
    [
    propput, 
    id(0x80011790), 
    bindable, 
    displaybind
    ]
    void onload(VARIANT Param1 );
    [
    propget, 
    id(0x80011790), 
    bindable, 
    displaybind
    ]
    VARIANT onload( void );
    [
    propput, 
    id(0x8001178D), 
    bindable, 
    displaybind
    ]
    void onerror(VARIANT Param1 );
    [
    propget, 
    id(0x8001178D), 
    bindable, 
    displaybind
    ]
    VARIANT onerror( void );
    [
    propget, 
    id(0x000003EC)
    ]
    IHTMLStyleSheet * styleSheet( void );
    [
    propput, 
    id(0x000003EE), 
    bindable, 
    displaybind
    ]
    void media(BSTR Param1 );
    [
    propget, 
    id(0x000003EE), 
    bindable, 
    displaybind
    ]
    BSTR media( void );
  };

  [
    uuid(3050F3ED-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface ICSSFilterSite: IUnknown
  {
    HRESULT _stdcall GetElement([out, retval] IHTMLElement ** element  );
    HRESULT _stdcall FireOnFilterChangeEvent( void );
  };

  [
    uuid(3050F49F-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface IMarkupPointer: IUnknown
  {
    HRESULT _stdcall OwningDoc([out] IHTMLDocument2 ** ppDoc  );
    HRESULT _stdcall Gravity([out] _POINTER_GRAVITY * pGravity  );
    HRESULT _stdcall SetGravity([in] _POINTER_GRAVITY Gravity  );
    HRESULT _stdcall Cling([out] long * pfCling );
    HRESULT _stdcall SetCling([in] long fCLing );
    HRESULT _stdcall Unposition( void );
    HRESULT _stdcall IsPositioned([out] long * pfPositioned );
    HRESULT _stdcall GetContainer([out] IMarkupContainer ** ppContainer  );
    HRESULT _stdcall MoveAdjacentToElement([in] IHTMLElement * pElement , [in] _ELEMENT_ADJACENCY eAdj  );
    HRESULT _stdcall MoveToPointer([in] IMarkupPointer * pPointer  );
    HRESULT _stdcall MoveToContainer([in] IMarkupContainer * pContainer , [in] long fAtStart );
    HRESULT _stdcall left([in] long fMove, [out] _MARKUP_CONTEXT_TYPE * pContext , [out] IHTMLElement ** ppElement , [in, out] long * pcch, [out] unsigned short * pchText );
    HRESULT _stdcall right([in] long fMove, [out] _MARKUP_CONTEXT_TYPE * pContext , [out] IHTMLElement ** ppElement , [in, out] long * pcch, [out] unsigned short * pchText );
    HRESULT _stdcall CurrentScope([out] IHTMLElement ** ppElemCurrent  );
    HRESULT _stdcall IsLeftOf([in] IMarkupPointer * pPointerThat , [out] long * pfResult );
    HRESULT _stdcall IsLeftOfOrEqualTo([in] IMarkupPointer * pPointerThat , [out] long * pfResult );
    HRESULT _stdcall IsRightOf([in] IMarkupPointer * pPointerThat , [out] long * pfResult );
    HRESULT _stdcall IsRightOfOrEqualTo([in] IMarkupPointer * pPointerThat , [out] long * pfResult );
    HRESULT _stdcall IsEqualTo([in] IMarkupPointer * pPointerThat , [out] long * pfAreEqual );
    HRESULT _stdcall MoveUnit([in] _MOVEUNIT_ACTION muAction  );
    HRESULT _stdcall findText([in] unsigned short * pchFindText, [in] unsigned long dwFlags, [in] IMarkupPointer * pIEndMatch , [in] IMarkupPointer * pIEndSearch  );
  };

  [
    uuid(3050F5F9-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface IMarkupContainer: IUnknown
  {
    HRESULT _stdcall OwningDoc([out] IHTMLDocument2 ** ppDoc  );
  };

  [
    uuid(3050F648-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface IMarkupContainer2: IMarkupContainer
  {
    HRESULT _stdcall CreateChangeLog([in] IHTMLChangeSink * pChangeSink , [out] IHTMLChangeLog ** ppChangeLog , [in] long fForward, [in] long fBackward );
    HRESULT _stdcall RegisterForDirtyRange([in] IHTMLChangeSink * pChangeSink , [out] unsigned long * pdwCookie );
    HRESULT _stdcall UnRegisterForDirtyRange([in] unsigned long dwCookie );
    HRESULT _stdcall GetAndClearDirtyRange([in] unsigned long dwCookie, [in] IMarkupPointer * pIPointerBegin , [in] IMarkupPointer * pIPointerEnd  );
    long _stdcall GetVersionNumber( void );
    HRESULT _stdcall GetMasterElement([out] IHTMLElement ** ppElementMaster  );
  };

  [
    uuid(3050F649-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface IHTMLChangeLog: IUnknown
  {
    HRESULT _stdcall GetNextChange([in] unsigned char * pbBuffer, [in] long nBufferSize, [out] long * pnRecordLength );
  };

  [
    uuid(08C0E040-62D1-11D1-9326-0060B067B86E)
  ]
   interface IActiveIMMApp: IUnknown
  {
    HRESULT _stdcall AssociateContext([in] wireHWND hWnd , [in] unsigned long hIME, [out] unsigned long * phPrev );
    HRESULT _stdcall ConfigureIMEA([in] void * hKL, [in] wireHWND hWnd , [in] unsigned long dwMode, [in] __MIDL___MIDL_itf_mshtml_0252_0001 * pData  );
    HRESULT _stdcall ConfigureIMEW([in] void * hKL, [in] wireHWND hWnd , [in] unsigned long dwMode, [in] __MIDL___MIDL_itf_mshtml_0252_0002 * pData  );
    HRESULT _stdcall CreateContext([out] unsigned long * phIMC );
    HRESULT _stdcall DestroyContext([in] unsigned long hIME );
    HRESULT _stdcall EnumRegisterWordA([in] void * hKL, [in] LPSTR szReading, [in] unsigned long dwStyle, [in] LPSTR szRegister, [in] void * pData, [out] IEnumRegisterWordA ** pEnum  );
    HRESULT _stdcall EnumRegisterWordW([in] void * hKL, [in] LPWSTR szReading, [in] unsigned long dwStyle, [in] LPWSTR szRegister, [in] void * pData, [out] IEnumRegisterWordW ** pEnum  );
    HRESULT _stdcall EscapeA([in] void * hKL, [in] unsigned long hIMC, [in] unsigned int uEscape, [in, out] void * pData, [out] LONG_PTR * plResult  );
    HRESULT _stdcall EscapeW([in] void * hKL, [in] unsigned long hIMC, [in] unsigned int uEscape, [in, out] void * pData, [out] LONG_PTR * plResult  );
    HRESULT _stdcall GetCandidateListA([in] unsigned long hIMC, [in] unsigned long dwIndex, [in] unsigned int uBufLen, [out] __MIDL___MIDL_itf_mshtml_0252_0007 * pCandList , [out] unsigned int * puCopied );
    HRESULT _stdcall GetCandidateListW([in] unsigned long hIMC, [in] unsigned long dwIndex, [in] unsigned int uBufLen, [out] __MIDL___MIDL_itf_mshtml_0252_0007 * pCandList , [out] unsigned int * puCopied );
    HRESULT _stdcall GetCandidateListCountA([in] unsigned long hIMC, [out] unsigned long * pdwListSize, [out] unsigned long * pdwBufLen );
    HRESULT _stdcall GetCandidateListCountW([in] unsigned long hIMC, [out] unsigned long * pdwListSize, [out] unsigned long * pdwBufLen );
    HRESULT _stdcall GetCandidateWindow([in] unsigned long hIMC, [in] unsigned long dwIndex, [out] __MIDL___MIDL_itf_mshtml_0252_0005 * pCandidate  );
    HRESULT _stdcall GetCompositionFontA([in] unsigned long hIMC, [out] __MIDL___MIDL_itf_mshtml_0252_0003 * plf  );
    HRESULT _stdcall GetCompositionFontW([in] unsigned long hIMC, [out] __MIDL___MIDL_itf_mshtml_0252_0004 * plf  );
    HRESULT _stdcall GetCompositionStringA([in] unsigned long hIMC, [in] unsigned long dwIndex, [in] unsigned long dwBufLen, [out] long * plCopied, [out] void * pBuf );
    HRESULT _stdcall GetCompositionStringW([in] unsigned long hIMC, [in] unsigned long dwIndex, [in] unsigned long dwBufLen, [out] long * plCopied, [out] void * pBuf );
    HRESULT _stdcall GetCompositionWindow([in] unsigned long hIMC, [out] __MIDL___MIDL_itf_mshtml_0252_0006 * pCompForm  );
    HRESULT _stdcall GetContext([in] wireHWND hWnd , [out] unsigned long * phIMC );
    HRESULT _stdcall GetConversionListA([in] void * hKL, [in] unsigned long hIMC, [in] LPSTR pSrc, [in] unsigned int uBufLen, [in] unsigned int uFlag, [out] __MIDL___MIDL_itf_mshtml_0252_0007 * pDst , [out] unsigned int * puCopied );
    HRESULT _stdcall GetConversionListW([in] void * hKL, [in] unsigned long hIMC, [in] LPWSTR pSrc, [in] unsigned int uBufLen, [in] unsigned int uFlag, [out] __MIDL___MIDL_itf_mshtml_0252_0007 * pDst , [out] unsigned int * puCopied );
    HRESULT _stdcall GetConversionStatus([in] unsigned long hIMC, [out] unsigned long * pfdwConversion, [out] unsigned long * pfdwSentence );
    HRESULT _stdcall GetDefaultIMEWnd([in] wireHWND hWnd , [out] wireHWND * phDefWnd  );
    HRESULT _stdcall GetDescriptionA([in] void * hKL, [in] unsigned int uBufLen, [out] LPSTR szDescription, [out] unsigned int * puCopied );
    HRESULT _stdcall GetDescriptionW([in] void * hKL, [in] unsigned int uBufLen, [out] LPWSTR szDescription, [out] unsigned int * puCopied );
    HRESULT _stdcall GetGuideLineA([in] unsigned long hIMC, [in] unsigned long dwIndex, [in] unsigned long dwBufLen, [out] LPSTR pBuf, [out] unsigned long * pdwResult );
    HRESULT _stdcall GetGuideLineW([in] unsigned long hIMC, [in] unsigned long dwIndex, [in] unsigned long dwBufLen, [out] LPWSTR pBuf, [out] unsigned long * pdwResult );
    HRESULT _stdcall GetIMEFileNameA([in] void * hKL, [in] unsigned int uBufLen, [out] LPSTR szFileName, [out] unsigned int * puCopied );
    HRESULT _stdcall GetIMEFileNameW([in] void * hKL, [in] unsigned int uBufLen, [out] LPWSTR szFileName, [out] unsigned int * puCopied );
    HRESULT _stdcall GetOpenStatus([in] unsigned long hIMC );
    HRESULT _stdcall GetProperty([in] void * hKL, [in] unsigned long fdwIndex, [out] unsigned long * pdwProperty );
    HRESULT _stdcall GetRegisterWordStyleA([in] void * hKL, [in] unsigned int nItem, [out] __MIDL___MIDL_itf_mshtml_0252_0008 * pStyleBuf , [out] unsigned int * puCopied );
    HRESULT _stdcall GetRegisterWordStyleW([in] void * hKL, [in] unsigned int nItem, [out] __MIDL___MIDL_itf_mshtml_0252_0009 * pStyleBuf , [out] unsigned int * puCopied );
    HRESULT _stdcall GetStatusWindowPos([in] unsigned long hIMC, [out] tagPOINT * pptPos  );
    HRESULT _stdcall GetVirtualKey([in] wireHWND hWnd , [out] unsigned int * puVirtualKey );
    HRESULT _stdcall InstallIMEA([in] LPSTR szIMEFileName, [in] LPSTR szLayoutText, [out] void ** phKL );
    HRESULT _stdcall InstallIMEW([in] LPWSTR szIMEFileName, [in] LPWSTR szLayoutText, [out] void ** phKL );
    HRESULT _stdcall IsIME([in] void * hKL );
    HRESULT _stdcall IsUIMessageA([in] wireHWND hWndIME , [in] unsigned int msg, [in] UINT_PTR wParam , [in] LONG_PTR lParam  );
    HRESULT _stdcall IsUIMessageW([in] wireHWND hWndIME , [in] unsigned int msg, [in] UINT_PTR wParam , [in] LONG_PTR lParam  );
    HRESULT _stdcall NotifyIME([in] unsigned long hIMC, [in] unsigned long dwAction, [in] unsigned long dwIndex, [in] unsigned long dwValue );
    HRESULT _stdcall RegisterWordA([in] void * hKL, [in] LPSTR szReading, [in] unsigned long dwStyle, [in] LPSTR szRegister );
    HRESULT _stdcall RegisterWordW([in] void * hKL, [in] LPWSTR szReading, [in] unsigned long dwStyle, [in] LPWSTR szRegister );
    HRESULT _stdcall ReleaseContext([in] wireHWND hWnd , [in] unsigned long hIMC );
    HRESULT _stdcall SetCandidateWindow([in] unsigned long hIMC, [in] __MIDL___MIDL_itf_mshtml_0252_0005 * pCandidate  );
    HRESULT _stdcall SetCompositionFontA([in] unsigned long hIMC, [in] __MIDL___MIDL_itf_mshtml_0252_0003 * plf  );
    HRESULT _stdcall SetCompositionFontW([in] unsigned long hIMC, [in] __MIDL___MIDL_itf_mshtml_0252_0004 * plf  );
    HRESULT _stdcall SetCompositionStringA([in] unsigned long hIMC, [in] unsigned long dwIndex, [in] void * pComp, [in] unsigned long dwCompLen, [in] void * pRead, [in] unsigned long dwReadLen );
    HRESULT _stdcall SetCompositionStringW([in] unsigned long hIMC, [in] unsigned long dwIndex, [in] void * pComp, [in] unsigned long dwCompLen, [in] void * pRead, [in] unsigned long dwReadLen );
    HRESULT _stdcall SetCompositionWindow([in] unsigned long hIMC, [in] __MIDL___MIDL_itf_mshtml_0252_0006 * pCompForm  );
    HRESULT _stdcall SetConversionStatus([in] unsigned long hIMC, [in] unsigned long fdwConversion, [in] unsigned long fdwSentence );
    HRESULT _stdcall SetOpenStatus([in] unsigned long hIMC, [in] long fOpen );
    HRESULT _stdcall SetStatusWindowPos([in] unsigned long hIMC, [in] tagPOINT * pptPos  );
    HRESULT _stdcall SimulateHotKey([in] wireHWND hWnd , [in] unsigned long dwHotKeyID );
    HRESULT _stdcall UnregisterWordA([in] void * hKL, [in] LPSTR szReading, [in] unsigned long dwStyle, [in] LPSTR szUnregister );
    HRESULT _stdcall UnregisterWordW([in] void * hKL, [in] LPWSTR szReading, [in] unsigned long dwStyle, [in] LPWSTR szUnregister );
    HRESULT _stdcall Activate([in] long fRestoreLayout );
    HRESULT _stdcall Deactivate( void );
    HRESULT _stdcall OnDefWindowProc([in] wireHWND hWnd , [in] unsigned int msg, [in] UINT_PTR wParam , [in] LONG_PTR lParam , [out] LONG_PTR * plResult  );
    HRESULT _stdcall FilterClientWindows([in] unsigned short * aaClassList, [in] unsigned int uSize );
    HRESULT _stdcall GetCodePageA([in] void * hKL, [out] unsigned int * uCodePage );
    HRESULT _stdcall GetLangId([in] void * hKL, [out] unsigned short * plid );
    HRESULT _stdcall AssociateContextEx([in] wireHWND hWnd , [in] unsigned long hIMC, [in] unsigned long dwFlags );
    HRESULT _stdcall DisableIME([in] unsigned long idThread );
    HRESULT _stdcall GetImeMenuItemsA([in] unsigned long hIMC, [in] unsigned long dwFlags, [in] unsigned long dwType, [in] __MIDL___MIDL_itf_mshtml_0252_0010 * pImeParentMenu , [out] __MIDL___MIDL_itf_mshtml_0252_0010 * pImeMenu , [in] unsigned long dwSize, [out] unsigned long * pdwResult );
    HRESULT _stdcall GetImeMenuItemsW([in] unsigned long hIMC, [in] unsigned long dwFlags, [in] unsigned long dwType, [in] __MIDL___MIDL_itf_mshtml_0252_0011 * pImeParentMenu , [out] __MIDL___MIDL_itf_mshtml_0252_0011 * pImeMenu , [in] unsigned long dwSize, [out] unsigned long * pdwResult );
    HRESULT _stdcall EnumInputContext([in] unsigned long idThread, [out] IEnumInputContext ** ppEnum  );
  };

  [
    uuid(08C03412-F96B-11D0-A475-00AA006BCC59)
  ]
   interface IEnumRegisterWordA: IUnknown
  {
    HRESULT _stdcall Clone([out] IEnumRegisterWordA ** ppEnum  );
    HRESULT _stdcall Next([in] unsigned long ulCount, [out] __MIDL___MIDL_itf_mshtml_0252_0001 * rgRegisterWord , [out] unsigned long * pcFetched );
    HRESULT _stdcall reset( void );
    HRESULT _stdcall Skip([in] unsigned long ulCount );
  };

  [
    uuid(4955DD31-B159-11D0-8FCF-00AA006BCC59)
  ]
   interface IEnumRegisterWordW: IUnknown
  {
    HRESULT _stdcall Clone([out] IEnumRegisterWordW ** ppEnum  );
    HRESULT _stdcall Next([in] unsigned long ulCount, [out] __MIDL___MIDL_itf_mshtml_0252_0002 * rgRegisterWord , [out] unsigned long * pcFetched );
    HRESULT _stdcall reset( void );
    HRESULT _stdcall Skip([in] unsigned long ulCount );
  };

  
  typedef struct tag__MIDL___MIDL_itf_mshtml_0252_0005
  {
    unsigned long dwIndex;
    unsigned long dwStyle;
    tagPOINT ptCurrentPos ;
    tagRECT rcArea ;
  } __MIDL___MIDL_itf_mshtml_0252_0005;

  
  typedef struct tag__MIDL___MIDL_itf_mshtml_0252_0006
  {
    unsigned long dwStyle;
    tagPOINT ptCurrentPos ;
    tagRECT rcArea ;
  } __MIDL___MIDL_itf_mshtml_0252_0006;

  
  typedef struct tag__MIDL___MIDL_itf_mshtml_0252_0010
  {
    unsigned int cbSize;
    unsigned int fType;
    unsigned int fState;
    unsigned int wID;
    wireHBITMAP hbmpChecked ;
    wireHBITMAP hbmpUnchecked ;
    unsigned long dwItemData;
    unsigned char szString[80];
    wireHBITMAP hbmpItem ;
  } __MIDL___MIDL_itf_mshtml_0252_0010;

  
  typedef struct tag_userHBITMAP
  {
    long fContext;
    __MIDL_IWinTypes_0007 u ;
  } _userHBITMAP;

  
  typedef struct tag__MIDL___MIDL_itf_mshtml_0252_0011
  {
    unsigned int cbSize;
    unsigned int fType;
    unsigned int fState;
    unsigned int wID;
    wireHBITMAP hbmpChecked ;
    wireHBITMAP hbmpUnchecked ;
    unsigned long dwItemData;
    unsigned short szString[80];
    wireHBITMAP hbmpItem ;
  } __MIDL___MIDL_itf_mshtml_0252_0011;

  [
    uuid(09B5EAB0-F997-11D1-93D4-0060B067B86E)
  ]
   interface IEnumInputContext: IUnknown
  {
    HRESULT _stdcall Clone([out] IEnumInputContext ** ppEnum  );
    HRESULT _stdcall Next([in] unsigned long ulCount, [out] unsigned long * rgInputContext, [out] unsigned long * pcFetched );
    HRESULT _stdcall reset( void );
    HRESULT _stdcall Skip([in] unsigned long ulCount );
  };

  [
    uuid(3050F605-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface ISegmentList: IUnknown
  {
    HRESULT _stdcall CreateIterator([out] ISegmentListIterator ** ppIIter  );
    HRESULT _stdcall GetType([out] _SELECTION_TYPE * peType  );
    HRESULT _stdcall IsEmpty([out] long * pfEmpty );
  };

  [
    uuid(3050F692-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface ISegmentListIterator: IUnknown
  {
    HRESULT _stdcall Current([out] ISegment ** ppISegment  );
    HRESULT _stdcall First( void );
    HRESULT _stdcall IsDone( void );
    HRESULT _stdcall Advance( void );
  };

  [
    uuid(3050F683-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface ISegment: IUnknown
  {
    HRESULT _stdcall GetPointers([in] IMarkupPointer * pIStart , [in] IMarkupPointer * pIEnd  );
  };

  [
    uuid(3050F604-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface IHTMLCaret: IUnknown
  {
    HRESULT _stdcall MoveCaretToPointer([in] IDisplayPointer * pDispPointer , [in] long fScrollIntoView, [in] _CARET_DIRECTION eDir  );
    HRESULT _stdcall MoveCaretToPointerEx([in] IDisplayPointer * pDispPointer , [in] long fVisible, [in] long fScrollIntoView, [in] _CARET_DIRECTION eDir  );
    HRESULT _stdcall MoveMarkupPointerToCaret([in] IMarkupPointer * pIMarkupPointer  );
    HRESULT _stdcall MoveDisplayPointerToCaret([in] IDisplayPointer * pDispPointer  );
    HRESULT _stdcall IsVisible([out] long * pIsVisible );
    HRESULT _stdcall Show([in] long fScrollIntoView );
    HRESULT _stdcall Hide( void );
    HRESULT _stdcall InsertText([in] unsigned short * pText, [in] long lLen );
    HRESULT _stdcall scrollIntoView( void );
    HRESULT _stdcall GetLocation([out] tagPOINT * pPoint , [in] long fTranslate );
    HRESULT _stdcall GetCaretDirection([out] _CARET_DIRECTION * peDir  );
    HRESULT _stdcall SetCaretDirection([in] _CARET_DIRECTION eDir  );
  };

  [
    uuid(3050F69E-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface IDisplayPointer: IUnknown
  {
    HRESULT _stdcall moveToPoint([in] tagPOINT ptPoint , [in] _COORD_SYSTEM eCoordSystem , [in] IHTMLElement * pElementContext , [in] unsigned long dwHitTestOptions, [out] unsigned long * pdwHitTestResults );
    HRESULT _stdcall MoveUnit([in] _DISPLAY_MOVEUNIT eMoveUnit , [in] long lXPos );
    HRESULT _stdcall PositionMarkupPointer([in] IMarkupPointer * pMarkupPointer  );
    HRESULT _stdcall MoveToPointer([in] IDisplayPointer * pDispPointer  );
    HRESULT _stdcall SetPointerGravity([in] _POINTER_GRAVITY eGravity  );
    HRESULT _stdcall GetPointerGravity([out] _POINTER_GRAVITY * peGravity  );
    HRESULT _stdcall SetDisplayGravity([in] _DISPLAY_GRAVITY eGravity  );
    HRESULT _stdcall GetDisplayGravity([out] _DISPLAY_GRAVITY * peGravity  );
    HRESULT _stdcall IsPositioned([out] long * pfPositioned );
    HRESULT _stdcall Unposition( void );
    HRESULT _stdcall IsEqualTo([in] IDisplayPointer * pDispPointer , [out] long * pfIsEqual );
    HRESULT _stdcall IsLeftOf([in] IDisplayPointer * pDispPointer , [out] long * pfIsLeftOf );
    HRESULT _stdcall IsRightOf([in] IDisplayPointer * pDispPointer , [out] long * pfIsRightOf );
    HRESULT _stdcall IsAtBOL([out] long * pfBOL );
    HRESULT _stdcall MoveToMarkupPointer([in] IMarkupPointer * pPointer , [in] IDisplayPointer * pDispLineContext  );
    HRESULT _stdcall scrollIntoView( void );
    HRESULT _stdcall GetLineInfo([out] ILineInfo ** ppLineInfo  );
    HRESULT _stdcall GetFlowElement([out] IHTMLElement ** ppLayoutElement  );
    HRESULT _stdcall QueryBreaks([out] unsigned long * pdwBreaks );
  };

  [
    uuid(3050F68F-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface IElementSegment: ISegment
  {
    HRESULT _stdcall GetElement([out] IHTMLElement ** ppIElement  );
    HRESULT _stdcall SetPrimary([in] long fPrimary );
    HRESULT _stdcall IsPrimary([out] long * pfPrimary );
  };

  [
    uuid(3050F606-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface IHighlightRenderingServices: IUnknown
  {
    HRESULT _stdcall AddSegment([in] IDisplayPointer * pDispPointerStart , [in] IDisplayPointer * pDispPointerEnd , [in] IHTMLRenderStyle * pIRenderStyle , [out] IHighlightSegment ** ppISegment  );
    HRESULT _stdcall MoveSegmentToPointers([in] IHighlightSegment * pISegment , [in] IDisplayPointer * pDispPointerStart , [in] IDisplayPointer * pDispPointerEnd  );
    HRESULT _stdcall RemoveSegment([in] IHighlightSegment * pISegment  );
  };

  [
    uuid(3050F69D-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface IDisplayServices: IUnknown
  {
    HRESULT _stdcall CreateDisplayPointer([out] IDisplayPointer ** ppDispPointer  );
    HRESULT _stdcall TransformRect([in, out] tagRECT * pRect , [in] _COORD_SYSTEM eSource , [in] _COORD_SYSTEM eDestination , [in] IHTMLElement * pIElement  );
    HRESULT _stdcall TransformPoint([in, out] tagPOINT * pPoint , [in] _COORD_SYSTEM eSource , [in] _COORD_SYSTEM eDestination , [in] IHTMLElement * pIElement  );
    HRESULT _stdcall GetCaret([out] IHTMLCaret ** ppCaret  );
    HRESULT _stdcall GetComputedStyle([in] IMarkupPointer * pPointer , [out] IHTMLComputedStyle ** ppComputedStyle  );
    HRESULT _stdcall ScrollRectIntoView([in] IHTMLElement * pIElement , [in] tagRECT rect  );
    HRESULT _stdcall HasFlowLayout([in] IHTMLElement * pIElement , [out] long * pfHasFlowLayout );
  };

  [
    uuid(3050F6C3-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface IHTMLComputedStyle: IUnknown
  {
    [
    propget, 
    id(0x000003E9)
    ]
    HRESULT _stdcall bold([out, retval] VARIANT_BOOL * p );
    [
    propget, 
    id(0x000003EA)
    ]
    HRESULT _stdcall italic([out, retval] VARIANT_BOOL * p );
    [
    propget, 
    id(0x000003EB)
    ]
    HRESULT _stdcall underline([out, retval] VARIANT_BOOL * p );
    [
    propget, 
    id(0x000003EC)
    ]
    HRESULT _stdcall overline([out, retval] VARIANT_BOOL * p );
    [
    propget, 
    id(0x000003ED)
    ]
    HRESULT _stdcall strikeOut([out, retval] VARIANT_BOOL * p );
    [
    propget, 
    id(0x000003EE)
    ]
    HRESULT _stdcall subScript([out, retval] VARIANT_BOOL * p );
    [
    propget, 
    id(0x000003EF)
    ]
    HRESULT _stdcall superScript([out, retval] VARIANT_BOOL * p );
    [
    propget, 
    id(0x000003F0)
    ]
    HRESULT _stdcall explicitFace([out, retval] VARIANT_BOOL * p );
    [
    propget, 
    id(0x000003F1)
    ]
    HRESULT _stdcall fontWeight([out, retval] long * p );
    [
    propget, 
    id(0x000003F2)
    ]
    HRESULT _stdcall fontSize([out, retval] long * p );
    [
    propget, 
    id(0x000003F3)
    ]
    HRESULT _stdcall fontName([out, retval] unsigned short * p );
    [
    propget, 
    id(0x000003F4)
    ]
    HRESULT _stdcall hasBgColor([out, retval] VARIANT_BOOL * p );
    [
    propget, 
    id(0x000003F5)
    ]
    HRESULT _stdcall textColor([out, retval] unsigned long * p );
    [
    propget, 
    id(0x000003F6)
    ]
    HRESULT _stdcall backgroundColor([out, retval] unsigned long * p );
    [
    propget, 
    id(0x000003F7)
    ]
    HRESULT _stdcall preFormatted([out, retval] VARIANT_BOOL * p );
    [
    propget, 
    id(0x000003F8)
    ]
    HRESULT _stdcall direction([out, retval] VARIANT_BOOL * p );
    [
    propget, 
    id(0x000003F9)
    ]
    HRESULT _stdcall blockDirection([out, retval] VARIANT_BOOL * p );
    [
    propget, 
    id(0x000003FA)
    ]
    HRESULT _stdcall OL([out, retval] VARIANT_BOOL * p );
    HRESULT _stdcall isEqual([in] IHTMLComputedStyle * pComputedStyle , [out] VARIANT_BOOL * pfEqual );
  };

  [
    uuid(3050F830-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface IBlockFormats: IDispatch
  {
    [
    propget, 
    id(0xFFFFFFFC), 
    restricted
    ]
    HRESULT _stdcall _newEnum([out, retval]  IUnknown ** p );
    [
    propget, 
    id(0x00000001)
    ]
    HRESULT _stdcall Count([out, retval] long * p );
    [
    id(0x00000000)
    ]
    HRESULT _stdcall item([in] VARIANT * pvarIndex, [out, retval] BSTR * pbstrBlockFormat );
  };

  [
    uuid(3050F839-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface IFontNames: IDispatch
  {
    [
    propget, 
    id(0xFFFFFFFC), 
    restricted
    ]
    HRESULT _stdcall _newEnum([out, retval]  IUnknown ** p );
    [
    propget, 
    id(0x00000001)
    ]
    HRESULT _stdcall Count([out, retval] long * p );
    [
    id(0x00000000)
    ]
    HRESULT _stdcall item([in] VARIANT * pvarIndex, [out, retval] BSTR * pbstrFontName );
  };

  [
    uuid(3050F3EC-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface ICSSFilter: IUnknown
  {
    HRESULT _stdcall SetSite([in] ICSSFilterSite * pSink  );
    HRESULT _stdcall OnAmbientPropertyChange([in] long dispid );
  };

  [
    uuid(C81984C4-74C8-11D2-BAA9-00C04FC2040E)
  ]
   interface ISecureUrlHost: IUnknown
  {
    HRESULT _stdcall ValidateSecureUrl([out] long * pfAllow, [in] unsigned short * pchUrlInQuestion, [in] unsigned long dwFlags );
  };

  [
    uuid(3050F4A0-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface IMarkupServices: IUnknown
  {
    HRESULT _stdcall CreateMarkupPointer([out] IMarkupPointer ** ppPointer  );
    HRESULT _stdcall CreateMarkupContainer([out] IMarkupContainer ** ppMarkupContainer  );
    HRESULT _stdcall createElement([in] _ELEMENT_TAG_ID tagID , [in] unsigned short * pchAttributes, [out] IHTMLElement ** ppElement  );
    HRESULT _stdcall CloneElement([in] IHTMLElement * pElemCloneThis , [out] IHTMLElement ** ppElementTheClone  );
    HRESULT _stdcall InsertElement([in] IHTMLElement * pElementInsert , [in] IMarkupPointer * pPointerStart , [in] IMarkupPointer * pPointerFinish  );
    HRESULT _stdcall RemoveElement([in] IHTMLElement * pElementRemove  );
    HRESULT _stdcall remove([in] IMarkupPointer * pPointerStart , [in] IMarkupPointer * pPointerFinish  );
    HRESULT _stdcall Copy([in] IMarkupPointer * pPointerSourceStart , [in] IMarkupPointer * pPointerSourceFinish , [in] IMarkupPointer * pPointerTarget  );
    HRESULT _stdcall move([in] IMarkupPointer * pPointerSourceStart , [in] IMarkupPointer * pPointerSourceFinish , [in] IMarkupPointer * pPointerTarget  );
    HRESULT _stdcall InsertText([in] unsigned short * pchText, [in] long cch, [in] IMarkupPointer * pPointerTarget  );
    HRESULT _stdcall ParseString([in] unsigned short * pchHTML, [in] unsigned long dwFlags, [out] IMarkupContainer ** ppContainerResult , [in] IMarkupPointer * ppPointerStart , [in] IMarkupPointer * ppPointerFinish  );
    HRESULT _stdcall ParseGlobal([in] wireHGLOBAL hglobalHTML , [in] unsigned long dwFlags, [out] IMarkupContainer ** ppContainerResult , [in] IMarkupPointer * pPointerStart , [in] IMarkupPointer * pPointerFinish  );
    HRESULT _stdcall IsScopedElement([in] IHTMLElement * pElement , [out] long * pfScoped );
    HRESULT _stdcall GetElementTagId([in] IHTMLElement * pElement , [out] _ELEMENT_TAG_ID * ptagId  );
    HRESULT _stdcall GetTagIDForName([in] BSTR bstrName, [out] _ELEMENT_TAG_ID * ptagId  );
    HRESULT _stdcall GetNameForTagID([in] _ELEMENT_TAG_ID tagID , [out] BSTR * pbstrName );
    HRESULT _stdcall MovePointersToRange([in] IHTMLTxtRange * pIRange , [in] IMarkupPointer * pPointerStart , [in] IMarkupPointer * pPointerFinish  );
    HRESULT _stdcall MoveRangeToPointers([in] IMarkupPointer * pPointerStart , [in] IMarkupPointer * pPointerFinish , [in] IHTMLTxtRange * pIRange  );
    HRESULT _stdcall BeginUndoUnit([in] unsigned short * pchTitle );
    HRESULT _stdcall EndUndoUnit( void );
  };

  
  typedef struct tag_userHGLOBAL
  {
    long fContext;
    __MIDL_IWinTypes_0003 u ;
  } _userHGLOBAL;

  [
    uuid(3050F682-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface IMarkupServices2: IMarkupServices
  {
    HRESULT _stdcall ParseGlobalEx([in] wireHGLOBAL hglobalHTML , [in] unsigned long dwFlags, [in] IMarkupContainer * pContext , [out] IMarkupContainer ** ppContainerResult , [in] IMarkupPointer * pPointerStart , [in] IMarkupPointer * pPointerFinish  );
    HRESULT _stdcall ValidateElements([in] IMarkupPointer * pPointerStart , [in] IMarkupPointer * pPointerFinish , [in] IMarkupPointer * pPointerTarget , [in, out] IMarkupPointer * pPointerStatus , [out] IHTMLElement ** ppElemFailBottom , [out] IHTMLElement ** ppElemFailTop  );
    HRESULT _stdcall SaveSegmentsToClipboard([in] ISegmentList * pSegmentList , [in] unsigned long dwFlags );
  };

  [
    uuid(3050F6E0-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface IHTMLChangePlayback: IUnknown
  {
    HRESULT _stdcall ExecChange([in] unsigned char * pbRecord, [in] long fForward );
  };

  [
    uuid(3050F675-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface IMarkupPointer2: IMarkupPointer
  {
    HRESULT _stdcall IsAtWordBreak([out] long * pfAtBreak );
    HRESULT _stdcall GetMarkupPosition([out] long * plMP );
    HRESULT _stdcall MoveToMarkupPosition([in] IMarkupContainer * pContainer , [in] long lMP );
    HRESULT _stdcall MoveUnitBounded([in] _MOVEUNIT_ACTION muAction , [in] IMarkupPointer * pIBoundary  );
    HRESULT _stdcall IsInsideURL([in] IMarkupPointer * pRight , [out] long * pfResult );
    HRESULT _stdcall MoveToContent([in] IHTMLElement * pIElement , [in] long fAtStart );
  };

  [
    uuid(3050F5FA-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface IMarkupTextFrags: IUnknown
  {
    HRESULT _stdcall GetTextFragCount([out] long * pcFrags );
    HRESULT _stdcall GetTextFrag([in] long iFrag, [out] BSTR * pbstrFrag, [in] IMarkupPointer * pPointerFrag  );
    HRESULT _stdcall RemoveTextFrag([in] long iFrag );
    HRESULT _stdcall InsertTextFrag([in] long iFrag, [in] BSTR bstrInsert, [in] IMarkupPointer * pPointerInsert  );
    HRESULT _stdcall FindTextFragFromMarkupPointer([in] IMarkupPointer * pPointerFind , [out] long * piFrag, [out] long * pfFragFound );
  };

  [
    uuid(3050F6A0-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface IHTMLEditHost: IUnknown
  {
    HRESULT _stdcall SnapRect([in] IHTMLElement * pIElement , [in, out] tagRECT * prcNew , [in] _ELEMENT_CORNER eHandle  );
  };

  [
    uuid(3050F6CA-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface IIMEServices: IUnknown
  {
    HRESULT _stdcall GetActiveIMM([out] IActiveIMMApp ** ppActiveIMM  );
  };

  [
    uuid(3050F699-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface ISelectionServicesListener: IUnknown
  {
    HRESULT _stdcall BeginSelectionUndo( void );
    HRESULT _stdcall EndSelectionUndo( void );
    HRESULT _stdcall OnSelectedElementExit([in] IMarkupPointer * pIElementStart , [in] IMarkupPointer * pIElementEnd , [in] IMarkupPointer * pIElementContentStart , [in] IMarkupPointer * pIElementContentEnd  );
    HRESULT _stdcall OnChangeType([in] _SELECTION_TYPE eType , [in] ISelectionServicesListener * pIListener  );
    HRESULT _stdcall GetTypeDetail([out] BSTR * pTypeDetail );
  };

  [
    uuid(3050F684-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface ISelectionServices: IUnknown
  {
    HRESULT _stdcall SetSelectionType([in] _SELECTION_TYPE eType , [in] ISelectionServicesListener * pIListener  );
    HRESULT _stdcall GetMarkupContainer([out] IMarkupContainer ** ppIContainer  );
    HRESULT _stdcall AddSegment([in] IMarkupPointer * pIStart , [in] IMarkupPointer * pIEnd , [out] ISegment ** ppISegmentAdded  );
    HRESULT _stdcall AddElementSegment([in] IHTMLElement * pIElement , [out] IElementSegment ** ppISegmentAdded  );
    HRESULT _stdcall RemoveSegment([in] ISegment * pISegment  );
    HRESULT _stdcall GetSelectionServicesListener([out] ISelectionServicesListener ** ppISelectionServicesListener  );
  };

  [
    uuid(3050F662-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface IHTMLEditDesigner: IUnknown
  {
    HRESULT _stdcall PreHandleEvent([in] long inEvtDispId, [in] IHTMLEventObj * pIEventObj  );
    HRESULT _stdcall PostHandleEvent([in] long inEvtDispId, [in] IHTMLEventObj * pIEventObj  );
    HRESULT _stdcall TranslateAccelerator([in] long inEvtDispId, [in] IHTMLEventObj * pIEventObj  );
    HRESULT _stdcall PostEditorEventNotify([in] long inEvtDispId, [in] IHTMLEventObj * pIEventObj  );
  };

  [
    uuid(3050F663-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface IHTMLEditServices: IUnknown
  {
    HRESULT _stdcall AddDesigner([in] IHTMLEditDesigner * pIDesigner  );
    HRESULT _stdcall RemoveDesigner([in] IHTMLEditDesigner * pIDesigner  );
    HRESULT _stdcall GetSelectionServices([in] IMarkupContainer * pIContainer , [out] ISelectionServices ** ppSelSvc  );
    HRESULT _stdcall MoveToSelectionAnchor([in] IMarkupPointer * pIStartAnchor  );
    HRESULT _stdcall MoveToSelectionEnd([in] IMarkupPointer * pIEndAnchor  );
    HRESULT _stdcall SelectRange([in] IMarkupPointer * pStart , [in] IMarkupPointer * pEnd , [in] _SELECTION_TYPE eType  );
  };

  [
    uuid(3050F812-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface IHTMLEditServices2: IHTMLEditServices
  {
    HRESULT _stdcall MoveToSelectionAnchorEx([in] IDisplayPointer * pIStartAnchor  );
    HRESULT _stdcall MoveToSelectionEndEx([in] IDisplayPointer * pIEndAnchor  );
    HRESULT _stdcall FreezeVirtualCaretPos([in] long fReCompute );
    HRESULT _stdcall UnFreezeVirtualCaretPos([in] long fReset );
  };

  [
    uuid(3050F6BD-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface HTMLNamespaceEvents
  {
    properties:
    methods:
    [
    id(0xFFFFFD9F)
    ]
    void onreadystatechange([in] IHTMLEventObj * pEvtObj  );
  };

  
  typedef struct tag_HTML_PAINTER_INFO
  {
    long lFlags;
    long lZOrder;
    GUID iidDrawObject ;
    tagRECT rcExpand ;
  } _HTML_PAINTER_INFO;

  
  typedef struct tag_HTML_PAINT_DRAW_INFO
  {
    tagRECT rcViewport ;
    void * hrgnUpdate;
    _HTML_PAINT_XFORM xform ;
  } _HTML_PAINT_DRAW_INFO;

  [
    uuid(3050F6A6-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface IHTMLPainter: IUnknown
  {
    HRESULT _stdcall Draw([in] tagRECT rcBounds , [in] tagRECT rcUpdate , [in] long lDrawFlags, [in] wireHDC hdc , [in] void * pvDrawObject );
    HRESULT _stdcall onresize([in] tagSIZE size  );
    HRESULT _stdcall GetPainterInfo([out] _HTML_PAINTER_INFO * pInfo  );
    HRESULT _stdcall HitTestPoint([in] tagPOINT pt , [out] long * pbHit, [out] long * plPartID );
  };

  [
    uuid(3050F6A7-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface IHTMLPaintSite: IUnknown
  {
    HRESULT _stdcall InvalidatePainterInfo( void );
    HRESULT _stdcall InvalidateRect([in] tagRECT * prcInvalid  );
    HRESULT _stdcall InvalidateRegion([in] void * rgnInvalid );
    HRESULT _stdcall GetDrawInfo([in] long lFlags, [out] _HTML_PAINT_DRAW_INFO * pDrawInfo  );
    HRESULT _stdcall TransformGlobalToLocal([in] tagPOINT ptGlobal , [out] tagPOINT * pptLocal  );
    HRESULT _stdcall TransformLocalToGlobal([in] tagPOINT ptLocal , [out] tagPOINT * pptGlobal  );
    HRESULT _stdcall GetHitTestCookie([out] long * plCookie );
  };

  [
    uuid(3050F6DF-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface IHTMLPainterEventInfo: IUnknown
  {
    HRESULT _stdcall GetEventInfoFlags([out] long * plEventInfoFlags );
    HRESULT _stdcall GetEventTarget([in] IHTMLElement ** ppElement  );
    HRESULT _stdcall SetCursor([in] long lPartID );
    HRESULT _stdcall StringFromPartID([in] long lPartID, [out] BSTR * pbstrPart );
  };

  [
    uuid(3050F7E3-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface IHTMLPainterOverlay: IUnknown
  {
    HRESULT _stdcall onmove([in] tagRECT rcDevice  );
  };

  [
    uuid(3050F666-98B5-11CF-BB82-00AA00BDCE0B), 
    dual, 
    oleautomation
  ]
   interface IHTMLPopup: IDispatch
  {
    [
    id(0x00006979)
    ]
    HRESULT _stdcall Show([in] long x, [in] long y, [in] long w, [in] long h, [in] VARIANT * pElement );
    [
    id(0x0000697A)
    ]
    HRESULT _stdcall Hide( void );
    [
    propget, 
    id(0x0000697B)
    ]
    HRESULT _stdcall document([out, retval] IHTMLDocument ** p  );
    [
    propget, 
    id(0x0000697C)
    ]
    HRESULT _stdcall isOpen([out, retval] VARIANT_BOOL * p );
  };

  [
    uuid(3050F589-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispHTMLPopup
  {
    properties:
    methods:
    [
    id(0x00006979)
    ]
    void Show([in] long x, [in] long y, [in] long w, [in] long h, [in] VARIANT * pElement );
    [
    id(0x0000697A)
    ]
    void Hide( void );
    [
    propget, 
    id(0x0000697B)
    ]
    IHTMLDocument * document( void );
    [
    propget, 
    id(0x0000697C)
    ]
    VARIANT_BOOL isOpen( void );
  };

  [
    uuid(3050F51E-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispIHTMLInputButtonElement
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    propget, 
    id(0x000007D0)
    ]
    BSTR type( void );
    [
    propput, 
    id(0x800113ED), 
    bindable, 
    displaybind
    ]
    void value(BSTR Param1 );
    [
    propget, 
    id(0x800113ED), 
    bindable, 
    displaybind
    ]
    BSTR value( void );
    [
    propput, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    void name(BSTR Param1 );
    [
    propget, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    BSTR name( void );
    [
    propput, 
    id(0x000007E5)
    ]
    void status(VARIANT Param1 );
    [
    propget, 
    id(0x000007E5)
    ]
    VARIANT status( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x800107D4)
    ]
    IHTMLFormElement * form( void );
    [
    id(0x000007D6)
    ]
    IHTMLTxtRange * createTextRange( void );
  };

  [
    uuid(3050F520-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispIHTMLInputTextElement
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    propget, 
    id(0x000007D0)
    ]
    BSTR type( void );
    [
    propput, 
    id(0x800113ED), 
    bindable, 
    displaybind
    ]
    void value(BSTR Param1 );
    [
    propget, 
    id(0x800113ED), 
    bindable, 
    displaybind
    ]
    BSTR value( void );
    [
    propput, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    void name(BSTR Param1 );
    [
    propget, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    BSTR name( void );
    [
    propput, 
    id(0x000007E5)
    ]
    void status(VARIANT Param1 );
    [
    propget, 
    id(0x000007E5)
    ]
    VARIANT status( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x800107D4)
    ]
    IHTMLFormElement * form( void );
    [
    propput, 
    id(0x800113DB), 
    bindable, 
    displaybind, 
    hidden
    ]
    void defaultValue(BSTR Param1 );
    [
    propget, 
    id(0x800113DB), 
    bindable, 
    displaybind, 
    hidden
    ]
    BSTR defaultValue( void );
    [
    propput, 
    id(0x000007D2), 
    bindable, 
    displaybind
    ]
    void size(long Param1 );
    [
    propget, 
    id(0x000007D2), 
    bindable, 
    displaybind
    ]
    long size( void );
    [
    propput, 
    id(0x000007D3), 
    bindable, 
    displaybind
    ]
    void maxLength(long Param1 );
    [
    propget, 
    id(0x000007D3), 
    bindable, 
    displaybind
    ]
    long maxLength( void );
    [
    id(0x000007D4)
    ]
    void select( void );
    [
    propput, 
    id(0x8001178E), 
    bindable, 
    displaybind
    ]
    void onchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001178E), 
    bindable, 
    displaybind
    ]
    VARIANT onchange( void );
    [
    propput, 
    id(0x8001177A), 
    bindable, 
    displaybind
    ]
    void onselect(VARIANT Param1 );
    [
    propget, 
    id(0x8001177A), 
    bindable, 
    displaybind
    ]
    VARIANT onselect( void );
    [
    propput, 
    id(0x000007D5), 
    bindable, 
    displaybind
    ]
    void readOnly(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x000007D5), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL readOnly( void );
    [
    id(0x000007D6)
    ]
    IHTMLTxtRange * createTextRange( void );
    [
    propput, 
    id(0x800103FD)
    ]
    void dataFld(BSTR Param1 );
    [
    propget, 
    id(0x800103FD)
    ]
    BSTR dataFld( void );
    [
    propput, 
    id(0x800103FE)
    ]
    void dataSrc(BSTR Param1 );
    [
    propget, 
    id(0x800103FE)
    ]
    BSTR dataSrc( void );
    [
    propput, 
    id(0x800103FF)
    ]
    void dataFormatAs(BSTR Param1 );
    [
    propget, 
    id(0x800103FF)
    ]
    BSTR dataFormatAs( void );
  };

  [
    uuid(3050F542-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispIHTMLInputFileElement
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    propget, 
    id(0x000007D0)
    ]
    BSTR type( void );
    [
    propput, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    void name(BSTR Param1 );
    [
    propget, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    BSTR name( void );
    [
    propput, 
    id(0x000007E5)
    ]
    void status(VARIANT Param1 );
    [
    propget, 
    id(0x000007E5)
    ]
    VARIANT status( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propget, 
    id(0x800107D4)
    ]
    IHTMLFormElement * form( void );
    [
    propput, 
    id(0x000007D2), 
    bindable, 
    displaybind
    ]
    void size(long Param1 );
    [
    propget, 
    id(0x000007D2), 
    bindable, 
    displaybind
    ]
    long size( void );
    [
    propput, 
    id(0x000007D3), 
    bindable, 
    displaybind
    ]
    void maxLength(long Param1 );
    [
    propget, 
    id(0x000007D3), 
    bindable, 
    displaybind
    ]
    long maxLength( void );
    [
    id(0x000007D4)
    ]
    void select( void );
    [
    propput, 
    id(0x8001178E), 
    bindable, 
    displaybind
    ]
    void onchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001178E), 
    bindable, 
    displaybind
    ]
    VARIANT onchange( void );
    [
    propput, 
    id(0x8001177A), 
    bindable, 
    displaybind
    ]
    void onselect(VARIANT Param1 );
    [
    propget, 
    id(0x8001177A), 
    bindable, 
    displaybind
    ]
    VARIANT onselect( void );
    [
    propput, 
    id(0x800113ED), 
    bindable, 
    displaybind
    ]
    void value(BSTR Param1 );
    [
    propget, 
    id(0x800113ED), 
    bindable, 
    displaybind
    ]
    BSTR value( void );
  };

  [
    uuid(3050F509-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispIHTMLOptionButtonElement
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    propput, 
    id(0x800113ED), 
    bindable
    ]
    void value(BSTR Param1 );
    [
    propget, 
    id(0x800113ED), 
    bindable
    ]
    BSTR value( void );
    [
    propget, 
    id(0x000007D0)
    ]
    BSTR type( void );
    [
    propput, 
    id(0x80010000), 
    bindable
    ]
    void name(BSTR Param1 );
    [
    propget, 
    id(0x80010000), 
    bindable
    ]
    BSTR name( void );
    [
    propput, 
    id(0x000007D9), 
    bindable
    ]
    void checked(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x000007D9), 
    bindable
    ]
    VARIANT_BOOL checked( void );
    [
    propput, 
    id(0x000007D8), 
    bindable
    ]
    void defaultChecked(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x000007D8), 
    bindable
    ]
    VARIANT_BOOL defaultChecked( void );
    [
    propput, 
    id(0x8001178E), 
    bindable
    ]
    void onchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001178E), 
    bindable
    ]
    VARIANT onchange( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propput, 
    id(0x000007D1)
    ]
    void status(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x000007D1)
    ]
    VARIANT_BOOL status( void );
    [
    propput, 
    id(0x000007D7), 
    bindable
    ]
    void indeterminate(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x000007D7), 
    bindable
    ]
    VARIANT_BOOL indeterminate( void );
    [
    propget, 
    id(0x800107D4)
    ]
    IHTMLFormElement * form( void );
    [
    propput, 
    id(0x800103FD)
    ]
    void dataFld(BSTR Param1 );
    [
    propget, 
    id(0x800103FD)
    ]
    BSTR dataFld( void );
    [
    propput, 
    id(0x800103FE)
    ]
    void dataSrc(BSTR Param1 );
    [
    propget, 
    id(0x800103FE)
    ]
    BSTR dataSrc( void );
    [
    propput, 
    id(0x800103FF)
    ]
    void dataFormatAs(BSTR Param1 );
    [
    propget, 
    id(0x800103FF)
    ]
    BSTR dataFormatAs( void );
  };

  [
    uuid(3050F51D-98B5-11CF-BB82-00AA00BDCE0B), 
    hidden
  ]
   dispinterface DispIHTMLInputImage
  {
    properties:
    methods:
    [
    id(0x800101F5)
    ]
    void setAttribute([in] BSTR strAttributeName, [in] VARIANT AttributeValue, [in, optional, defaultvalue(1)] long lFlags );
    [
    id(0x800101F6)
    ]
    VARIANT getAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(0)] long lFlags );
    [
    id(0x800101F7)
    ]
    VARIANT_BOOL removeAttribute([in] BSTR strAttributeName, [in, optional, defaultvalue(1)] long lFlags );
    [
    propput, 
    id(0x800103E9), 
    bindable
    ]
    void className(BSTR Param1 );
    [
    propget, 
    id(0x800103E9), 
    bindable
    ]
    BSTR className( void );
    [
    propput, 
    id(0x800103EA), 
    bindable
    ]
    void id(BSTR Param1 );
    [
    propget, 
    id(0x800103EA), 
    bindable
    ]
    BSTR id( void );
    [
    propget, 
    id(0x800103EC)
    ]
    BSTR tagName( void );
    [
    propget, 
    id(0x80010008)
    ]
    IHTMLElement * parentElement( void );
    [
    propget, 
    id(0x8001004A), 
    nonbrowsable
    ]
    IHTMLStyle * style( void );
    [
    propput, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    void onhelp(VARIANT Param1 );
    [
    propget, 
    id(0x8001177D), 
    bindable, 
    displaybind
    ]
    VARIANT onhelp( void );
    [
    propput, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    void onclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011778), 
    bindable, 
    displaybind
    ]
    VARIANT onclick( void );
    [
    propput, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    void ondblclick(VARIANT Param1 );
    [
    propget, 
    id(0x80011779), 
    bindable, 
    displaybind
    ]
    VARIANT ondblclick( void );
    [
    propput, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    void onkeydown(VARIANT Param1 );
    [
    propget, 
    id(0x80011775), 
    bindable, 
    displaybind
    ]
    VARIANT onkeydown( void );
    [
    propput, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    void onkeyup(VARIANT Param1 );
    [
    propget, 
    id(0x80011776), 
    bindable, 
    displaybind
    ]
    VARIANT onkeyup( void );
    [
    propput, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    void onkeypress(VARIANT Param1 );
    [
    propget, 
    id(0x80011777), 
    bindable, 
    displaybind
    ]
    VARIANT onkeypress( void );
    [
    propput, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    void onmouseout(VARIANT Param1 );
    [
    propget, 
    id(0x80011771), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseout( void );
    [
    propput, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    void onmouseover(VARIANT Param1 );
    [
    propget, 
    id(0x80011770), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseover( void );
    [
    propput, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    void onmousemove(VARIANT Param1 );
    [
    propget, 
    id(0x80011774), 
    bindable, 
    displaybind
    ]
    VARIANT onmousemove( void );
    [
    propput, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    void onmousedown(VARIANT Param1 );
    [
    propget, 
    id(0x80011772), 
    bindable, 
    displaybind
    ]
    VARIANT onmousedown( void );
    [
    propput, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    void onmouseup(VARIANT Param1 );
    [
    propget, 
    id(0x80011773), 
    bindable, 
    displaybind
    ]
    VARIANT onmouseup( void );
    [
    propget, 
    id(0x800103FA)
    ]
     IDispatch * document( void );
    [
    propput, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    void title(BSTR Param1 );
    [
    propget, 
    id(0x80010045), 
    bindable, 
    displaybind
    ]
    BSTR title( void );
    [
    propput, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    void language(BSTR Param1 );
    [
    propget, 
    id(0x800113EC), 
    bindable, 
    displaybind
    ]
    BSTR language( void );
    [
    propput, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    void onselectstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011795), 
    bindable, 
    displaybind
    ]
    VARIANT onselectstart( void );
    [
    id(0x800103FB)
    ]
    void scrollIntoView([in, optional] VARIANT varargStart );
    [
    id(0x800103FC)
    ]
    VARIANT_BOOL contains([in] IHTMLElement * pChild  );
    [
    propget, 
    id(0x80010400), 
    bindable
    ]
    long sourceIndex( void );
    [
    propget, 
    id(0x80010401)
    ]
    VARIANT recordNumber( void );
    [
    propput, 
    id(0x80011391)
    ]
    void lang(BSTR Param1 );
    [
    propget, 
    id(0x80011391)
    ]
    BSTR lang( void );
    [
    propget, 
    id(0x800103F0)
    ]
    long offsetLeft( void );
    [
    propget, 
    id(0x800103F1)
    ]
    long offsetTop( void );
    [
    propget, 
    id(0x800103F2)
    ]
    long offsetWidth( void );
    [
    propget, 
    id(0x800103F3)
    ]
    long offsetHeight( void );
    [
    propget, 
    id(0x800103F4)
    ]
    IHTMLElement * offsetParent( void );
    [
    propput, 
    id(0x80010402)
    ]
    void innerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010402)
    ]
    BSTR innerHTML( void );
    [
    propput, 
    id(0x80010403)
    ]
    void innerText(BSTR Param1 );
    [
    propget, 
    id(0x80010403)
    ]
    BSTR innerText( void );
    [
    propput, 
    id(0x80010404)
    ]
    void outerHTML(BSTR Param1 );
    [
    propget, 
    id(0x80010404)
    ]
    BSTR outerHTML( void );
    [
    propput, 
    id(0x80010405)
    ]
    void outerText(BSTR Param1 );
    [
    propget, 
    id(0x80010405)
    ]
    BSTR outerText( void );
    [
    id(0x80010406)
    ]
    void insertAdjacentHTML([in] BSTR where, [in] BSTR html );
    [
    id(0x80010407)
    ]
    void insertAdjacentText([in] BSTR where, [in] BSTR text );
    [
    propget, 
    id(0x80010408)
    ]
    IHTMLElement * parentTextEdit( void );
    [
    propget, 
    id(0x8001040A)
    ]
    VARIANT_BOOL isTextEdit( void );
    [
    id(0x80010409)
    ]
    void click( void );
    [
    propget, 
    id(0x8001040B)
    ]
    IHTMLFiltersCollection * filters( void );
    [
    propput, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    void ondragstart(VARIANT Param1 );
    [
    propget, 
    id(0x80011793), 
    bindable, 
    displaybind
    ]
    VARIANT ondragstart( void );
    [
    id(0x8001040C)
    ]
    BSTR toString( void );
    [
    propput, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    void onbeforeupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011785), 
    bindable, 
    displaybind
    ]
    VARIANT onbeforeupdate( void );
    [
    propput, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    void onafterupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011786), 
    bindable, 
    displaybind
    ]
    VARIANT onafterupdate( void );
    [
    propput, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    void onerrorupdate(VARIANT Param1 );
    [
    propget, 
    id(0x80011796), 
    bindable, 
    displaybind
    ]
    VARIANT onerrorupdate( void );
    [
    propput, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    void onrowexit(VARIANT Param1 );
    [
    propget, 
    id(0x80011782), 
    bindable, 
    displaybind
    ]
    VARIANT onrowexit( void );
    [
    propput, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    void onrowenter(VARIANT Param1 );
    [
    propget, 
    id(0x80011783), 
    bindable, 
    displaybind
    ]
    VARIANT onrowenter( void );
    [
    propput, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    void ondatasetchanged(VARIANT Param1 );
    [
    propget, 
    id(0x80011798), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetchanged( void );
    [
    propput, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    void ondataavailable(VARIANT Param1 );
    [
    propget, 
    id(0x80011799), 
    bindable, 
    displaybind
    ]
    VARIANT ondataavailable( void );
    [
    propput, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    void ondatasetcomplete(VARIANT Param1 );
    [
    propget, 
    id(0x8001179A), 
    bindable, 
    displaybind
    ]
    VARIANT ondatasetcomplete( void );
    [
    propput, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    void onfilterchange(VARIANT Param1 );
    [
    propget, 
    id(0x8001179B), 
    bindable, 
    displaybind
    ]
    VARIANT onfilterchange( void );
    [
    propget, 
    id(0x8001040D)
    ]
     IDispatch * children( void );
    [
    propget, 
    id(0x8001040E)
    ]
     IDispatch * all( void );
    [
    propput, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    void tabIndex(short Param1 );
    [
    propget, 
    id(0x8001000F), 
    bindable, 
    displaybind
    ]
    short tabIndex( void );
    [
    id(0x800107D0)
    ]
    void focus( void );
    [
    propput, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    void accessKey(BSTR Param1 );
    [
    propget, 
    id(0x800107D5), 
    bindable, 
    displaybind
    ]
    BSTR accessKey( void );
    [
    propput, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    void onblur(VARIANT Param1 );
    [
    propget, 
    id(0x8001177F), 
    bindable, 
    displaybind
    ]
    VARIANT onblur( void );
    [
    propput, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    void onfocus(VARIANT Param1 );
    [
    propget, 
    id(0x8001177E), 
    bindable, 
    displaybind
    ]
    VARIANT onfocus( void );
    [
    propput, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    void onresize(VARIANT Param1 );
    [
    propget, 
    id(0x80011794), 
    bindable, 
    displaybind
    ]
    VARIANT onresize( void );
    [
    id(0x800107D2)
    ]
    void blur( void );
    [
    id(0x800107E1)
    ]
    void addFilter([in]  IUnknown * pUnk );
    [
    id(0x800107E2)
    ]
    void removeFilter([in]  IUnknown * pUnk );
    [
    propget, 
    id(0x800107E3), 
    bindable, 
    displaybind
    ]
    long clientHeight( void );
    [
    propget, 
    id(0x800107E4), 
    bindable, 
    displaybind
    ]
    long clientWidth( void );
    [
    propget, 
    id(0x800107E5), 
    bindable, 
    displaybind
    ]
    long clientTop( void );
    [
    propget, 
    id(0x800107E6), 
    bindable, 
    displaybind
    ]
    long clientLeft( void );
    [
    propget, 
    id(0x000007D0)
    ]
    BSTR type( void );
    [
    propput, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    void disabled(VARIANT_BOOL Param1 );
    [
    propget, 
    id(0x8001004C), 
    bindable, 
    displaybind
    ]
    VARIANT_BOOL disabled( void );
    [
    propput, 
    id(0x000007DC), 
    bindable, 
    displaybind
    ]
    void border(VARIANT Param1 );
    [
    propget, 
    id(0x000007DC), 
    bindable, 
    displaybind
    ]
    VARIANT border( void );
    [
    propput, 
    id(0x000007DD), 
    bindable, 
    displaybind
    ]
    void vspace(long Param1 );
    [
    propget, 
    id(0x000007DD), 
    bindable, 
    displaybind
    ]
    long vspace( void );
    [
    propput, 
    id(0x000007DE), 
    bindable, 
    displaybind
    ]
    void hspace(long Param1 );
    [
    propget, 
    id(0x000007DE), 
    bindable, 
    displaybind
    ]
    long hspace( void );
    [
    propput, 
    id(0x000007DA), 
    bindable, 
    displaybind
    ]
    void alt(BSTR Param1 );
    [
    propget, 
    id(0x000007DA), 
    bindable, 
    displaybind
    ]
    BSTR alt( void );
    [
    propput, 
    id(0x000007DB), 
    bindable, 
    displaybind
    ]
    void src(BSTR Param1 );
    [
    propget, 
    id(0x000007DB), 
    bindable, 
    displaybind
    ]
    BSTR src( void );
    [
    propput, 
    id(0x000007DF), 
    bindable, 
    displaybind
    ]
    void lowsrc(BSTR Param1 );
    [
    propget, 
    id(0x000007DF), 
    bindable, 
    displaybind
    ]
    BSTR lowsrc( void );
    [
    propput,
    id(0x000007E0), 
    bindable, 
    displaybind
    ]
    void vrml(BSTR Param1 );
    [
    propget, 
    id(0x000007E0), 
    bindable, 
    displaybind
    ]
    BSTR vrml( void );
    [
    propput, 
    id(0x000007E1), 
    bindable, 
    displaybind
    ]
    void dynsrc(BSTR Param1 );
    [
    propget, 
    id(0x000007E1), 
    bindable, 
    displaybind
    ]
    BSTR dynsrc( void );
    [
    propget, 
    id(0x800113FC)
    ]
    BSTR readyState( void );
    [
    propget, 
    id(0x000007E2)
    ]
    VARIANT_BOOL complete( void );
    [
    propput, 
    id(0x000007E3), 
    bindable, 
    displaybind
    ]
    void loop(VARIANT Param1 );
    [
    propget, 
    id(0x000007E3), 
    bindable, 
    displaybind
    ]
    VARIANT loop( void );
    [
    propput, 
    id(0x80010049), 
    bindable, 
    displaybind
    ]
    void align(BSTR Param1 );
    [
    propget, 
    id(0x80010049), 
    bindable, 
    displaybind
    ]
    BSTR align( void );
    [
    propput, 
    id(0x80011790), 
    bindable, 
    displaybind
    ]
    void onload(VARIANT Param1 );
    [
    propget, 
    id(0x80011790), 
    bindable, 
    displaybind
    ]
    VARIANT onload( void );
    [
    propput, 
    id(0x8001178D), 
    bindable, 
    displaybind
    ]
    void onerror(VARIANT Param1 );
    [
    propget, 
    id(0x8001178D), 
    bindable, 
    displaybind
    ]
    VARIANT onerror( void );
    [
    propput, 
    id(0x8001178C), 
    bindable, 
    displaybind
    ]
    void onabort(VARIANT Param1 );
    [
    propget, 
    id(0x8001178C), 
    bindable, 
    displaybind
    ]
    VARIANT onabort( void );
    [
    propput, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    void name(BSTR Param1 );
    [
    propget, 
    id(0x80010000), 
    bindable, 
    displaybind
    ]
    BSTR name( void );
    [
    propput, 
    id(0x80010005)
    ]
    void width(long Param1 );
    [
    propget, 
    id(0x80010005)
    ]
    long width( void );
    [
    propput, 
    id(0x80010006)
    ]
    void height(long Param1 );
    [
    propget, 
    id(0x80010006)
    ]
    long height( void );
    [
    propput, 
    id(0x000007E4), 
    bindable, 
    displaybind
    ]
    void Start(BSTR Param1 );
    [
    propget, 
    id(0x000007E4), 
    bindable, 
    displaybind
    ]
    BSTR Start( void );
  };

  [
    uuid(3050F670-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface IElementNamespaceTable: IUnknown
  {
    HRESULT _stdcall AddNamespace([in] BSTR bstrNamespace, [in] BSTR bstrUrn, [in] long lFlags, [in] VARIANT * pvarFactory );
  };

  [
    uuid(3050F672-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface IElementNamespaceFactory: IUnknown
  {
    HRESULT _stdcall create([in] IElementNamespace * pNamespace  );
  };

  [
    uuid(3050F805-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface IElementNamespaceFactory2: IElementNamespaceFactory
  {
    HRESULT _stdcall CreateWithImplementation([in] IElementNamespace * pNamespace , [in] BSTR bstrImplementation );
  };

  [
    uuid(3050F7FD-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface IElementNamespaceFactoryCallback: IUnknown
  {
    HRESULT _stdcall Resolve([in] BSTR bstrNamespace, [in] BSTR bstrTagName, [in] BSTR bstrAttrs, [in] IElementNamespace * pNamespace  );
  };

  [
    uuid(3050F659-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface IElementBehaviorSiteOM2: IElementBehaviorSiteOM
  {
    HRESULT _stdcall GetDefaults([out, retval] IHTMLElementDefaults ** ppDefaults  );
  };

  [
    uuid(3050F4EE-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface IElementBehaviorSiteCategory: IUnknown
  {
    HRESULT _stdcall GetRelatedBehaviors([in] long lDirection, [in] LPWSTR pchCategory, [out, retval] IEnumUnknown ** ppEnumerator  );
  };

  [
    uuid(3050F646-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface IElementBehaviorSubmit: IUnknown
  {
    HRESULT _stdcall GetSubmitInfo([in] IHTMLSubmitData * pSubmitData  );
    HRESULT _stdcall reset( void );
  };

  [
    uuid(3050F6B6-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface IElementBehaviorFocus: IUnknown
  {
    HRESULT _stdcall GetFocusRect([in] tagRECT * pRect  );
  };

  [
    uuid(3050F6BA-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface IElementBehaviorLayout: IUnknown
  {
    HRESULT _stdcall GetSize([in] long dwFlags, [in] tagSIZE sizeContent , [in, out] tagPOINT * pptTranslateBy , [in, out] tagPOINT * pptTopLeft , [in, out] tagSIZE * psizeProposed  );
    HRESULT _stdcall GetLayoutInfo([out, retval] long * plLayoutInfo );
    HRESULT _stdcall GetPosition([in] long lFlags, [in, out] tagPOINT * pptTopLeft  );
    HRESULT _stdcall MapSize([in] tagSIZE * psizeIn , [out] tagRECT * prcOut  );
  };

  [
    uuid(3050F6B7-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface IElementBehaviorSiteLayout: IUnknown
  {
    HRESULT _stdcall InvalidateLayoutInfo( void );
    HRESULT _stdcall InvalidateSize( void );
    HRESULT _stdcall GetMediaResolution([out, retval] tagSIZE * psizeResolution  );
  };

  [
    uuid(3050F847-98B5-11CF-BB82-00AA00BDCE0B)
  ]
   interface IElementBehaviorSiteLayout2: IUnknown
  {
    HRESULT _stdcall GetFontInfo([out] tagLOGFONTW * plf  );
  };

};